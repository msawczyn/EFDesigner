//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v3.0.7.2
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Infrastructure.Annotations;

namespace Ex5_Store
{
   /// <inheritdoc/>
   public partial class EFCRM : DbContext
   {
      #region DbSets
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Address> Addresses { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Agent> Agents { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Audit> Audits { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Features> Features { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Open> Opens { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Person> People { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.PropertyStatus> PropertyStatus { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Tasks> Tasks { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Templates> Templates { get; set; }
      public virtual System.Data.Entity.DbSet<global::Ex5_Store.Viewing> Viewings { get; set; }
      #endregion DbSets

      #region Constructors

      partial void CustomInit();

      /// <summary>
      /// Default connection string
      /// </summary>
      public static string ConnectionString { get; set; } = @"Data Source=(localdb)\mssqllocaldb;Initial Catalog=RE_CRM;Integrated Security=True;MultipleActiveResultSets=True";
      /// <inheritdoc />
      public EFCRM() : base(ConnectionString)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFCRM>(new EFCRMDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFCRM(string connectionString) : base(connectionString)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFCRM>(new EFCRMDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFCRM(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFCRM>(new EFCRMDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFCRM(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection) : base(existingConnection, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFCRM>(new EFCRMDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFCRM(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection) : base(existingConnection, model, contextOwnsConnection)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFCRM>(new EFCRMDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFCRM(System.Data.Entity.Infrastructure.DbCompiledModel model) : base(model)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFCRM>(new EFCRMDatabaseInitializer());
         CustomInit();
      }

      /// <inheritdoc />
      public EFCRM(System.Data.Entity.Core.Objects.ObjectContext objectContext, bool dbContextOwnsObjectContext) : base(objectContext, dbContextOwnsObjectContext)
      {
         Configuration.LazyLoadingEnabled = true;
         Configuration.ProxyCreationEnabled = true;
         System.Data.Entity.Database.SetInitializer<EFCRM>(new EFCRMDatabaseInitializer());
         CustomInit();
      }

      #endregion Constructors

      partial void OnModelCreatingImpl(System.Data.Entity.DbModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(System.Data.Entity.DbModelBuilder modelBuilder);

      /// <inheritdoc />
      protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::Ex5_Store.Address>()
                     .ToTable("Addresses")
                     .HasKey(t => t.AddressId);
         modelBuilder.Entity<global::Ex5_Store.Address>()
                     .Property(t => t.AddressId)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Ex5_Store.Address>()
                     .Property(t => t.PropertyType)
                     .HasMaxLength(125);
         modelBuilder.Entity<global::Ex5_Store.Address>()
                     .Property(t => t.Sync)
                     .HasMaxLength(125);

         modelBuilder.Entity<global::Ex5_Store.Agent>()
                     .ToTable("Agents")
                     .HasKey(t => t.AgentId);
         modelBuilder.Entity<global::Ex5_Store.Agent>()
                     .Property(t => t.AgentId)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Ex5_Store.Agent>()
                     .Property(t => t.Phone)
                     .HasMaxLength(25);
         modelBuilder.Entity<global::Ex5_Store.Agent>()
                     .Property(t => t.Sync)
                     .HasMaxLength(125);
         modelBuilder.Entity<global::Ex5_Store.Agent>()
                     .HasRequired(x => x.Open)
                     .WithMany(x => x.Agents)
                     .Map(x => x.MapKey("OpenOpenId"));

         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .ToTable("Audits")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .Property(t => t.CreatedAt)
                     .IsRequired();
         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .Property(t => t.UpdatedAt)
                     .IsRequired();
         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .Property(t => t.Createdby)
                     .IsRequired();
         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .Property(t => t.LastModifieddby)
                     .IsRequired();
         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .Property(t => t.Deleted)
                     .IsRequired();
         modelBuilder.Entity<global::Ex5_Store.Audit>()
                     .HasRequired(x => x.Tasks)
                     .WithMany(x => x.Audits)
                     .Map(x => x.MapKey("TasksId"));

         modelBuilder.Entity<global::Ex5_Store.Features>()
                     .ToTable("Features")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Ex5_Store.Features>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

         modelBuilder.Entity<global::Ex5_Store.Open>()
                     .ToTable("Opens")
                     .HasKey(t => t.OpenId);
         modelBuilder.Entity<global::Ex5_Store.Open>()
                     .Property(t => t.OpenId)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Ex5_Store.Open>()
                     .Property(t => t.Sync)
                     .HasMaxLength(125);
         modelBuilder.Entity<global::Ex5_Store.Open>()
                     .HasRequired(x => x.Address)
                     .WithMany(x => x.Opens)
                     .Map(x => x.MapKey("AddressAddressId"));

         modelBuilder.Entity<global::Ex5_Store.Person>()
                     .ToTable("People")
                     .HasKey(t => t.PeopleId);
         modelBuilder.Entity<global::Ex5_Store.Person>()
                     .Property(t => t.PeopleId)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Ex5_Store.Person>()
                     .Property(t => t.Phone)
                     .HasMaxLength(25);
         modelBuilder.Entity<global::Ex5_Store.Person>()
                     .Property(t => t.Sync)
                     .HasMaxLength(125);

         modelBuilder.Entity<global::Ex5_Store.PropertyStatus>()
                     .ToTable("PropertyStatus")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Ex5_Store.PropertyStatus>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

         modelBuilder.Entity<global::Ex5_Store.Tasks>()
                     .ToTable("Tasks")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Ex5_Store.Tasks>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Ex5_Store.Tasks>()
                     .HasRequired(x => x.Person)
                     .WithMany(x => x.Tasks)
                     .Map(x => x.MapKey("PersonPeopleId"));
         modelBuilder.Entity<global::Ex5_Store.Tasks>()
                     .HasRequired(x => x.Address)
                     .WithMany(x => x.Tasks)
                     .Map(x => x.MapKey("AddressAddressId"));

         modelBuilder.Entity<global::Ex5_Store.Templates>()
                     .ToTable("Templates")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Ex5_Store.Templates>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);

         modelBuilder.Entity<global::Ex5_Store.Viewing>()
                     .ToTable("Viewings")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::Ex5_Store.Viewing>()
                     .Property(t => t.Id)
                     .IsRequired()
                     .HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
         modelBuilder.Entity<global::Ex5_Store.Viewing>()
                     .Property(t => t.Sync)
                     .HasMaxLength(125);
         modelBuilder.Entity<global::Ex5_Store.Viewing>()
                     .HasRequired(x => x.Open)
                     .WithMany(x => x.Viewings)
                     .Map(x => x.MapKey("OpenOpenId"));
         modelBuilder.Entity<global::Ex5_Store.Viewing>()
                     .HasRequired(x => x.Person)
                     .WithMany(x => x.Viewings)
                     .Map(x => x.MapKey("PersonPeopleId"));

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
