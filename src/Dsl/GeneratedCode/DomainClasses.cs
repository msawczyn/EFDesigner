//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(ModelRootTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (EntityContainerName = {entityContainerNamePropertyStorage})")]
	[DslModeling::DomainObjectId("95532cb8-3452-4b09-a654-aeb2e2d0b3ad")]
	public partial class ModelRoot : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x95532cb8, 0x3452, 0x4b09, 0xa6, 0x54, 0xae, 0xb2, 0xe2, 0xd0, 0xb3, 0xad);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region LazyLoadingEnabled domain property code
		
		/// <summary>
		/// LazyLoadingEnabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid LazyLoadingEnabledDomainPropertyId = new global::System.Guid(0x9c8d4478, 0x0eec, 0x40bf, 0xb8, 0x05, 0xce, 0x3b, 0x6b, 0xa9, 0xea, 0x1a);
		
		/// <summary>
		/// Storage for LazyLoadingEnabled
		/// </summary>
		private global::System.Boolean lazyLoadingEnabledPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of LazyLoadingEnabled domain property.
		/// If true, entity container will use lazy loading
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/LazyLoadingEnabled.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/LazyLoadingEnabled.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/LazyLoadingEnabled.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("9c8d4478-0eec-40bf-b805-ce3b6ba9ea1a")]
		public global::System.Boolean LazyLoadingEnabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lazyLoadingEnabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LazyLoadingEnabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.LazyLoadingEnabled domain property.
		/// </summary>
		internal sealed partial class LazyLoadingEnabledPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private LazyLoadingEnabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.LazyLoadingEnabled domain property value handler.
			/// </summary>
			public static readonly LazyLoadingEnabledPropertyHandler Instance = new LazyLoadingEnabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.LazyLoadingEnabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LazyLoadingEnabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.lazyLoadingEnabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lazyLoadingEnabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityContainerAccess domain property code
		
		/// <summary>
		/// EntityContainerAccess domain property Id.
		/// </summary>
		public static readonly global::System.Guid EntityContainerAccessDomainPropertyId = new global::System.Guid(0xa75bed72, 0xbf5e, 0x47eb, 0xbf, 0x7d, 0x6a, 0x7d, 0x89, 0x9f, 0x9d, 0x94);
		
		/// <summary>
		/// Storage for EntityContainerAccess
		/// </summary>
		private ContainerAccess entityContainerAccessPropertyStorage = ContainerAccess.Public;
		
		/// <summary>
		/// Gets or sets the value of EntityContainerAccess domain property.
		/// Code visibility for entity container
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerAccess.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerAccess.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerAccess.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ContainerAccess.Public)]
		[DslModeling::DomainObjectId("a75bed72-bf5e-47eb-bf7d-6a7d899f9d94")]
		public ContainerAccess EntityContainerAccess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return entityContainerAccessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EntityContainerAccessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EntityContainerAccess domain property.
		/// </summary>
		internal sealed partial class EntityContainerAccessPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, ContainerAccess>
		{
			private EntityContainerAccessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EntityContainerAccess domain property value handler.
			/// </summary>
			public static readonly EntityContainerAccessPropertyHandler Instance = new EntityContainerAccessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EntityContainerAccess domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EntityContainerAccessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ContainerAccess GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.entityContainerAccessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, ContainerAccess newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ContainerAccess oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.entityContainerAccessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityContainerName domain property code
		
		/// <summary>
		/// EntityContainerName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EntityContainerNameDomainPropertyId = new global::System.Guid(0x881415e1, 0x2291, 0x493d, 0xaa, 0xd9, 0x1a, 0xbc, 0xb6, 0x67, 0xb5, 0xcd);
		
		/// <summary>
		/// Storage for EntityContainerName
		/// </summary>
		private global::System.String entityContainerNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EntityContainerName domain property.
		/// Name of entity container class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityContainerName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("881415e1-2291-493d-aad9-1abcb667b5cd")]
		public global::System.String EntityContainerName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return entityContainerNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EntityContainerNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EntityContainerName domain property.
		/// </summary>
		internal sealed partial class EntityContainerNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private EntityContainerNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EntityContainerName domain property value handler.
			/// </summary>
			public static readonly EntityContainerNamePropertyHandler Instance = new EntityContainerNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EntityContainerName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EntityContainerNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.entityContainerNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.entityContainerNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x259ca9ae, 0x0772, 0x41d4, 0x90, 0xb5, 0xab, 0xd1, 0x08, 0x88, 0xe8, 0x39);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Namespace for DBContext and, unless otherwise specified, all other generated
		/// code
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Namespace.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Namespace.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Namespace.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("259ca9ae-0772-41d4-90b5-abd10888e839")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseInitializerType domain property code
		
		/// <summary>
		/// DatabaseInitializerType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseInitializerTypeDomainPropertyId = new global::System.Guid(0x5b68cf01, 0x65fe, 0x4270, 0xb9, 0x6f, 0xa3, 0xe5, 0x19, 0xb9, 0xbb, 0x98);
		
		/// <summary>
		/// Storage for DatabaseInitializerType
		/// </summary>
		private DatabaseInitializerKind databaseInitializerTypePropertyStorage = DatabaseInitializerKind.MigrateDatabaseToLatestVersion;
		
		/// <summary>
		/// Gets or sets the value of DatabaseInitializerType domain property.
		/// Initialization strategy to synchronize the underlying database when an instance
		/// of this context is used for the first time
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseInitializerType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseInitializerType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseInitializerType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DatabaseInitializerKind.MigrateDatabaseToLatestVersion)]
		[DslModeling::DomainObjectId("5b68cf01-65fe-4270-b96f-a3e519b9bb98")]
		public DatabaseInitializerKind DatabaseInitializerType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseInitializerTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseInitializerTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DatabaseInitializerType domain property.
		/// </summary>
		internal sealed partial class DatabaseInitializerTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, DatabaseInitializerKind>
		{
			private DatabaseInitializerTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DatabaseInitializerType domain property value handler.
			/// </summary>
			public static readonly DatabaseInitializerTypePropertyHandler Instance = new DatabaseInitializerTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DatabaseInitializerType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseInitializerTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DatabaseInitializerKind GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseInitializerTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, DatabaseInitializerKind newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DatabaseInitializerKind oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseInitializerTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConnectionString domain property code
		
		/// <summary>
		/// ConnectionString domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConnectionStringDomainPropertyId = new global::System.Guid(0x4f313ccf, 0x48d3, 0x4a0c, 0xa5, 0xbb, 0x71, 0x3c, 0x2e, 0x86, 0xdf, 0x2e);
		
		/// <summary>
		/// Storage for ConnectionString
		/// </summary>
		private global::System.String connectionStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ConnectionString domain property.
		/// Connection string to use. Mutually exclusive with ConnectionStringName
		/// </summary>
		[System.ComponentModel.Editor(typeof(Sawczyn.EFDesigner.EFModel.ConnectionStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionString.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionString.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionString.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4f313ccf-48d3-4a0c-a5bb-713c2e86df2e")]
		public global::System.String ConnectionString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return connectionStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConnectionStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ConnectionString domain property.
		/// </summary>
		internal sealed partial class ConnectionStringPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private ConnectionStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ConnectionString domain property value handler.
			/// </summary>
			public static readonly ConnectionStringPropertyHandler Instance = new ConnectionStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ConnectionString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConnectionStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.connectionStringPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.connectionStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AutomaticMigrationsEnabled domain property code
		
		/// <summary>
		/// AutomaticMigrationsEnabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutomaticMigrationsEnabledDomainPropertyId = new global::System.Guid(0xc455eaf6, 0xf38b, 0x49de, 0xb7, 0x2e, 0x47, 0x7d, 0x73, 0x93, 0x1d, 0xc1);
		
		/// <summary>
		/// Storage for AutomaticMigrationsEnabled
		/// </summary>
		private global::System.Boolean automaticMigrationsEnabledPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of AutomaticMigrationsEnabled domain property.
		/// If true, automatic database migrations will be run when changes are detected.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/AutomaticMigrationsEnabled.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/AutomaticMigrationsEnabled.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/AutomaticMigrationsEnabled.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c455eaf6-f38b-49de-b72e-477d73931dc1")]
		public global::System.Boolean AutomaticMigrationsEnabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return automaticMigrationsEnabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutomaticMigrationsEnabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.AutomaticMigrationsEnabled domain property.
		/// </summary>
		internal sealed partial class AutomaticMigrationsEnabledPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private AutomaticMigrationsEnabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.AutomaticMigrationsEnabled domain property value handler.
			/// </summary>
			public static readonly AutomaticMigrationsEnabledPropertyHandler Instance = new AutomaticMigrationsEnabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.AutomaticMigrationsEnabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutomaticMigrationsEnabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.automaticMigrationsEnabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.automaticMigrationsEnabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityOutputDirectory domain property code
		
		/// <summary>
		/// EntityOutputDirectory domain property Id.
		/// </summary>
		public static readonly global::System.Guid EntityOutputDirectoryDomainPropertyId = new global::System.Guid(0x368a7c8c, 0xe0db, 0x40ef, 0xb6, 0x78, 0xdb, 0xc4, 0x58, 0x0d, 0x9e, 0x54);
		
		/// <summary>
		/// Storage for EntityOutputDirectory
		/// </summary>
		private global::System.String entityOutputDirectoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EntityOutputDirectory domain property.
		/// Output directory for entities
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(ProjectDirectoryTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityOutputDirectory.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityOutputDirectory.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityOutputDirectory.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("368a7c8c-e0db-40ef-b678-dbc4580d9e54")]
		public global::System.String EntityOutputDirectory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return entityOutputDirectoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EntityOutputDirectoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EntityOutputDirectory domain property.
		/// </summary>
		internal sealed partial class EntityOutputDirectoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private EntityOutputDirectoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EntityOutputDirectory domain property value handler.
			/// </summary>
			public static readonly EntityOutputDirectoryPropertyHandler Instance = new EntityOutputDirectoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EntityOutputDirectory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EntityOutputDirectoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.entityOutputDirectoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.entityOutputDirectoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ContextOutputDirectory domain property code
		
		/// <summary>
		/// ContextOutputDirectory domain property Id.
		/// </summary>
		public static readonly global::System.Guid ContextOutputDirectoryDomainPropertyId = new global::System.Guid(0x9e0ffa12, 0x8733, 0x40d2, 0x88, 0x19, 0x73, 0x74, 0x0d, 0xe7, 0xfe, 0xcf);
		
		/// <summary>
		/// Storage for ContextOutputDirectory
		/// </summary>
		private global::System.String contextOutputDirectoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ContextOutputDirectory domain property.
		/// Project directory for DbContext-related files
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(ProjectDirectoryTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ContextOutputDirectory.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ContextOutputDirectory.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ContextOutputDirectory.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("9e0ffa12-8733-40d2-8819-73740de7fecf")]
		public global::System.String ContextOutputDirectory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return contextOutputDirectoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ContextOutputDirectoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ContextOutputDirectory domain property.
		/// </summary>
		internal sealed partial class ContextOutputDirectoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private ContextOutputDirectoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ContextOutputDirectory domain property value handler.
			/// </summary>
			public static readonly ContextOutputDirectoryPropertyHandler Instance = new ContextOutputDirectoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ContextOutputDirectory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ContextOutputDirectoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.contextOutputDirectoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.contextOutputDirectoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EnumOutputDirectory domain property code
		
		/// <summary>
		/// EnumOutputDirectory domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnumOutputDirectoryDomainPropertyId = new global::System.Guid(0x5de798f2, 0x310f, 0x40f7, 0x81, 0x88, 0x37, 0x69, 0x0e, 0x66, 0x91, 0xb5);
		
		/// <summary>
		/// Storage for EnumOutputDirectory
		/// </summary>
		private global::System.String enumOutputDirectoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EnumOutputDirectory domain property.
		/// Project directory for enums
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(ProjectDirectoryTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EnumOutputDirectory.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EnumOutputDirectory.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EnumOutputDirectory.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("5de798f2-310f-40f7-8188-37690e6691b5")]
		public global::System.String EnumOutputDirectory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return enumOutputDirectoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnumOutputDirectoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EnumOutputDirectory domain property.
		/// </summary>
		internal sealed partial class EnumOutputDirectoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private EnumOutputDirectoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EnumOutputDirectory domain property value handler.
			/// </summary>
			public static readonly EnumOutputDirectoryPropertyHandler Instance = new EnumOutputDirectoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EnumOutputDirectory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnumOutputDirectoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.enumOutputDirectoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.enumOutputDirectoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseSchema domain property code
		
		/// <summary>
		/// DatabaseSchema domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseSchemaDomainPropertyId = new global::System.Guid(0x02d27f11, 0x3c30, 0x4837, 0xa5, 0x6a, 0xd6, 0x3f, 0x0e, 0x62, 0x9d, 0x95);
		
		/// <summary>
		/// Storage for DatabaseSchema
		/// </summary>
		private global::System.String databaseSchemaPropertyStorage = "dbo";
		
		/// <summary>
		/// Gets or sets the value of DatabaseSchema domain property.
		/// The schema to use for table creation
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseSchema.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseSchema.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseSchema.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("dbo")]
		[DslModeling::DomainObjectId("02d27f11-3c30-4837-a56a-d63f0e629d95")]
		public global::System.String DatabaseSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseSchemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseSchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DatabaseSchema domain property.
		/// </summary>
		internal sealed partial class DatabaseSchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private DatabaseSchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DatabaseSchema domain property value handler.
			/// </summary>
			public static readonly DatabaseSchemaPropertyHandler Instance = new DatabaseSchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DatabaseSchema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseSchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseSchemaPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseSchemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConcurrencyDefault domain property code
		
		/// <summary>
		/// ConcurrencyDefault domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConcurrencyDefaultDomainPropertyId = new global::System.Guid(0xe4bc45f1, 0x94fd, 0x480e, 0xa6, 0xf9, 0x3c, 0xb2, 0x2c, 0x7f, 0xd4, 0x69);
		
		/// <summary>
		/// Storage for ConcurrencyDefault
		/// </summary>
		private Concurrency concurrencyDefaultPropertyStorage = Concurrency.None;
		
		/// <summary>
		/// Gets or sets the value of ConcurrencyDefault domain property.
		/// Default concurrency handling strategy
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConcurrencyDefault.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConcurrencyDefault.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConcurrencyDefault.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Concurrency.None)]
		[DslModeling::DomainObjectId("e4bc45f1-94fd-480e-a6f9-3cb22c7fd469")]
		public Concurrency ConcurrencyDefault
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return concurrencyDefaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConcurrencyDefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ConcurrencyDefault domain property.
		/// </summary>
		internal sealed partial class ConcurrencyDefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, Concurrency>
		{
			private ConcurrencyDefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ConcurrencyDefault domain property value handler.
			/// </summary>
			public static readonly ConcurrencyDefaultPropertyHandler Instance = new ConcurrencyDefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ConcurrencyDefault domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConcurrencyDefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Concurrency GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.concurrencyDefaultPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, Concurrency newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Concurrency oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.concurrencyDefaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FileNameMarker domain property code
		
		/// <summary>
		/// FileNameMarker domain property Id.
		/// </summary>
		public static readonly global::System.Guid FileNameMarkerDomainPropertyId = new global::System.Guid(0x3dc4c543, 0xb044, 0x44ca, 0xaf, 0x38, 0x31, 0xcf, 0x29, 0x55, 0x54, 0x03);
		
		/// <summary>
		/// Storage for FileNameMarker
		/// </summary>
		private global::System.String fileNameMarkerPropertyStorage = "generated";
		
		/// <summary>
		/// Gets or sets the value of FileNameMarker domain property.
		/// File name suffix for generated files (e.g., foo.generated.cs)
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/FileNameMarker.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/FileNameMarker.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/FileNameMarker.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("generated")]
		[DslModeling::DomainObjectId("3dc4c543-b044-44ca-af38-31cf29555403")]
		public global::System.String FileNameMarker
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fileNameMarkerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FileNameMarkerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.FileNameMarker domain property.
		/// </summary>
		internal sealed partial class FileNameMarkerPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private FileNameMarkerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.FileNameMarker domain property value handler.
			/// </summary>
			public static readonly FileNameMarkerPropertyHandler Instance = new FileNameMarkerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.FileNameMarker domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FileNameMarkerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fileNameMarkerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fileNameMarkerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityFrameworkVersion domain property code
		
		/// <summary>
		/// EntityFrameworkVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid EntityFrameworkVersionDomainPropertyId = new global::System.Guid(0xb4e314ff, 0x3c4b, 0x4e1e, 0x83, 0x09, 0x8d, 0x35, 0xda, 0xcd, 0xc1, 0x9e);
		
		/// <summary>
		/// Storage for EntityFrameworkVersion
		/// </summary>
		private EFVersion entityFrameworkVersionPropertyStorage = EFVersion.EFCore;
		
		/// <summary>
		/// Gets or sets the value of EntityFrameworkVersion domain property.
		/// Version of Entity Framework for validation and generated code
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkVersion.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkVersion.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkVersion.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EFVersion.EFCore)]
		[DslModeling::DomainObjectId("b4e314ff-3c4b-4e1e-8309-8d35dacdc19e")]
		public EFVersion EntityFrameworkVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return entityFrameworkVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EntityFrameworkVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EntityFrameworkVersion domain property.
		/// </summary>
		internal sealed partial class EntityFrameworkVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, EFVersion>
		{
			private EntityFrameworkVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EntityFrameworkVersion domain property value handler.
			/// </summary>
			public static readonly EntityFrameworkVersionPropertyHandler Instance = new EntityFrameworkVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EntityFrameworkVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EntityFrameworkVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EFVersion GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.entityFrameworkVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, EFVersion newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EFVersion oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.entityFrameworkVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ConnectionStringName domain property code
		
		/// <summary>
		/// ConnectionStringName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConnectionStringNameDomainPropertyId = new global::System.Guid(0xeffa53ce, 0x9269, 0x49ed, 0xaf, 0xb1, 0x23, 0x29, 0x05, 0xa8, 0x5e, 0xc2);
		
		/// <summary>
		/// Storage for ConnectionStringName
		/// </summary>
		private global::System.String connectionStringNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ConnectionStringName domain property.
		/// Name of connection string in config file. Mutually exclusive with
		/// ConnectionString
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionStringName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionStringName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ConnectionStringName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("effa53ce-9269-49ed-afb1-232905a85ec2")]
		public global::System.String ConnectionStringName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return connectionStringNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConnectionStringNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ConnectionStringName domain property.
		/// </summary>
		internal sealed partial class ConnectionStringNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private ConnectionStringNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ConnectionStringName domain property value handler.
			/// </summary>
			public static readonly ConnectionStringNamePropertyHandler Instance = new ConnectionStringNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ConnectionStringName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConnectionStringNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.connectionStringNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.connectionStringNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ChopMethodChains domain property code
		
		/// <summary>
		/// ChopMethodChains domain property Id.
		/// </summary>
		public static readonly global::System.Guid ChopMethodChainsDomainPropertyId = new global::System.Guid(0xc28462ae, 0xe9b9, 0x47e6, 0x86, 0xc2, 0x4e, 0xfe, 0x0a, 0xb6, 0xe1, 0xc1);
		
		/// <summary>
		/// Storage for ChopMethodChains
		/// </summary>
		private global::System.Boolean chopMethodChainsPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ChopMethodChains domain property.
		/// Will chop generated code method chains
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ChopMethodChains.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ChopMethodChains.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ChopMethodChains.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("c28462ae-e9b9-47e6-86c2-4efe0ab6e1c1")]
		public global::System.Boolean ChopMethodChains
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return chopMethodChainsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ChopMethodChainsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ChopMethodChains domain property.
		/// </summary>
		internal sealed partial class ChopMethodChainsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ChopMethodChainsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ChopMethodChains domain property value handler.
			/// </summary>
			public static readonly ChopMethodChainsPropertyHandler Instance = new ChopMethodChainsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ChopMethodChains domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ChopMethodChainsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.chopMethodChainsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.chopMethodChainsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InheritanceStrategy domain property code
		
		/// <summary>
		/// InheritanceStrategy domain property Id.
		/// </summary>
		public static readonly global::System.Guid InheritanceStrategyDomainPropertyId = new global::System.Guid(0x3ea27de3, 0xf83c, 0x44d8, 0xbb, 0xa5, 0xc1, 0x88, 0x6f, 0x65, 0xb1, 0x82);
		
		/// <summary>
		/// Storage for InheritanceStrategy
		/// </summary>
		private CodeStrategy inheritanceStrategyPropertyStorage = CodeStrategy.TablePerHierarchy;
		
		/// <summary>
		/// Gets or sets the value of InheritanceStrategy domain property.
		/// How tables will be created and used to handle inheritance
		/// </summary>
		[System.ComponentModel.ReadOnly(false)]
		[System.ComponentModel.TypeConverter(typeof(CodeStrategyTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/InheritanceStrategy.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/InheritanceStrategy.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/InheritanceStrategy.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(CodeStrategy.TablePerHierarchy)]
		[DslModeling::DomainObjectId("3ea27de3-f83c-44d8-bba5-c1886f65b182")]
		public CodeStrategy InheritanceStrategy
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inheritanceStrategyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InheritanceStrategyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.InheritanceStrategy domain property.
		/// </summary>
		internal sealed partial class InheritanceStrategyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, CodeStrategy>
		{
			private InheritanceStrategyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.InheritanceStrategy domain property value handler.
			/// </summary>
			public static readonly InheritanceStrategyPropertyHandler Instance = new InheritanceStrategyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.InheritanceStrategy domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InheritanceStrategyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed CodeStrategy GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inheritanceStrategyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, CodeStrategy newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				CodeStrategy oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inheritanceStrategyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultCollectionClass domain property code
		
		/// <summary>
		/// DefaultCollectionClass domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultCollectionClassDomainPropertyId = new global::System.Guid(0xb33a36f3, 0xc01d, 0x4e65, 0x99, 0x46, 0x17, 0xe6, 0x8d, 0x78, 0xea, 0x6c);
		
		/// <summary>
		/// Storage for DefaultCollectionClass
		/// </summary>
		private global::System.String defaultCollectionClassPropertyStorage = "HashSet";
		
		/// <summary>
		/// Gets or sets the value of DefaultCollectionClass domain property.
		/// The type of container generated to represent associations if not overridden.
		/// Must implement ICollection<T>.
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(CollectionTypeTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultCollectionClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultCollectionClass.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultCollectionClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("HashSet")]
		[DslModeling::DomainObjectId("b33a36f3-c01d-4e65-9946-17e68d78ea6c")]
		public global::System.String DefaultCollectionClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultCollectionClassPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultCollectionClassPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DefaultCollectionClass domain property.
		/// </summary>
		internal sealed partial class DefaultCollectionClassPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private DefaultCollectionClassPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DefaultCollectionClass domain property value handler.
			/// </summary>
			public static readonly DefaultCollectionClassPropertyHandler Instance = new DefaultCollectionClassPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DefaultCollectionClass domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultCollectionClassDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultCollectionClassPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultCollectionClassPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProxyGenerationEnabled domain property code
		
		/// <summary>
		/// ProxyGenerationEnabled domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProxyGenerationEnabledDomainPropertyId = new global::System.Guid(0xc4dd4e17, 0x94aa, 0x44e7, 0x8c, 0xb8, 0x35, 0xf7, 0xc1, 0xa6, 0xd3, 0x74);
		
		/// <summary>
		/// Storage for ProxyGenerationEnabled
		/// </summary>
		private global::System.Boolean proxyGenerationEnabledPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ProxyGenerationEnabled domain property.
		/// If true, context will generate proxies for POCO entities
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ProxyGenerationEnabled.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ProxyGenerationEnabled.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ProxyGenerationEnabled.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("c4dd4e17-94aa-44e7-8cb8-35f7c1a6d374")]
		public global::System.Boolean ProxyGenerationEnabled
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return proxyGenerationEnabledPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProxyGenerationEnabledPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ProxyGenerationEnabled domain property.
		/// </summary>
		internal sealed partial class ProxyGenerationEnabledPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ProxyGenerationEnabledPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ProxyGenerationEnabled domain property value handler.
			/// </summary>
			public static readonly ProxyGenerationEnabledPropertyHandler Instance = new ProxyGenerationEnabledPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ProxyGenerationEnabled domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProxyGenerationEnabledDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.proxyGenerationEnabledPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.proxyGenerationEnabledPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TransformOnSave domain property code
		
		/// <summary>
		/// TransformOnSave domain property Id.
		/// </summary>
		public static readonly global::System.Guid TransformOnSaveDomainPropertyId = new global::System.Guid(0x0b0ccc1d, 0xe8ea, 0x4dab, 0x95, 0x17, 0xb7, 0x41, 0x2c, 0xda, 0x30, 0x7e);
		
		/// <summary>
		/// Storage for TransformOnSave
		/// </summary>
		private global::System.Boolean transformOnSavePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of TransformOnSave domain property.
		/// If true, will trigger code generation when the file is saved. If false, code
		/// generation will have to be triggered manually.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/TransformOnSave.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/TransformOnSave.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/TransformOnSave.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("0b0ccc1d-e8ea-4dab-9517-b7412cda307e")]
		public global::System.Boolean TransformOnSave
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return transformOnSavePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TransformOnSavePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.TransformOnSave domain property.
		/// </summary>
		internal sealed partial class TransformOnSavePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private TransformOnSavePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.TransformOnSave domain property value handler.
			/// </summary>
			public static readonly TransformOnSavePropertyHandler Instance = new TransformOnSavePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.TransformOnSave domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TransformOnSaveDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.transformOnSavePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.transformOnSavePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultIdentityType domain property code
		
		/// <summary>
		/// DefaultIdentityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultIdentityTypeDomainPropertyId = new global::System.Guid(0x07688b4c, 0xba00, 0x4e51, 0x9a, 0xbd, 0x73, 0x53, 0xa4, 0xdf, 0x23, 0x3d);
		
		/// <summary>
		/// Storage for DefaultIdentityType
		/// </summary>
		private global::System.String defaultIdentityTypePropertyStorage = "Int64";
		
		/// <summary>
		/// Gets or sets the value of DefaultIdentityType domain property.
		/// Default type for ID properties in new classes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(IdentityAttributeTypeTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultIdentityType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultIdentityType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DefaultIdentityType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Int64")]
		[DslModeling::DomainObjectId("07688b4c-ba00-4e51-9abd-7353a4df233d")]
		public global::System.String DefaultIdentityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultIdentityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultIdentityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DefaultIdentityType domain property.
		/// </summary>
		internal sealed partial class DefaultIdentityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private DefaultIdentityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DefaultIdentityType domain property value handler.
			/// </summary>
			public static readonly DefaultIdentityTypePropertyHandler Instance = new DefaultIdentityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DefaultIdentityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultIdentityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultIdentityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultIdentityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowCascadeDeletes domain property code
		
		/// <summary>
		/// ShowCascadeDeletes domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowCascadeDeletesDomainPropertyId = new global::System.Guid(0x267e37bd, 0x159f, 0x4b8b, 0x88, 0xc3, 0xf1, 0x56, 0x1b, 0xf5, 0x76, 0xe0);
		
		/// <summary>
		/// Storage for ShowCascadeDeletes
		/// </summary>
		private global::System.Boolean showCascadeDeletesPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShowCascadeDeletes domain property.
		/// If true, will display cascade deleted associations as dashed red lines
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowCascadeDeletes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowCascadeDeletes.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowCascadeDeletes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("267e37bd-159f-4b8b-88c3-f1561bf576e0")]
		public global::System.Boolean ShowCascadeDeletes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showCascadeDeletesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowCascadeDeletesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ShowCascadeDeletes domain property.
		/// </summary>
		internal sealed partial class ShowCascadeDeletesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ShowCascadeDeletesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ShowCascadeDeletes domain property value handler.
			/// </summary>
			public static readonly ShowCascadeDeletesPropertyHandler Instance = new ShowCascadeDeletesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ShowCascadeDeletes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowCascadeDeletesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.showCascadeDeletesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showCascadeDeletesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseType domain property code
		
		/// <summary>
		/// DatabaseType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseTypeDomainPropertyId = new global::System.Guid(0x35be1c55, 0x6c42, 0x45bf, 0xaf, 0x62, 0x16, 0xd0, 0x0d, 0xbf, 0x80, 0xc4);
		
		/// <summary>
		/// Storage for DatabaseType
		/// </summary>
		private DatabaseKind databaseTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DatabaseType domain property.
		/// Database manifest token. Optimization if runtime database type is known and
		/// unchanging, and only valid for SqlServer.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("35be1c55-6c42-45bf-af62-16d00dbf80c4")]
		public DatabaseKind DatabaseType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DatabaseType domain property.
		/// </summary>
		internal sealed partial class DatabaseTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, DatabaseKind>
		{
			private DatabaseTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DatabaseType domain property value handler.
			/// </summary>
			public static readonly DatabaseTypePropertyHandler Instance = new DatabaseTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DatabaseType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DatabaseKind GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, DatabaseKind newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DatabaseKind oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region WarnOnMissingDocumentation domain property code
		
		/// <summary>
		/// WarnOnMissingDocumentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid WarnOnMissingDocumentationDomainPropertyId = new global::System.Guid(0x247aa399, 0x3d89, 0x4b48, 0xba, 0xeb, 0x99, 0x2e, 0x8c, 0xb3, 0xd4, 0x7a);
		
		/// <summary>
		/// Storage for WarnOnMissingDocumentation
		/// </summary>
		private global::System.Boolean warnOnMissingDocumentationPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of WarnOnMissingDocumentation domain property.
		/// If true, will generate warnings when summary documentation is missing
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/WarnOnMissingDocumentation.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/WarnOnMissingDocumentation.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/WarnOnMissingDocumentation.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("247aa399-3d89-4b48-baeb-992e8cb3d47a")]
		public global::System.Boolean WarnOnMissingDocumentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return warnOnMissingDocumentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				WarnOnMissingDocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.WarnOnMissingDocumentation domain property.
		/// </summary>
		internal sealed partial class WarnOnMissingDocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private WarnOnMissingDocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.WarnOnMissingDocumentation domain property value handler.
			/// </summary>
			public static readonly WarnOnMissingDocumentationPropertyHandler Instance = new WarnOnMissingDocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.WarnOnMissingDocumentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return WarnOnMissingDocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.warnOnMissingDocumentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.warnOnMissingDocumentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityFrameworkPackageVersion domain property code
		
		/// <summary>
		/// EntityFrameworkPackageVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid EntityFrameworkPackageVersionDomainPropertyId = new global::System.Guid(0x2a16f8e1, 0x9e68, 0x43ce, 0xb6, 0x25, 0x5e, 0x68, 0xe8, 0x49, 0x7a, 0xbb);
		
		/// <summary>
		/// Storage for EntityFrameworkPackageVersion
		/// </summary>
		private global::System.String entityFrameworkPackageVersionPropertyStorage = "Latest";
		
		/// <summary>
		/// Gets or sets the value of EntityFrameworkPackageVersion domain property.
		/// Version of Entity Framework code for validation and generated code
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(EFPackageVersionTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkPackageVersion.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkPackageVersion.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityFrameworkPackageVersion.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Latest")]
		[DslModeling::DomainObjectId("2a16f8e1-9e68-43ce-b625-5e68e8497abb")]
		public global::System.String EntityFrameworkPackageVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return entityFrameworkPackageVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EntityFrameworkPackageVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EntityFrameworkPackageVersion domain property.
		/// </summary>
		internal sealed partial class EntityFrameworkPackageVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private EntityFrameworkPackageVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EntityFrameworkPackageVersion domain property value handler.
			/// </summary>
			public static readonly EntityFrameworkPackageVersionPropertyHandler Instance = new EntityFrameworkPackageVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EntityFrameworkPackageVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EntityFrameworkPackageVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.entityFrameworkPackageVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.entityFrameworkPackageVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StructOutputDirectory domain property code
		
		/// <summary>
		/// StructOutputDirectory domain property Id.
		/// </summary>
		public static readonly global::System.Guid StructOutputDirectoryDomainPropertyId = new global::System.Guid(0x35350509, 0x1856, 0x4ca7, 0x88, 0x4a, 0x1c, 0xee, 0x25, 0x52, 0xee, 0xf9);
		
		/// <summary>
		/// Storage for StructOutputDirectory
		/// </summary>
		private global::System.String structOutputDirectoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StructOutputDirectory domain property.
		/// Project directory for generated structures (owned/complex types)
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(ProjectDirectoryTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/StructOutputDirectory.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/StructOutputDirectory.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/StructOutputDirectory.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("35350509-1856-4ca7-884a-1cee2552eef9")]
		public global::System.String StructOutputDirectory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return structOutputDirectoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StructOutputDirectoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.StructOutputDirectory domain property.
		/// </summary>
		internal sealed partial class StructOutputDirectoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private StructOutputDirectoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.StructOutputDirectory domain property value handler.
			/// </summary>
			public static readonly StructOutputDirectoryPropertyHandler Instance = new StructOutputDirectoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.StructOutputDirectory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StructOutputDirectoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.structOutputDirectoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.structOutputDirectoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DbSetAccess domain property code
		
		/// <summary>
		/// DbSetAccess domain property Id.
		/// </summary>
		public static readonly global::System.Guid DbSetAccessDomainPropertyId = new global::System.Guid(0x950f6c9e, 0x3977, 0x4968, 0xaa, 0x8f, 0x69, 0x7f, 0xfb, 0x49, 0xac, 0x4a);
		
		/// <summary>
		/// Storage for DbSetAccess
		/// </summary>
		private ContainerAccess dbSetAccessPropertyStorage = ContainerAccess.Public;
		
		/// <summary>
		/// Gets or sets the value of DbSetAccess domain property.
		/// Code visibility for DbSets
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DbSetAccess.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DbSetAccess.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DbSetAccess.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ContainerAccess.Public)]
		[DslModeling::DomainObjectId("950f6c9e-3977-4968-aa8f-697ffb49ac4a")]
		public ContainerAccess DbSetAccess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dbSetAccessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DbSetAccessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DbSetAccess domain property.
		/// </summary>
		internal sealed partial class DbSetAccessPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, ContainerAccess>
		{
			private DbSetAccessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DbSetAccess domain property value handler.
			/// </summary>
			public static readonly DbSetAccessPropertyHandler Instance = new DbSetAccessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DbSetAccess domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DbSetAccessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ContainerAccess GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dbSetAccessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, ContainerAccess newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ContainerAccess oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dbSetAccessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xa95a5645, 0xb5d5, 0x4b11, 0xb1, 0x77, 0xd6, 0x74, 0xce, 0xe9, 0x12, 0x90);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Detailed code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Description.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Description.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Description.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a95a5645-b5d5-4b11-b177-d674cee91290")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xa25a2ffe, 0x9ae9, 0x408b, 0xa3, 0x46, 0x05, 0x68, 0x05, 0xde, 0x69, 0x75);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Brief code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Summary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Summary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Summary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a25a2ffe-9ae9-408b-a346-056805de6975")]
		public global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.summaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowWarningsInDesigner domain property code
		
		/// <summary>
		/// ShowWarningsInDesigner domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowWarningsInDesignerDomainPropertyId = new global::System.Guid(0xb79884bd, 0x572a, 0x444c, 0xb6, 0x4e, 0x24, 0xd6, 0x6c, 0x8e, 0xfc, 0x29);
		
		/// <summary>
		/// Storage for ShowWarningsInDesigner
		/// </summary>
		private global::System.Boolean showWarningsInDesignerPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ShowWarningsInDesigner domain property.
		/// If true, will display warning glyphs with tooltips when model elements have
		/// non-fatal issues detected
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowWarningsInDesigner.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowWarningsInDesigner.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowWarningsInDesigner.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("b79884bd-572a-444c-b64e-24d66c8efc29")]
		public global::System.Boolean ShowWarningsInDesigner
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showWarningsInDesignerPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowWarningsInDesignerPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ShowWarningsInDesigner domain property.
		/// </summary>
		internal sealed partial class ShowWarningsInDesignerPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ShowWarningsInDesignerPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ShowWarningsInDesigner domain property value handler.
			/// </summary>
			public static readonly ShowWarningsInDesignerPropertyHandler Instance = new ShowWarningsInDesignerPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ShowWarningsInDesigner domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowWarningsInDesignerDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.showWarningsInDesignerPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showWarningsInDesignerPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityNamespace domain property code
		
		/// <summary>
		/// EntityNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid EntityNamespaceDomainPropertyId = new global::System.Guid(0xf11b0472, 0x3a86, 0x497c, 0xb8, 0xa7, 0xcd, 0x90, 0x35, 0x0f, 0xe2, 0x89);
		
		/// <summary>
		/// Storage for EntityNamespace
		/// </summary>
		private global::System.String entityNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EntityNamespace domain property.
		/// Namespace for entities
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityNamespace.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityNamespace.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityNamespace.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("f11b0472-3a86-497c-b8a7-cd90350fe289")]
		public global::System.String EntityNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return entityNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EntityNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EntityNamespace domain property.
		/// </summary>
		internal sealed partial class EntityNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private EntityNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EntityNamespace domain property value handler.
			/// </summary>
			public static readonly EntityNamespacePropertyHandler Instance = new EntityNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EntityNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EntityNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.entityNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.entityNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EnumNamespace domain property code
		
		/// <summary>
		/// EnumNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid EnumNamespaceDomainPropertyId = new global::System.Guid(0xf7d6b698, 0xb82a, 0x4438, 0xbf, 0x49, 0xc8, 0x8c, 0x9c, 0x02, 0x99, 0xc7);
		
		/// <summary>
		/// Storage for EnumNamespace
		/// </summary>
		private global::System.String enumNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EnumNamespace domain property.
		/// Namespace for enumerations
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EnumNamespace.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EnumNamespace.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EnumNamespace.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("f7d6b698-b82a-4438-bf49-c88c9c0299c7")]
		public global::System.String EnumNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return enumNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EnumNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EnumNamespace domain property.
		/// </summary>
		internal sealed partial class EnumNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private EnumNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EnumNamespace domain property value handler.
			/// </summary>
			public static readonly EnumNamespacePropertyHandler Instance = new EnumNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EnumNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EnumNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.enumNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.enumNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StructNamespace domain property code
		
		/// <summary>
		/// StructNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid StructNamespaceDomainPropertyId = new global::System.Guid(0xc3e26d6b, 0x3032, 0x4cb2, 0xaa, 0xc3, 0x05, 0x76, 0x34, 0xaa, 0x40, 0x96);
		
		/// <summary>
		/// Storage for StructNamespace
		/// </summary>
		private global::System.String structNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of StructNamespace domain property.
		/// Namespace for owned entities
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/StructNamespace.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/StructNamespace.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/StructNamespace.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("c3e26d6b-3032-4cb2-aac3-057634aa4096")]
		public global::System.String StructNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return structNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StructNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.StructNamespace domain property.
		/// </summary>
		internal sealed partial class StructNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private StructNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.StructNamespace domain property value handler.
			/// </summary>
			public static readonly StructNamespacePropertyHandler Instance = new StructNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.StructNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StructNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.structNamespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.structNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespaces domain property code
		
		/// <summary>
		/// Namespaces domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespacesDomainPropertyId = new global::System.Guid(0x441a9ed6, 0xa2d6, 0x48a2, 0x8d, 0x49, 0x13, 0x6a, 0xfd, 0xea, 0xc9, 0xfc);
		
		/// <summary>
		/// Gets or sets the value of Namespaces domain property.
		/// Default namespaces for generated code
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Namespaces.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Namespaces.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/Namespaces.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("441a9ed6-a2d6-48a2-8d49-136afdeac9fc")]
		public Namespaces Namespaces
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamespacesPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.Namespaces domain property.
		/// </summary>
		internal sealed partial class NamespacesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, Namespaces>
		{
			private NamespacesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.Namespaces domain property value handler.
			/// </summary>
			public static readonly NamespacesPropertyHandler Instance = new NamespacesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.Namespaces domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespacesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Namespaces GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Namespaces because its Kind is
				// set to CustomStorage. Please provide the GetNamespacesValue()
				// method on the domain class.
				return element.GetNamespacesValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, Namespaces newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Namespaces oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Namespaces because its Kind is
					// set to CustomStorage. Please provide the SetNamespacesValue()
					// method on the domain class.
					element.SetNamespacesValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutputLocations domain property code
		
		/// <summary>
		/// OutputLocations domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutputLocationsDomainPropertyId = new global::System.Guid(0xad922a6e, 0xebe8, 0x4cf7, 0xae, 0x7d, 0xb0, 0x44, 0x10, 0x10, 0x68, 0xda);
		
		/// <summary>
		/// Gets or sets the value of OutputLocations domain property.
		/// Default output folders for generated code
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/OutputLocations.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/OutputLocations.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/OutputLocations.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ad922a6e-ebe8-4cf7-ae7d-b044101068da")]
		public OutputLocations OutputLocations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutputLocationsPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutputLocationsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.OutputLocations domain property.
		/// </summary>
		internal sealed partial class OutputLocationsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, OutputLocations>
		{
			private OutputLocationsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.OutputLocations domain property value handler.
			/// </summary>
			public static readonly OutputLocationsPropertyHandler Instance = new OutputLocationsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.OutputLocations domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutputLocationsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed OutputLocations GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutputLocations because its Kind is
				// set to CustomStorage. Please provide the GetOutputLocationsValue()
				// method on the domain class.
				return element.GetOutputLocationsValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, OutputLocations newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				OutputLocations oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutputLocations because its Kind is
					// set to CustomStorage. Please provide the SetOutputLocationsValue()
					// method on the domain class.
					element.SetOutputLocationsValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region ExposeForeignKeys domain property code
		
		/// <summary>
		/// ExposeForeignKeys domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExposeForeignKeysDomainPropertyId = new global::System.Guid(0x6f74414d, 0x8d1d, 0x4776, 0x9e, 0x5e, 0x76, 0x08, 0x7d, 0x2b, 0xe9, 0x37);
		
		/// <summary>
		/// Storage for ExposeForeignKeys
		/// </summary>
		private global::System.Boolean exposeForeignKeysPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExposeForeignKeys domain property.
		/// Allow foreign key properties to be available in the POCO entities (recommended:
		/// false)
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ExposeForeignKeys.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ExposeForeignKeys.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ExposeForeignKeys.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6f74414d-8d1d-4776-9e5e-76087d2be937")]
		public global::System.Boolean ExposeForeignKeys
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return exposeForeignKeysPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExposeForeignKeysPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ExposeForeignKeys domain property.
		/// </summary>
		internal sealed partial class ExposeForeignKeysPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ExposeForeignKeysPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ExposeForeignKeys domain property value handler.
			/// </summary>
			public static readonly ExposeForeignKeysPropertyHandler Instance = new ExposeForeignKeysPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ExposeForeignKeys domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExposeForeignKeysDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.exposeForeignKeysPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.exposeForeignKeysPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BaseClass domain property code
		
		/// <summary>
		/// BaseClass domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseClassDomainPropertyId = new global::System.Guid(0x7b3fbfb0, 0x9b8c, 0x4ea6, 0xaf, 0x94, 0x19, 0x8d, 0xf5, 0x7f, 0x15, 0xe6);
		
		/// <summary>
		/// Storage for BaseClass
		/// </summary>
		private global::System.String baseClassPropertyStorage = "DbContext";
		
		/// <summary>
		/// Gets or sets the value of BaseClass domain property.
		/// Base class for DbContext in generated code. Should be fully qualified if not in
		/// a standard namespace.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/BaseClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/BaseClass.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/BaseClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("DbContext")]
		[DslModeling::DomainObjectId("7b3fbfb0-9b8c-4ea6-af94-198df57f15e6")]
		public global::System.String BaseClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return baseClassPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BaseClassPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.BaseClass domain property.
		/// </summary>
		internal sealed partial class BaseClassPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private BaseClassPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.BaseClass domain property value handler.
			/// </summary>
			public static readonly BaseClassPropertyHandler Instance = new BaseClassPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.BaseClass domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseClassDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.baseClassPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.baseClassPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowGrid domain property code
		
		/// <summary>
		/// ShowGrid domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowGridDomainPropertyId = new global::System.Guid(0xe822ea02, 0xb26c, 0x4105, 0xad, 0xf4, 0xbf, 0x80, 0x41, 0x06, 0x8f, 0x35);
		
		/// <summary>
		/// Storage for ShowGrid
		/// </summary>
		private global::System.Boolean showGridPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShowGrid domain property.
		/// If true, displays a grid for aligning shapes
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowGrid.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowGrid.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowGrid.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e822ea02-b26c-4105-adf4-bf8041068f35")]
		public global::System.Boolean ShowGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showGridPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowGridPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ShowGrid domain property.
		/// </summary>
		internal sealed partial class ShowGridPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ShowGridPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ShowGrid domain property value handler.
			/// </summary>
			public static readonly ShowGridPropertyHandler Instance = new ShowGridPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ShowGrid domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowGridDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.showGridPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showGridPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SnapToGrid domain property code
		
		/// <summary>
		/// SnapToGrid domain property Id.
		/// </summary>
		public static readonly global::System.Guid SnapToGridDomainPropertyId = new global::System.Guid(0x6d82895b, 0x7648, 0x4c95, 0xa0, 0xb8, 0xf9, 0xf7, 0x96, 0xe3, 0x40, 0x03);
		
		/// <summary>
		/// Storage for SnapToGrid
		/// </summary>
		private global::System.Boolean snapToGridPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SnapToGrid domain property.
		/// If true, shapes snap to the designer's grid
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/SnapToGrid.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/SnapToGrid.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/SnapToGrid.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6d82895b-7648-4c95-a0b8-f9f796e34003")]
		public global::System.Boolean SnapToGrid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return snapToGridPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SnapToGridPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.SnapToGrid domain property.
		/// </summary>
		internal sealed partial class SnapToGridPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private SnapToGridPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.SnapToGrid domain property value handler.
			/// </summary>
			public static readonly SnapToGridPropertyHandler Instance = new SnapToGridPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.SnapToGrid domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SnapToGridDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.snapToGridPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.snapToGridPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GridColor domain property code
		
		/// <summary>
		/// GridColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid GridColorDomainPropertyId = new global::System.Guid(0x274ed266, 0x5104, 0x4319, 0xb3, 0xde, 0x00, 0x70, 0x50, 0x8c, 0xc3, 0x83);
		
		/// <summary>
		/// Storage for GridColor
		/// </summary>
		private global::System.Drawing.Color gridColorPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GridColor domain property.
		/// Color for designer grid
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GridColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GridColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GridColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("274ed266-5104-4319-b3de-0070508cc383")]
		public global::System.Drawing.Color GridColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return gridColorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GridColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.GridColor domain property.
		/// </summary>
		internal sealed partial class GridColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Drawing.Color>
		{
			private GridColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.GridColor domain property value handler.
			/// </summary>
			public static readonly GridColorPropertyHandler Instance = new GridColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.GridColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GridColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.gridColorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.gridColorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GridSize domain property code
		
		/// <summary>
		/// GridSize domain property Id.
		/// </summary>
		public static readonly global::System.Guid GridSizeDomainPropertyId = new global::System.Guid(0xe4121eca, 0x2a99, 0x4d3c, 0x81, 0x59, 0x17, 0x84, 0xfd, 0xb7, 0x2d, 0x28);
		
		/// <summary>
		/// Storage for GridSize
		/// </summary>
		private global::System.Int16 gridSizePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GridSize domain property.
		/// Size of display grid units, in inches
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GridSize.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GridSize.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GridSize.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e4121eca-2a99-4d3c-8159-1784fdb72d28")]
		public global::System.Int16 GridSize
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return gridSizePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GridSizePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.GridSize domain property.
		/// </summary>
		internal sealed partial class GridSizePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Int16>
		{
			private GridSizePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.GridSize domain property value handler.
			/// </summary>
			public static readonly GridSizePropertyHandler Instance = new GridSizePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.GridSize domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GridSizeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.gridSizePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.gridSizePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowForeignKeyPropertyNames domain property code
		
		/// <summary>
		/// ShowForeignKeyPropertyNames domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowForeignKeyPropertyNamesDomainPropertyId = new global::System.Guid(0x1b587ac8, 0x01a1, 0x4758, 0xbd, 0xec, 0x42, 0xe1, 0x08, 0x6e, 0x76, 0x22);
		
		/// <summary>
		/// Storage for ShowForeignKeyPropertyNames
		/// </summary>
		private global::System.Boolean showForeignKeyPropertyNamesPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of ShowForeignKeyPropertyNames domain property.
		/// If true, will show declared foreign key property names (if any) on the
		/// association ends
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowForeignKeyPropertyNames.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowForeignKeyPropertyNames.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowForeignKeyPropertyNames.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("1b587ac8-01a1-4758-bdec-42e1086e7622")]
		public global::System.Boolean ShowForeignKeyPropertyNames
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showForeignKeyPropertyNamesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowForeignKeyPropertyNamesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ShowForeignKeyPropertyNames domain property.
		/// </summary>
		internal sealed partial class ShowForeignKeyPropertyNamesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ShowForeignKeyPropertyNamesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ShowForeignKeyPropertyNames domain property value handler.
			/// </summary>
			public static readonly ShowForeignKeyPropertyNamesPropertyHandler Instance = new ShowForeignKeyPropertyNamesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ShowForeignKeyPropertyNames domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowForeignKeyPropertyNamesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.showForeignKeyPropertyNamesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showForeignKeyPropertyNamesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseCollationDefault domain property code
		
		/// <summary>
		/// DatabaseCollationDefault domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseCollationDefaultDomainPropertyId = new global::System.Guid(0xa7b8458b, 0xade6, 0x4392, 0x85, 0x9b, 0xae, 0x2d, 0xc0, 0x17, 0xc9, 0x8f);
		
		/// <summary>
		/// Storage for DatabaseCollationDefault
		/// </summary>
		private global::System.String databaseCollationDefaultPropertyStorage = "default";
		
		/// <summary>
		/// Gets or sets the value of DatabaseCollationDefault domain property.
		/// The default collation for database storage.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseCollationDefault.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseCollationDefault.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/DatabaseCollationDefault.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("default")]
		[DslModeling::DomainObjectId("a7b8458b-ade6-4392-859b-ae2dc017c98f")]
		public global::System.String DatabaseCollationDefault
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return databaseCollationDefaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseCollationDefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.DatabaseCollationDefault domain property.
		/// </summary>
		internal sealed partial class DatabaseCollationDefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.String>
		{
			private DatabaseCollationDefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.DatabaseCollationDefault domain property value handler.
			/// </summary>
			public static readonly DatabaseCollationDefaultPropertyHandler Instance = new DatabaseCollationDefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.DatabaseCollationDefault domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseCollationDefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.databaseCollationDefaultPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.databaseCollationDefaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyAccessModeDefault domain property code
		
		/// <summary>
		/// PropertyAccessModeDefault domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyAccessModeDefaultDomainPropertyId = new global::System.Guid(0x51108d30, 0x911e, 0x496c, 0x9b, 0x41, 0x99, 0xd2, 0x97, 0xf2, 0x87, 0xc3);
		
		/// <summary>
		/// Storage for PropertyAccessModeDefault
		/// </summary>
		private PropertyAccessMode propertyAccessModeDefaultPropertyStorage = PropertyAccessMode.FieldDuringConstruction;
		
		/// <summary>
		/// Gets or sets the value of PropertyAccessModeDefault domain property.
		/// Default property access mode for backing fields
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PropertyAccessModeDefault.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PropertyAccessModeDefault.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PropertyAccessModeDefault.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PropertyAccessMode.FieldDuringConstruction)]
		[DslModeling::DomainObjectId("51108d30-911e-496c-9b41-99d297f287c3")]
		public PropertyAccessMode PropertyAccessModeDefault
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propertyAccessModeDefaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyAccessModeDefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.PropertyAccessModeDefault domain property.
		/// </summary>
		internal sealed partial class PropertyAccessModeDefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, PropertyAccessMode>
		{
			private PropertyAccessModeDefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.PropertyAccessModeDefault domain property value handler.
			/// </summary>
			public static readonly PropertyAccessModeDefaultPropertyHandler Instance = new PropertyAccessModeDefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.PropertyAccessModeDefault domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyAccessModeDefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyAccessMode GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propertyAccessModeDefaultPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, PropertyAccessMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyAccessMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propertyAccessModeDefaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region UseTabs domain property code
		
		/// <summary>
		/// UseTabs domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseTabsDomainPropertyId = new global::System.Guid(0x56d5d7e6, 0xc806, 0x422f, 0xb9, 0x06, 0xf1, 0x2e, 0x2b, 0x6d, 0x89, 0xfc);
		
		/// <summary>
		/// Storage for UseTabs
		/// </summary>
		private global::System.Boolean useTabsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UseTabs domain property.
		/// If true, will generate code with tabs instead of spaces for indentation
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/UseTabs.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/UseTabs.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/UseTabs.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("56d5d7e6-c806-422f-b906-f12e2b6d89fc")]
		public global::System.Boolean UseTabs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useTabsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseTabsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.UseTabs domain property.
		/// </summary>
		internal sealed partial class UseTabsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private UseTabsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.UseTabs domain property value handler.
			/// </summary>
			public static readonly UseTabsPropertyHandler Instance = new UseTabsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.UseTabs domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseTabsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.useTabsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useTabsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GenerateDbContextFactory domain property code
		
		/// <summary>
		/// GenerateDbContextFactory domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenerateDbContextFactoryDomainPropertyId = new global::System.Guid(0xebce71d1, 0x03df, 0x4975, 0xa7, 0x7e, 0xc8, 0x74, 0x88, 0x4a, 0xd6, 0xab);
		
		/// <summary>
		/// Storage for GenerateDbContextFactory
		/// </summary>
		private global::System.Boolean generateDbContextFactoryPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GenerateDbContextFactory domain property.
		/// If true, a DbContextFactory-derived class will be generated for the project
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GenerateDbContextFactory.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GenerateDbContextFactory.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GenerateDbContextFactory.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ebce71d1-03df-4975-a77e-c874884ad6ab")]
		public global::System.Boolean GenerateDbContextFactory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generateDbContextFactoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenerateDbContextFactoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.GenerateDbContextFactory domain property.
		/// </summary>
		internal sealed partial class GenerateDbContextFactoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private GenerateDbContextFactoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.GenerateDbContextFactory domain property value handler.
			/// </summary>
			public static readonly GenerateDbContextFactoryPropertyHandler Instance = new GenerateDbContextFactoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.GenerateDbContextFactory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenerateDbContextFactoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.generateDbContextFactoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generateDbContextFactoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityDefaultConstructorVisibilityDefault domain property code
		
		/// <summary>
		/// EntityDefaultConstructorVisibilityDefault domain property Id.
		/// </summary>
		public static readonly global::System.Guid EntityDefaultConstructorVisibilityDefaultDomainPropertyId = new global::System.Guid(0x063a93fd, 0x17c3, 0x4a44, 0xa0, 0xab, 0xd4, 0x7d, 0xf1, 0x2e, 0x8f, 0x9a);
		
		/// <summary>
		/// Storage for EntityDefaultConstructorVisibilityDefault
		/// </summary>
		private TypeAccessModifierExt entityDefaultConstructorVisibilityDefaultPropertyStorage = TypeAccessModifierExt.Default;
		
		/// <summary>
		/// Gets or sets the value of EntityDefaultConstructorVisibilityDefault domain property.
		/// Defines the visibility of an entity's default constructor. Normally, those are
		/// public unless there are required properties or associations, then they generate
		/// as protected.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityDefaultConstructorVisibilityDefault.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityDefaultConstructorVisibilityDefault.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/EntityDefaultConstructorVisibilityDefault.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TypeAccessModifierExt.Default)]
		[DslModeling::DomainObjectId("063a93fd-17c3-4a44-a0ab-d47df12e8f9a")]
		public TypeAccessModifierExt EntityDefaultConstructorVisibilityDefault
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return entityDefaultConstructorVisibilityDefaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EntityDefaultConstructorVisibilityDefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.EntityDefaultConstructorVisibilityDefault domain property.
		/// </summary>
		internal sealed partial class EntityDefaultConstructorVisibilityDefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, TypeAccessModifierExt>
		{
			private EntityDefaultConstructorVisibilityDefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.EntityDefaultConstructorVisibilityDefault domain property value handler.
			/// </summary>
			public static readonly EntityDefaultConstructorVisibilityDefaultPropertyHandler Instance = new EntityDefaultConstructorVisibilityDefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.EntityDefaultConstructorVisibilityDefault domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EntityDefaultConstructorVisibilityDefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeAccessModifierExt GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.entityDefaultConstructorVisibilityDefaultPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, TypeAccessModifierExt newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeAccessModifierExt oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.entityDefaultConstructorVisibilityDefaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PluralizeDbSetNames domain property code
		
		/// <summary>
		/// PluralizeDbSetNames domain property Id.
		/// </summary>
		public static readonly global::System.Guid PluralizeDbSetNamesDomainPropertyId = new global::System.Guid(0x0c487b9f, 0xc39b, 0x4286, 0xbe, 0x45, 0xd1, 0xc2, 0x76, 0x69, 0x7f, 0xb1);
		
		/// <summary>
		/// Storage for PluralizeDbSetNames
		/// </summary>
		private global::System.Boolean pluralizeDbSetNamesPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of PluralizeDbSetNames domain property.
		/// If true, DbSet names will default to the plural value of the class name. If
		/// false, they'll be the same as the class name
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PluralizeDbSetNames.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PluralizeDbSetNames.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PluralizeDbSetNames.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("0c487b9f-c39b-4286-be45-d1c276697fb1")]
		public global::System.Boolean PluralizeDbSetNames
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pluralizeDbSetNamesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PluralizeDbSetNamesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.PluralizeDbSetNames domain property.
		/// </summary>
		internal sealed partial class PluralizeDbSetNamesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private PluralizeDbSetNamesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.PluralizeDbSetNames domain property value handler.
			/// </summary>
			public static readonly PluralizeDbSetNamesPropertyHandler Instance = new PluralizeDbSetNamesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.PluralizeDbSetNames domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PluralizeDbSetNamesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pluralizeDbSetNamesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pluralizeDbSetNamesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PluralizeTableNames domain property code
		
		/// <summary>
		/// PluralizeTableNames domain property Id.
		/// </summary>
		public static readonly global::System.Guid PluralizeTableNamesDomainPropertyId = new global::System.Guid(0xf068a70d, 0xfa8f, 0x4a1c, 0x82, 0x17, 0xc8, 0x9d, 0x58, 0x32, 0xbb, 0x84);
		
		/// <summary>
		/// Storage for PluralizeTableNames
		/// </summary>
		private global::System.Boolean pluralizeTableNamesPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of PluralizeTableNames domain property.
		/// If true, table names will default to the plural value of the class name. If
		/// false, they'll be the same as the class name
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PluralizeTableNames.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PluralizeTableNames.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/PluralizeTableNames.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("f068a70d-fa8f-4a1c-8217-c89d5832bb84")]
		public global::System.Boolean PluralizeTableNames
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return pluralizeTableNamesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PluralizeTableNamesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.PluralizeTableNames domain property.
		/// </summary>
		internal sealed partial class PluralizeTableNamesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private PluralizeTableNamesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.PluralizeTableNames domain property value handler.
			/// </summary>
			public static readonly PluralizeTableNamesPropertyHandler Instance = new PluralizeTableNamesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.PluralizeTableNames domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PluralizeTableNamesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.pluralizeTableNamesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.pluralizeTableNamesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShadowKeyNamePattern domain property code
		
		/// <summary>
		/// ShadowKeyNamePattern domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShadowKeyNamePatternDomainPropertyId = new global::System.Guid(0xfd958c03, 0x206e, 0x4d4c, 0x8e, 0x69, 0x6b, 0x30, 0x00, 0x10, 0xe6, 0x65);
		
		/// <summary>
		/// Storage for ShadowKeyNamePattern
		/// </summary>
		private ShadowKeyPattern shadowKeyNamePatternPropertyStorage = ShadowKeyPattern.TableColumn;
		
		/// <summary>
		/// Gets or sets the value of ShadowKeyNamePattern domain property.
		/// The pattern to use for generating shadow foreign key property names
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShadowKeyNamePattern.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShadowKeyNamePattern.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShadowKeyNamePattern.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ShadowKeyPattern.TableColumn)]
		[DslModeling::DomainObjectId("fd958c03-206e-4d4c-8e69-6b300010e665")]
		public ShadowKeyPattern ShadowKeyNamePattern
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return shadowKeyNamePatternPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShadowKeyNamePatternPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ShadowKeyNamePattern domain property.
		/// </summary>
		internal sealed partial class ShadowKeyNamePatternPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, ShadowKeyPattern>
		{
			private ShadowKeyNamePatternPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ShadowKeyNamePattern domain property value handler.
			/// </summary>
			public static readonly ShadowKeyNamePatternPropertyHandler Instance = new ShadowKeyNamePatternPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ShadowKeyNamePattern domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShadowKeyNamePatternDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ShadowKeyPattern GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.shadowKeyNamePatternPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, ShadowKeyPattern newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ShadowKeyPattern oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.shadowKeyNamePatternPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AutoPropertyDefault domain property code
		
		/// <summary>
		/// AutoPropertyDefault domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutoPropertyDefaultDomainPropertyId = new global::System.Guid(0xcfe875fc, 0x11d2, 0x4c6a, 0xa6, 0xc3, 0x6e, 0x86, 0x36, 0x54, 0xcd, 0x6d);
		
		/// <summary>
		/// Storage for AutoPropertyDefault
		/// </summary>
		private global::System.Boolean autoPropertyDefaultPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AutoPropertyDefault domain property.
		/// Default value for attribute AutoProperty setting
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/AutoPropertyDefault.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/AutoPropertyDefault.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/AutoPropertyDefault.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("cfe875fc-11d2-4c6a-a6c3-6e863654cd6d")]
		public global::System.Boolean AutoPropertyDefault
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return autoPropertyDefaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutoPropertyDefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.AutoPropertyDefault domain property.
		/// </summary>
		internal sealed partial class AutoPropertyDefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private AutoPropertyDefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.AutoPropertyDefault domain property value handler.
			/// </summary>
			public static readonly AutoPropertyDefaultPropertyHandler Instance = new AutoPropertyDefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.AutoPropertyDefault domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutoPropertyDefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.autoPropertyDefaultPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.autoPropertyDefaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShowInterfaceIndicators domain property code
		
		/// <summary>
		/// ShowInterfaceIndicators domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShowInterfaceIndicatorsDomainPropertyId = new global::System.Guid(0x7cd4b0cd, 0x84e3, 0x4363, 0xa7, 0x1d, 0xba, 0xc6, 0xfa, 0xe5, 0xb3, 0x9f);
		
		/// <summary>
		/// Storage for ShowInterfaceIndicators
		/// </summary>
		private global::System.Boolean showInterfaceIndicatorsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ShowInterfaceIndicators domain property.
		/// If true, will display a UML interface glyph on classes that have custom
		/// interfaces defined
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowInterfaceIndicators.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowInterfaceIndicators.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/ShowInterfaceIndicators.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7cd4b0cd-84e3-4363-a71d-bac6fae5b39f")]
		public global::System.Boolean ShowInterfaceIndicators
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return showInterfaceIndicatorsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ShowInterfaceIndicatorsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.ShowInterfaceIndicators domain property.
		/// </summary>
		internal sealed partial class ShowInterfaceIndicatorsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private ShowInterfaceIndicatorsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.ShowInterfaceIndicators domain property value handler.
			/// </summary>
			public static readonly ShowInterfaceIndicatorsPropertyHandler Instance = new ShowInterfaceIndicatorsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.ShowInterfaceIndicators domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShowInterfaceIndicatorsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.showInterfaceIndicatorsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.showInterfaceIndicatorsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GenerateTableComments domain property code
		
		/// <summary>
		/// GenerateTableComments domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenerateTableCommentsDomainPropertyId = new global::System.Guid(0x65d03977, 0x253f, 0x4e9c, 0xa9, 0x46, 0x14, 0xd0, 0xe4, 0x16, 0x44, 0x6d);
		
		/// <summary>
		/// Storage for GenerateTableComments
		/// </summary>
		private global::System.Boolean generateTableCommentsPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of GenerateTableComments domain property.
		/// If true, will allow generating [Comment] attributes on C# class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GenerateTableComments.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GenerateTableComments.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelRoot/GenerateTableComments.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("65d03977-253f-4e9c-a946-14d0e416446d")]
		public global::System.Boolean GenerateTableComments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generateTableCommentsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenerateTableCommentsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelRoot.GenerateTableComments domain property.
		/// </summary>
		internal sealed partial class GenerateTableCommentsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelRoot, global::System.Boolean>
		{
			private GenerateTableCommentsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelRoot.GenerateTableComments domain property value handler.
			/// </summary>
			public static readonly GenerateTableCommentsPropertyHandler Instance = new GenerateTableCommentsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelRoot.GenerateTableComments domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenerateTableCommentsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelRoot element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.generateTableCommentsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelRoot element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generateTableCommentsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Comment>, Comment>(global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Enums opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Enums.
		/// No description available
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelEnum> Enums
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelEnum>, ModelEnum>(global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Classes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Classes.
		/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelRoot
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Classes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Diagrams opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Diagrams.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelDiagramData> Diagrams
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelDiagramData>, ModelDiagramData>(global::Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.ModelEnum.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.ModelClass.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.Comment.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.ModelDiagramData.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Sawczyn.EFDesigner.EFModel.ModelEnum sourceModelEnum1 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelEnum;
			if (sourceModelEnum1 != null)
			{
				// Create link for path ModelRootHasEnums.Enums
				this.Enums.Add(sourceModelEnum1);

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.ModelClass sourceModelClass2 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelClass;
			if (sourceModelClass2 != null)
			{
				// Create link for path ModelRootHasClasses.Classes
				this.Classes.Add(sourceModelClass2);

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.Comment sourceComment3 = sourceElement as global::Sawczyn.EFDesigner.EFModel.Comment;
			if (sourceComment3 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment3);

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.ModelDiagramData sourceModelDiagramData4 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelDiagramData;
			if (sourceModelDiagramData4 != null)
			{
				// Create link for path ModelRootHasModelDiagrams.Diagrams
				this.Diagrams.Add(sourceModelDiagramData4);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Sawczyn.EFDesigner.EFModel.ModelEnum sourceModelEnum1 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelEnum;
			if (sourceModelEnum1 != null)
			{
				// Delete link for path ModelRootHasEnums.Enums
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelRoot)this, sourceModelEnum1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelRootDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelEnumDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.ModelClass sourceModelClass2 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelClass;
			if (sourceModelClass2 != null)
			{
				// Delete link for path ModelRootHasClasses.Classes
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelRoot)this, sourceModelClass2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelRootDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelClassDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.Comment sourceComment3 = sourceElement as global::Sawczyn.EFDesigner.EFModel.Comment;
			if (sourceComment3 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelRoot)this, sourceComment3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.ModelRootDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.ModelDiagramData sourceModelDiagramData4 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelDiagramData;
			if (sourceModelDiagramData4 != null)
			{
				// Delete link for path ModelRootHasModelDiagrams.Diagrams
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelRoot)this, sourceModelDiagramData4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.ModelRootDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.ModelDiagramDataDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(ModelClassTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("237aa10f-ae74-41be-bdcf-56d97de6e4c8")]
	public partial class ModelClass : DesignElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x237aa10f, 0xae74, 0x41be, 0xbd, 0xcf, 0x56, 0xd9, 0x7d, 0xe6, 0xe4, 0xc8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0x40e0f86d, 0xe0a7, 0x4e3b, 0x8f, 0x83, 0x81, 0x7f, 0xcd, 0xfc, 0x3a, 0xd5);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private global::System.Boolean isAbstractPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// If true, this will be generated as an abstract class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAbstract.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAbstract.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAbstract.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("40e0f86d-e0a7-4e3b-8f83-817fcdfc3ad5")]
		public global::System.Boolean IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TableName domain property code
		
		/// <summary>
		/// TableName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableNameDomainPropertyId = new global::System.Guid(0xa674bf44, 0x2df3, 0x44dc, 0xa9, 0x54, 0x51, 0x22, 0x55, 0x6c, 0xe4, 0xac);
		
		/// <summary>
		/// Storage for TableName
		/// </summary>
		private global::System.String tableNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TableName domain property.
		/// Name of the database table storing data for this class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/TableName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/TableName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/TableName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("a674bf44-2df3-44dc-a954-5122556ce4ac")]
		public global::System.String TableName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tableNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TableNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.TableName domain property.
		/// </summary>
		internal sealed partial class TableNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private TableNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.TableName domain property value handler.
			/// </summary>
			public static readonly TableNamePropertyHandler Instance = new TableNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.TableName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tableNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tableNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DatabaseSchema domain property code
		
		/// <summary>
		/// DatabaseSchema domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseSchemaDomainPropertyId = new global::System.Guid(0x03075c04, 0x06b6, 0x4b97, 0xa7, 0x8a, 0xb3, 0xbe, 0x2c, 0x95, 0x26, 0xd7);
		
		/// <summary>
		/// Gets or sets the value of DatabaseSchema domain property.
		/// The schema to use for table creation. Overrides default schema for model if
		/// present.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/DatabaseSchema.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/DatabaseSchema.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/DatabaseSchema.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("03075c04-06b6-4b97-a78a-b3be2c9526d7")]
		public global::System.String DatabaseSchema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DatabaseSchemaPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseSchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.DatabaseSchema domain property.
		/// </summary>
		internal sealed partial class DatabaseSchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private DatabaseSchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.DatabaseSchema domain property value handler.
			/// </summary>
			public static readonly DatabaseSchemaPropertyHandler Instance = new DatabaseSchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.DatabaseSchema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseSchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DatabaseSchema because its Kind is
				// set to CustomStorage. Please provide the GetDatabaseSchemaValue()
				// method on the domain class.
				return element.GetDatabaseSchemaValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DatabaseSchema because its Kind is
					// set to CustomStorage. Please provide the SetDatabaseSchemaValue()
					// method on the domain class.
					element.SetDatabaseSchemaValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region Concurrency domain property code
		
		/// <summary>
		/// Concurrency domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConcurrencyDomainPropertyId = new global::System.Guid(0x156da044, 0x640c, 0x466a, 0x89, 0x8d, 0x73, 0x11, 0x4c, 0x0f, 0x54, 0xe8);
		
		/// <summary>
		/// Storage for Concurrency
		/// </summary>
		private ConcurrencyOverride concurrencyPropertyStorage = ConcurrencyOverride.Default;
		
		/// <summary>
		/// Gets or sets the value of Concurrency domain property.
		/// Overridden concurrency handling strategy.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/Concurrency.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/Concurrency.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/Concurrency.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(ConcurrencyOverride.Default)]
		[DslModeling::DomainObjectId("156da044-640c-466a-898d-73114c0f54e8")]
		public ConcurrencyOverride Concurrency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return concurrencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConcurrencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Concurrency domain property.
		/// </summary>
		internal sealed partial class ConcurrencyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, ConcurrencyOverride>
		{
			private ConcurrencyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Concurrency domain property value handler.
			/// </summary>
			public static readonly ConcurrencyPropertyHandler Instance = new ConcurrencyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Concurrency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConcurrencyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ConcurrencyOverride GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.concurrencyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, ConcurrencyOverride newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ConcurrencyOverride oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.concurrencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDatabaseSchemaTracking domain property code
		
		/// <summary>
		/// IsDatabaseSchemaTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDatabaseSchemaTrackingDomainPropertyId = new global::System.Guid(0xd1bf6501, 0xcc7e, 0x4994, 0x84, 0x8f, 0x6d, 0xbd, 0xcb, 0xf2, 0x19, 0x00);
		
		/// <summary>
		/// Storage for IsDatabaseSchemaTracking
		/// </summary>
		private global::System.Boolean isDatabaseSchemaTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDatabaseSchemaTracking domain property.
		/// If true, ModelClass.DatabaseSchema tracks ModelRoot.DatabaseSchema
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDatabaseSchemaTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDatabaseSchemaTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("d1bf6501-cc7e-4994-848f-6dbdcbf21900")]
		public global::System.Boolean IsDatabaseSchemaTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDatabaseSchemaTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDatabaseSchemaTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsDatabaseSchemaTracking domain property.
		/// </summary>
		internal sealed partial class IsDatabaseSchemaTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsDatabaseSchemaTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsDatabaseSchemaTracking domain property value handler.
			/// </summary>
			public static readonly IsDatabaseSchemaTrackingPropertyHandler Instance = new IsDatabaseSchemaTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsDatabaseSchemaTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDatabaseSchemaTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDatabaseSchemaTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDatabaseSchemaTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x60009c33, 0x0083, 0x41d8, 0xbd, 0x9a, 0x15, 0x9d, 0x9d, 0x9c, 0x5b, 0x5c);
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Overrides default namespace
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/Namespace.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/Namespace.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/Namespace.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("60009c33-0083-41d8-bd9a-159d9d9c5b5c")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamespacePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Namespace because its Kind is
				// set to CustomStorage. Please provide the GetNamespaceValue()
				// method on the domain class.
				return element.GetNamespaceValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Namespace because its Kind is
					// set to CustomStorage. Please provide the SetNamespaceValue()
					// method on the domain class.
					element.SetNamespaceValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsNamespaceTracking domain property code
		
		/// <summary>
		/// IsNamespaceTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsNamespaceTrackingDomainPropertyId = new global::System.Guid(0xa65b337d, 0xe60f, 0x427e, 0x9c, 0x30, 0xbd, 0x39, 0xe9, 0x5b, 0x8d, 0x72);
		
		/// <summary>
		/// Storage for IsNamespaceTracking
		/// </summary>
		private global::System.Boolean isNamespaceTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsNamespaceTracking domain property.
		/// If true, ModelClass.Namespace tracks ModelRoot.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsNamespaceTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsNamespaceTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("a65b337d-e60f-427e-9c30-bd39e95b8d72")]
		public global::System.Boolean IsNamespaceTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isNamespaceTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsNamespaceTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsNamespaceTracking domain property.
		/// </summary>
		internal sealed partial class IsNamespaceTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsNamespaceTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsNamespaceTracking domain property value handler.
			/// </summary>
			public static readonly IsNamespaceTrackingPropertyHandler Instance = new IsNamespaceTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsNamespaceTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsNamespaceTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isNamespaceTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isNamespaceTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DbSetName domain property code
		
		/// <summary>
		/// DbSetName domain property Id.
		/// </summary>
		public static readonly global::System.Guid DbSetNameDomainPropertyId = new global::System.Guid(0xbbdbf0f5, 0x65fa, 0x405f, 0xbc, 0x5b, 0x36, 0xfe, 0x3b, 0x43, 0xc6, 0xe4);
		
		/// <summary>
		/// Storage for DbSetName
		/// </summary>
		private global::System.String dbSetNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DbSetName domain property.
		/// Name of this class's container variable in the generated context
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/DbSetName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/DbSetName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/DbSetName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bbdbf0f5-65fa-405f-bc5b-36fe3b43c6e4")]
		public global::System.String DbSetName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dbSetNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DbSetNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.DbSetName domain property.
		/// </summary>
		internal sealed partial class DbSetNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private DbSetNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.DbSetName domain property value handler.
			/// </summary>
			public static readonly DbSetNamePropertyHandler Instance = new DbSetNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.DbSetName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DbSetNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dbSetNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dbSetNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1f3ff088, 0xf688, 0x4573, 0xb2, 0xc5, 0xa8, 0xb2, 0xb6, 0x4e, 0xc1, 0x0c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/Name.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/Name.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/Name.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName(typeof(ModelClassNameProvider))]
		[DslModeling::DomainObjectId("1f3ff088-f688-4573-b2c5-a8b2b64ec10c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImplementNotify domain property code
		
		/// <summary>
		/// ImplementNotify domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImplementNotifyDomainPropertyId = new global::System.Guid(0x268b5655, 0x43ae, 0x4871, 0xb7, 0xe7, 0x2e, 0xa7, 0xe0, 0x03, 0xd4, 0x85);
		
		/// <summary>
		/// Storage for ImplementNotify
		/// </summary>
		private global::System.Boolean implementNotifyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ImplementNotify domain property.
		/// Should this class's properties implement INotifyPropertyChanged by default?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/ImplementNotify.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/ImplementNotify.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/ImplementNotify.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("268b5655-43ae-4871-b7e7-2ea7e003d485")]
		public global::System.Boolean ImplementNotify
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return implementNotifyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImplementNotifyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.ImplementNotify domain property.
		/// </summary>
		internal sealed partial class ImplementNotifyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private ImplementNotifyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.ImplementNotify domain property value handler.
			/// </summary>
			public static readonly ImplementNotifyPropertyHandler Instance = new ImplementNotifyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.ImplementNotify domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImplementNotifyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.implementNotifyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.implementNotifyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomInterfaces domain property code
		
		/// <summary>
		/// CustomInterfaces domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomInterfacesDomainPropertyId = new global::System.Guid(0x55789969, 0x4fcd, 0x4e41, 0xbf, 0x8a, 0x69, 0xcf, 0x0d, 0xd7, 0x02, 0x65);
		
		/// <summary>
		/// Storage for CustomInterfaces
		/// </summary>
		private global::System.String customInterfacesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomInterfaces domain property.
		/// Optional comma-separated list of interfaces that will be added to the class
		/// definition
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/CustomInterfaces.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/CustomInterfaces.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/CustomInterfaces.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("55789969-4fcd-4e41-bf8a-69cf0dd70265")]
		public global::System.String CustomInterfaces
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customInterfacesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomInterfacesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.CustomInterfaces domain property.
		/// </summary>
		internal sealed partial class CustomInterfacesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private CustomInterfacesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.CustomInterfaces domain property value handler.
			/// </summary>
			public static readonly CustomInterfacesPropertyHandler Instance = new CustomInterfacesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.CustomInterfaces domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomInterfacesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customInterfacesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customInterfacesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDependentType domain property code
		
		/// <summary>
		/// IsDependentType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDependentTypeDomainPropertyId = new global::System.Guid(0x21a0cf45, 0x971e, 0x40dd, 0x89, 0x40, 0xaf, 0xaf, 0xa5, 0x98, 0x5d, 0x7f);
		
		/// <summary>
		/// Storage for IsDependentType
		/// </summary>
		private global::System.Boolean isDependentTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsDependentType domain property.
		/// Is this a completely dependent type that will only exist associated to another
		/// object?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDependentType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDependentType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDependentType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("21a0cf45-971e-40dd-8940-afafa5985d7f")]
		public global::System.Boolean IsDependentType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDependentTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDependentTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsDependentType domain property.
		/// </summary>
		internal sealed partial class IsDependentTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsDependentTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsDependentType domain property value handler.
			/// </summary>
			public static readonly IsDependentTypePropertyHandler Instance = new IsDependentTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsDependentType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDependentTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDependentTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDependentTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OutputDirectory domain property code
		
		/// <summary>
		/// OutputDirectory domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutputDirectoryDomainPropertyId = new global::System.Guid(0x7b385981, 0x572c, 0x4f6f, 0x81, 0xaa, 0x5d, 0xe8, 0x60, 0x8c, 0x39, 0x14);
		
		/// <summary>
		/// Gets or sets the value of OutputDirectory domain property.
		/// Overrides default output directory
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/OutputDirectory.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/OutputDirectory.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/OutputDirectory.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("7b385981-572c-4f6f-81aa-5de8608c3914")]
		public global::System.String OutputDirectory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutputDirectoryPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutputDirectoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.OutputDirectory domain property.
		/// </summary>
		internal sealed partial class OutputDirectoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private OutputDirectoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.OutputDirectory domain property value handler.
			/// </summary>
			public static readonly OutputDirectoryPropertyHandler Instance = new OutputDirectoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.OutputDirectory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutputDirectoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutputDirectory because its Kind is
				// set to CustomStorage. Please provide the GetOutputDirectoryValue()
				// method on the domain class.
				return element.GetOutputDirectoryValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutputDirectory because its Kind is
					// set to CustomStorage. Please provide the SetOutputDirectoryValue()
					// method on the domain class.
					element.SetOutputDirectoryValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsOutputDirectoryTracking domain property code
		
		/// <summary>
		/// IsOutputDirectoryTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsOutputDirectoryTrackingDomainPropertyId = new global::System.Guid(0x8045d89c, 0x6c9a, 0x4775, 0x92, 0xbc, 0x84, 0x1a, 0x7f, 0x6f, 0xe7, 0xd3);
		
		/// <summary>
		/// Storage for IsOutputDirectoryTracking
		/// </summary>
		private global::System.Boolean isOutputDirectoryTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsOutputDirectoryTracking domain property.
		/// If true, ModelClass.OutputDirectory tracks ModelRoot.EntityOutputDirectory
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsOutputDirectoryTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsOutputDirectoryTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("8045d89c-6c9a-4775-92bc-841a7f6fe7d3")]
		public global::System.Boolean IsOutputDirectoryTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isOutputDirectoryTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsOutputDirectoryTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsOutputDirectoryTracking domain property.
		/// </summary>
		internal sealed partial class IsOutputDirectoryTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsOutputDirectoryTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsOutputDirectoryTracking domain property value handler.
			/// </summary>
			public static readonly IsOutputDirectoryTrackingPropertyHandler Instance = new IsOutputDirectoryTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsOutputDirectoryTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsOutputDirectoryTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isOutputDirectoryTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isOutputDirectoryTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GlyphType domain property code
		
		/// <summary>
		/// GlyphType domain property Id.
		/// </summary>
		public static readonly global::System.Guid GlyphTypeDomainPropertyId = new global::System.Guid(0x90778922, 0x6b74, 0x40a8, 0xa9, 0xef, 0x14, 0x87, 0x1a, 0x78, 0x8d, 0x5e);
		
		/// <summary>
		/// Gets or sets the value of GlyphType domain property.
		/// Type of glyph to show on the design surface
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/GlyphType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/GlyphType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("90778922-6b74-40a8-a9ef-14871a788d5e")]
		internal global::System.String GlyphType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GlyphTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.GlyphType domain property.
		/// </summary>
		internal sealed partial class GlyphTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<ModelClass, global::System.String>
		{
			private GlyphTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.GlyphType domain property value handler.
			/// </summary>
			public static readonly GlyphTypePropertyHandler Instance = new GlyphTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.GlyphType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GlyphTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for GlyphType because its Kind is
				// set to Calculated. Please provide the GetGlyphTypeValue()
				// method on the domain class.
				return element.GetGlyphTypeValue();
			}
		
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x4b0b6237, 0x2bfc, 0x4be6, 0xa0, 0x88, 0x27, 0x1f, 0xe3, 0x4b, 0x89, 0xec);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Detailed code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/Description.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/Description.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/Description.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("4b0b6237-2bfc-4be6-a088-271fe34b89ec")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x5ff45bb4, 0x658f, 0x412e, 0x8c, 0xdc, 0x25, 0x93, 0xd9, 0xea, 0x3d, 0x37);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Brief code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/Summary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/Summary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/Summary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5ff45bb4-658f-412e-8cdc-2593d9ea3d37")]
		public global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.summaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BaseClass domain property code
		
		/// <summary>
		/// BaseClass domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseClassDomainPropertyId = new global::System.Guid(0xed7ce317, 0x4ceb, 0x479e, 0x98, 0xd0, 0xd7, 0xfd, 0x9e, 0xb8, 0x58, 0xf0);
		
		/// <summary>
		/// Gets or sets the value of BaseClass domain property.
		/// Exposes Superclass property in property editor
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(BaseClassTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/BaseClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/BaseClass.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/BaseClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ed7ce317-4ceb-479e-98d0-d7fd9eb858f0")]
		public global::System.String BaseClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return BaseClassPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BaseClassPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.BaseClass domain property.
		/// </summary>
		internal sealed partial class BaseClassPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private BaseClassPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.BaseClass domain property value handler.
			/// </summary>
			public static readonly BaseClassPropertyHandler Instance = new BaseClassPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.BaseClass domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseClassDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for BaseClass because its Kind is
				// set to CustomStorage. Please provide the GetBaseClassValue()
				// method on the domain class.
				return element.GetBaseClassValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for BaseClass because its Kind is
					// set to CustomStorage. Please provide the SetBaseClassValue()
					// method on the domain class.
					element.SetBaseClassValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0xcae77164, 0x7b85, 0x4c67, 0x8f, 0xa4, 0x88, 0xf9, 0x45, 0x35, 0x3e, 0x92);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Any custom attributes to be generated for this element.  Will be passed through
		/// as entered.
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/CustomAttributes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/CustomAttributes.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/CustomAttributes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("cae77164-7b85-4c67-8fa4-88f945353e92")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AutoPropertyDefault domain property code
		
		/// <summary>
		/// AutoPropertyDefault domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutoPropertyDefaultDomainPropertyId = new global::System.Guid(0xaae9a58c, 0xdf8c, 0x4557, 0x82, 0x6a, 0xf0, 0xa6, 0x6b, 0xb7, 0x5d, 0x66);
		
		/// <summary>
		/// Gets or sets the value of AutoPropertyDefault domain property.
		/// Default value for this class's attribute AutoProperty setting
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/AutoPropertyDefault.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/AutoPropertyDefault.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/AutoPropertyDefault.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("aae9a58c-df8c-4557-826a-f0a66bb75d66")]
		public global::System.Boolean AutoPropertyDefault
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return AutoPropertyDefaultPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutoPropertyDefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.AutoPropertyDefault domain property.
		/// </summary>
		internal sealed partial class AutoPropertyDefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private AutoPropertyDefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.AutoPropertyDefault domain property value handler.
			/// </summary>
			public static readonly AutoPropertyDefaultPropertyHandler Instance = new AutoPropertyDefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.AutoPropertyDefault domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutoPropertyDefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for AutoPropertyDefault because its Kind is
				// set to CustomStorage. Please provide the GetAutoPropertyDefaultValue()
				// method on the domain class.
				return element.GetAutoPropertyDefaultValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for AutoPropertyDefault because its Kind is
					// set to CustomStorage. Please provide the SetAutoPropertyDefaultValue()
					// method on the domain class.
					element.SetAutoPropertyDefaultValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region GenerateCode domain property code
		
		/// <summary>
		/// GenerateCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenerateCodeDomainPropertyId = new global::System.Guid(0x84329360, 0x6f27, 0x42ec, 0x99, 0xfe, 0x3b, 0x5b, 0xff, 0x1d, 0xc5, 0x4c);
		
		/// <summary>
		/// Storage for GenerateCode
		/// </summary>
		private global::System.Boolean generateCodePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of GenerateCode domain property.
		/// If true (the default), code will be generated for this class. If false, it is
		/// assumed to be referenced from another assembly.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/GenerateCode.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/GenerateCode.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/GenerateCode.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("84329360-6f27-42ec-99fe-3b5bff1dc54c")]
		public global::System.Boolean GenerateCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generateCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenerateCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.GenerateCode domain property.
		/// </summary>
		internal sealed partial class GenerateCodePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private GenerateCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.GenerateCode domain property value handler.
			/// </summary>
			public static readonly GenerateCodePropertyHandler Instance = new GenerateCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.GenerateCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenerateCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.generateCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generateCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPropertyBag domain property code
		
		/// <summary>
		/// IsPropertyBag domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPropertyBagDomainPropertyId = new global::System.Guid(0x6d12879a, 0x6e9d, 0x4a6f, 0x9e, 0x4b, 0x5c, 0xf2, 0x84, 0x7a, 0x74, 0xf3);
		
		/// <summary>
		/// Storage for IsPropertyBag
		/// </summary>
		private global::System.Boolean isPropertyBagPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPropertyBag domain property.
		/// If true, this class will be implemented as Dictionary<string, object>
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsPropertyBag.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsPropertyBag.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsPropertyBag.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("6d12879a-6e9d-4a6f-9e4b-5cf2847a74f3")]
		public global::System.Boolean IsPropertyBag
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPropertyBagPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPropertyBagPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsPropertyBag domain property.
		/// </summary>
		internal sealed partial class IsPropertyBagPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsPropertyBagPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsPropertyBag domain property value handler.
			/// </summary>
			public static readonly IsPropertyBagPropertyHandler Instance = new IsPropertyBagPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsPropertyBag domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPropertyBagDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPropertyBagPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPropertyBagPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsQueryType domain property code
		
		/// <summary>
		/// IsQueryType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsQueryTypeDomainPropertyId = new global::System.Guid(0x9b6ae5c9, 0xfe3f, 0x4b3c, 0x9a, 0x76, 0x29, 0x1d, 0x58, 0xfd, 0xe1, 0xeb);
		
		/// <summary>
		/// Storage for IsQueryType
		/// </summary>
		private global::System.Boolean isQueryTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsQueryType domain property.
		/// If true, this class is defined by a SQL query that must be implemented in a
		/// partial method. See comments in generated code for more information.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsQueryType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsQueryType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsQueryType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9b6ae5c9-fe3f-4b3c-9a76-291d58fde1eb")]
		public global::System.Boolean IsQueryType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isQueryTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsQueryTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsQueryType domain property.
		/// </summary>
		internal sealed partial class IsQueryTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsQueryTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsQueryType domain property value handler.
			/// </summary>
			public static readonly IsQueryTypePropertyHandler Instance = new IsQueryTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsQueryType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsQueryTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isQueryTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isQueryTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExcludeFromMigrations domain property code
		
		/// <summary>
		/// ExcludeFromMigrations domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExcludeFromMigrationsDomainPropertyId = new global::System.Guid(0x37b0398e, 0xcaf1, 0x45d7, 0xac, 0xf4, 0x8a, 0x44, 0xdd, 0xcb, 0x85, 0x43);
		
		/// <summary>
		/// Storage for ExcludeFromMigrations
		/// </summary>
		private global::System.Boolean excludeFromMigrationsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExcludeFromMigrations domain property.
		/// If true, this class won't be involved in database migrations
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/ExcludeFromMigrations.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/ExcludeFromMigrations.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/ExcludeFromMigrations.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("37b0398e-caf1-45d7-acf4-8a44ddcb8543")]
		public global::System.Boolean ExcludeFromMigrations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return excludeFromMigrationsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExcludeFromMigrationsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.ExcludeFromMigrations domain property.
		/// </summary>
		internal sealed partial class ExcludeFromMigrationsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private ExcludeFromMigrationsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.ExcludeFromMigrations domain property value handler.
			/// </summary>
			public static readonly ExcludeFromMigrationsPropertyHandler Instance = new ExcludeFromMigrationsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.ExcludeFromMigrations domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExcludeFromMigrationsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.excludeFromMigrationsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.excludeFromMigrationsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsDatabaseView domain property code
		
		/// <summary>
		/// IsDatabaseView domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDatabaseViewDomainPropertyId = new global::System.Guid(0x2d01c28f, 0x20f9, 0x4e44, 0xaa, 0xf6, 0x27, 0xb5, 0xd1, 0x54, 0x1b, 0x5f);
		
		/// <summary>
		/// Storage for IsDatabaseView
		/// </summary>
		private global::System.Boolean isDatabaseViewPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsDatabaseView domain property.
		/// If true, this class is persisted in a view in the database
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDatabaseView.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDatabaseView.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDatabaseView.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2d01c28f-20f9-4e44-aaf6-27b5d1541b5f")]
		public global::System.Boolean IsDatabaseView
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDatabaseViewPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDatabaseViewPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsDatabaseView domain property.
		/// </summary>
		internal sealed partial class IsDatabaseViewPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsDatabaseViewPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsDatabaseView domain property value handler.
			/// </summary>
			public static readonly IsDatabaseViewPropertyHandler Instance = new IsDatabaseViewPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsDatabaseView domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDatabaseViewDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDatabaseViewPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDatabaseViewPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ViewName domain property code
		
		/// <summary>
		/// ViewName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ViewNameDomainPropertyId = new global::System.Guid(0x0b8d7bf1, 0x3927, 0x40e6, 0xb0, 0xaa, 0x81, 0xa8, 0xb7, 0xdd, 0xda, 0xcb);
		
		/// <summary>
		/// Storage for ViewName
		/// </summary>
		private global::System.String viewNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ViewName domain property.
		/// The name of the database view persisting this class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/ViewName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/ViewName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/ViewName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0b8d7bf1-3927-40e6-b0aa-81a8b7dddacb")]
		public global::System.String ViewName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return viewNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ViewNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.ViewName domain property.
		/// </summary>
		internal sealed partial class ViewNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private ViewNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.ViewName domain property value handler.
			/// </summary>
			public static readonly ViewNamePropertyHandler Instance = new ViewNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.ViewName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ViewNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.viewNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.viewNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultConstructorVisibility domain property code
		
		/// <summary>
		/// DefaultConstructorVisibility domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultConstructorVisibilityDomainPropertyId = new global::System.Guid(0xde993ce1, 0x3cb4, 0x4108, 0xa4, 0xa4, 0xcd, 0xb9, 0x1b, 0x16, 0x50, 0xea);
		
		/// <summary>
		/// Gets or sets the value of DefaultConstructorVisibility domain property.
		/// By default, default (empty) constructors generate as public unless there are
		/// required properties or associations in the entity, then they generate as
		/// protected.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/DefaultConstructorVisibility.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/DefaultConstructorVisibility.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/DefaultConstructorVisibility.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TypeAccessModifierExt.Default)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("de993ce1-3cb4-4108-a4a4-cdb91b1650ea")]
		public TypeAccessModifierExt DefaultConstructorVisibility
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DefaultConstructorVisibilityPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultConstructorVisibilityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.DefaultConstructorVisibility domain property.
		/// </summary>
		internal sealed partial class DefaultConstructorVisibilityPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, TypeAccessModifierExt>
		{
			private DefaultConstructorVisibilityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.DefaultConstructorVisibility domain property value handler.
			/// </summary>
			public static readonly DefaultConstructorVisibilityPropertyHandler Instance = new DefaultConstructorVisibilityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.DefaultConstructorVisibility domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultConstructorVisibilityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypeAccessModifierExt GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DefaultConstructorVisibility because its Kind is
				// set to CustomStorage. Please provide the GetDefaultConstructorVisibilityValue()
				// method on the domain class.
				return element.GetDefaultConstructorVisibilityValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, TypeAccessModifierExt newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypeAccessModifierExt oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DefaultConstructorVisibility because its Kind is
					// set to CustomStorage. Please provide the SetDefaultConstructorVisibilityValue()
					// method on the domain class.
					element.SetDefaultConstructorVisibilityValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsDefaultConstructorVisibilityTracking domain property code
		
		/// <summary>
		/// IsDefaultConstructorVisibilityTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDefaultConstructorVisibilityTrackingDomainPropertyId = new global::System.Guid(0x52231828, 0xeb28, 0x4dc3, 0xa6, 0x71, 0x7a, 0x6b, 0x26, 0x98, 0xa2, 0xb2);
		
		/// <summary>
		/// Storage for IsDefaultConstructorVisibilityTracking
		/// </summary>
		private global::System.Boolean isDefaultConstructorVisibilityTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDefaultConstructorVisibilityTracking domain property.
		/// If true, Model.DefaultConstructorVisibility tracks
		/// ModelRoot.EntityDefaultConstructorVisibilityDefault
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDefaultConstructorVisibilityTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsDefaultConstructorVisibilityTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("52231828-eb28-4dc3-a671-7a6b2698a2b2")]
		public global::System.Boolean IsDefaultConstructorVisibilityTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDefaultConstructorVisibilityTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDefaultConstructorVisibilityTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsDefaultConstructorVisibilityTracking domain property.
		/// </summary>
		internal sealed partial class IsDefaultConstructorVisibilityTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsDefaultConstructorVisibilityTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsDefaultConstructorVisibilityTracking domain property value handler.
			/// </summary>
			public static readonly IsDefaultConstructorVisibilityTrackingPropertyHandler Instance = new IsDefaultConstructorVisibilityTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsDefaultConstructorVisibilityTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDefaultConstructorVisibilityTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDefaultConstructorVisibilityTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDefaultConstructorVisibilityTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAutoPropertyDefaultTracking domain property code
		
		/// <summary>
		/// IsAutoPropertyDefaultTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAutoPropertyDefaultTrackingDomainPropertyId = new global::System.Guid(0x711f369a, 0x38d3, 0x4e2e, 0x81, 0x2d, 0x96, 0x54, 0xef, 0x72, 0xc1, 0xd6);
		
		/// <summary>
		/// Storage for IsAutoPropertyDefaultTracking
		/// </summary>
		private global::System.Boolean isAutoPropertyDefaultTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsAutoPropertyDefaultTracking domain property.
		/// If true, ModelClass.AutoPropertyDefault tracks ModelRoot.AutoPropertyDefault
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAutoPropertyDefaultTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAutoPropertyDefaultTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("711f369a-38d3-4e2e-812d-9654ef72c1d6")]
		public global::System.Boolean IsAutoPropertyDefaultTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAutoPropertyDefaultTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAutoPropertyDefaultTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsAutoPropertyDefaultTracking domain property.
		/// </summary>
		internal sealed partial class IsAutoPropertyDefaultTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsAutoPropertyDefaultTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsAutoPropertyDefaultTracking domain property value handler.
			/// </summary>
			public static readonly IsAutoPropertyDefaultTrackingPropertyHandler Instance = new IsAutoPropertyDefaultTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsAutoPropertyDefaultTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAutoPropertyDefaultTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAutoPropertyDefaultTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAutoPropertyDefaultTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShouldShowInterfaceGlyph domain property code
		
		/// <summary>
		/// ShouldShowInterfaceGlyph domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShouldShowInterfaceGlyphDomainPropertyId = new global::System.Guid(0x51846d70, 0x8b42, 0x4cef, 0x84, 0x3b, 0x57, 0xcd, 0x97, 0xaf, 0x3b, 0x91);
		
		/// <summary>
		/// Gets or sets the value of ShouldShowInterfaceGlyph domain property.
		/// Used internally to determine whether an interface glyph should be shown on the
		/// diagram for the class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/ShouldShowInterfaceGlyph.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/ShouldShowInterfaceGlyph.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("51846d70-8b42-4cef-843b-57cd97af3b91")]
		public global::System.Boolean ShouldShowInterfaceGlyph
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ShouldShowInterfaceGlyphPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.ShouldShowInterfaceGlyph domain property.
		/// </summary>
		internal sealed partial class ShouldShowInterfaceGlyphPropertyHandler : DslModeling::CalculatedPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private ShouldShowInterfaceGlyphPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.ShouldShowInterfaceGlyph domain property value handler.
			/// </summary>
			public static readonly ShouldShowInterfaceGlyphPropertyHandler Instance = new ShouldShowInterfaceGlyphPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.ShouldShowInterfaceGlyph domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShouldShowInterfaceGlyphDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ShouldShowInterfaceGlyph because its Kind is
				// set to Calculated. Please provide the GetShouldShowInterfaceGlyphValue()
				// method on the domain class.
				return element.GetShouldShowInterfaceGlyphValue();
			}
		
		}
		
		#endregion
		#region UseTemporalTables domain property code
		
		/// <summary>
		/// UseTemporalTables domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseTemporalTablesDomainPropertyId = new global::System.Guid(0xb4b06061, 0xbd7a, 0x4059, 0xac, 0x5f, 0xf2, 0x9b, 0xe6, 0x20, 0xd2, 0x3c);
		
		/// <summary>
		/// Storage for UseTemporalTables
		/// </summary>
		private global::System.Boolean useTemporalTablesPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UseTemporalTables domain property.
		/// If true, will configure the class to use temporal tables for storage. This is
		/// not supported in all database types.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/UseTemporalTables.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/UseTemporalTables.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/UseTemporalTables.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b4b06061-bd7a-4059-ac5f-f29be620d23c")]
		public global::System.Boolean UseTemporalTables
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useTemporalTablesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseTemporalTablesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.UseTemporalTables domain property.
		/// </summary>
		internal sealed partial class UseTemporalTablesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private UseTemporalTablesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.UseTemporalTables domain property value handler.
			/// </summary>
			public static readonly UseTemporalTablesPropertyHandler Instance = new UseTemporalTablesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.UseTemporalTables domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseTemporalTablesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.useTemporalTablesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useTemporalTablesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAssociationClass domain property code
		
		/// <summary>
		/// IsAssociationClass domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAssociationClassDomainPropertyId = new global::System.Guid(0xe9775a9d, 0x2c2c, 0x4206, 0x8a, 0x27, 0x5a, 0xdf, 0x99, 0xcc, 0x73, 0xdc);
		
		/// <summary>
		/// Storage for IsAssociationClass
		/// </summary>
		private global::System.Boolean isAssociationClassPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAssociationClass domain property.
		/// If true, this is an association class for a many-to-many association
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAssociationClass.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAssociationClass.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/IsAssociationClass.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e9775a9d-2c2c-4206-8a27-5adf99cc73dc")]
		public global::System.Boolean IsAssociationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAssociationClassPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAssociationClassPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsAssociationClass domain property.
		/// </summary>
		internal sealed partial class IsAssociationClassPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Boolean>
		{
			private IsAssociationClassPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsAssociationClass domain property value handler.
			/// </summary>
			public static readonly IsAssociationClassPropertyHandler Instance = new IsAssociationClassPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsAssociationClass domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAssociationClassDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAssociationClassPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAssociationClassPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DescribedAssociationElementId domain property code
		
		/// <summary>
		/// DescribedAssociationElementId domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescribedAssociationElementIdDomainPropertyId = new global::System.Guid(0x2105ff46, 0xf992, 0x4148, 0x97, 0x77, 0xfa, 0x49, 0xf0, 0x27, 0x51, 0xaa);
		
		/// <summary>
		/// Storage for DescribedAssociationElementId
		/// </summary>
		private global::System.Guid describedAssociationElementIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DescribedAssociationElementId domain property.
		/// When IsAssociationClass is true, the element id of the association this entity
		/// extends
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/DescribedAssociationElementId.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/DescribedAssociationElementId.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("2105ff46-f992-4148-9777-fa49f02751aa")]
		public global::System.Guid DescribedAssociationElementId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return describedAssociationElementIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				DescribedAssociationElementIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.DescribedAssociationElementId domain property.
		/// </summary>
		internal sealed partial class DescribedAssociationElementIdPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.Guid>
		{
			private DescribedAssociationElementIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.DescribedAssociationElementId domain property value handler.
			/// </summary>
			public static readonly DescribedAssociationElementIdPropertyHandler Instance = new DescribedAssociationElementIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.DescribedAssociationElementId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescribedAssociationElementIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.describedAssociationElementIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.describedAssociationElementIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TableComment domain property code
		
		/// <summary>
		/// TableComment domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableCommentDomainPropertyId = new global::System.Guid(0x221e8cda, 0xf6f7, 0x49e6, 0xa0, 0x3c, 0x9e, 0xe9, 0xce, 0x27, 0x55, 0xff);
		
		/// <summary>
		/// Storage for TableComment
		/// </summary>
		private global::System.String tableCommentPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TableComment domain property.
		/// Table comment that will be applied to the database, if possible
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelClass/TableComment.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelClass/TableComment.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelClass/TableComment.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("221e8cda-f6f7-49e6-a03c-9ee9ce2755ff")]
		public global::System.String TableComment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tableCommentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TableCommentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.TableComment domain property.
		/// </summary>
		internal sealed partial class TableCommentPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private TableCommentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.TableComment domain property value handler.
			/// </summary>
			public static readonly TableCommentPropertyHandler Instance = new TableCommentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.TableComment domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableCommentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tableCommentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tableCommentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.Association.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.Association.TargetDomainRoleId);
			}
		}
		#endregion
		#region UnidirectionalTargets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UnidirectionalTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> UnidirectionalTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
			}
		}
		#endregion
		#region UnidirectionalSources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of UnidirectionalSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> UnidirectionalSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.UnidirectionalTargetDomainRoleId);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelAttribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelAttribute>, ModelAttribute>(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region Subclasses opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.Generalization.SuperclassDomainRoleId);
			}
		}
		#endregion
		#region Superclass opposite domain role accessor
		/// <summary>
		/// Gets or sets Superclass.
		/// </summary>
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.Generalization.SubclassDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.Generalization.SubclassDomainRoleId, value);
			}
		}
		#endregion
		#region BidirectionalTargets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of BidirectionalTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> BidirectionalTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
			}
		}
		#endregion
		#region BidirectionalSources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of BidirectionalSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> BidirectionalSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.BidirectionalTargetDomainRoleId);
			}
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelClass
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelClassDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelClassDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.ModelAttribute.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Sawczyn.EFDesigner.EFModel.ModelAttribute sourceModelAttribute1 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelAttribute;
			if (sourceModelAttribute1 != null)
			{
				// Create link for path ClassHasAttributes.Attributes
				this.Attributes.Add(sourceModelAttribute1);

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.Comment sourceComment2 = sourceElement as global::Sawczyn.EFDesigner.EFModel.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path CommentReferencesClasses.Comments
				global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.GetComments((global::Sawczyn.EFDesigner.EFModel.ModelClass)this).Add(sourceComment2);

				// Create link for path ModelRootHasClasses.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
						// Segments 0 and 1
						global::Sawczyn.EFDesigner.EFModel.ModelRoot commentHost1 = this.ModelRoot;
						if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasClasses.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				commentHost1.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Sawczyn.EFDesigner.EFModel.ModelAttribute sourceModelAttribute1 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelAttribute;
			if (sourceModelAttribute1 != null)
			{
				// Delete link for path ClassHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelClass)this, sourceModelAttribute1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.ModelClassDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.AttributeDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.Comment sourceComment2 = sourceElement as global::Sawczyn.EFDesigner.EFModel.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path CommentReferencesClasses.Comments
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.GetLinks(sourceComment2, (global::Sawczyn.EFDesigner.EFModel.ModelClass)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.ModelClassDomainRoleId, global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.CommentDomainRoleId);
				}

				// Delete link for path ModelRootHasClasses.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
					// Segments 0 and 1
					global::Sawczyn.EFDesigner.EFModel.ModelRoot commentHost1 = this.ModelRoot;
					if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasClasses.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelRoot)commentHost1, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.ModelRootDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass ModelAttribute
	/// An attribute of a class.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(ModelAttributeTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("8be1f7ab-85c8-4f57-8621-38e1207d8f8d")]
	public partial class ModelAttribute : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8be1f7ab, 0x85c8, 0x4f57, 0x86, 0x21, 0x38, 0xe1, 0x20, 0x7d, 0x8f, 0x8d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x7ccdef4e, 0x9305, 0x485f, 0xab, 0xdc, 0x7e, 0xe9, 0xaf, 0xed, 0x3b, 0x83);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = "String";
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Type of this attribute
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(AttributeTypeTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Type.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Type.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Type.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("String")]
		[DslModeling::DomainObjectId("7ccdef4e-9305-485f-abdc-7ee9afed3b83")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InitialValue domain property code
		
		/// <summary>
		/// InitialValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialValueDomainPropertyId = new global::System.Guid(0x711a1ade, 0x6ac9, 0x4f06, 0xbe, 0x35, 0x3f, 0x7d, 0x0a, 0xac, 0xd8, 0x48);
		
		/// <summary>
		/// Storage for InitialValue
		/// </summary>
		private global::System.String initialValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InitialValue domain property.
		/// Value for attribute when first created
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/InitialValue.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/InitialValue.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/InitialValue.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("711a1ade-6ac9-4f06-be35-3f7d0aacd848")]
		public global::System.String InitialValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.InitialValue domain property.
		/// </summary>
		internal sealed partial class InitialValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private InitialValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.InitialValue domain property value handler.
			/// </summary>
			public static readonly InitialValuePropertyHandler Instance = new InitialValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.InitialValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIdentity domain property code
		
		/// <summary>
		/// IsIdentity domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIdentityDomainPropertyId = new global::System.Guid(0xef3764a4, 0xc46e, 0x443d, 0x86, 0xb6, 0x96, 0x8e, 0x82, 0x8d, 0x6d, 0x3b);
		
		/// <summary>
		/// Storage for IsIdentity
		/// </summary>
		private global::System.Boolean isIdentityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIdentity domain property.
		/// Does this attribute represent the identity of the object?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsIdentity.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsIdentity.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsIdentity.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ef3764a4-c46e-443d-86b6-968e828d6d3b")]
		public global::System.Boolean IsIdentity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIdentityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIdentityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsIdentity domain property.
		/// </summary>
		internal sealed partial class IsIdentityPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsIdentityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsIdentity domain property value handler.
			/// </summary>
			public static readonly IsIdentityPropertyHandler Instance = new IsIdentityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsIdentity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIdentityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIdentityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIdentityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Required domain property code
		
		/// <summary>
		/// Required domain property Id.
		/// </summary>
		public static readonly global::System.Guid RequiredDomainPropertyId = new global::System.Guid(0xe3b492a9, 0x5341, 0x4694, 0xaf, 0xa5, 0xcb, 0x56, 0x6a, 0xe8, 0x13, 0xa7);
		
		/// <summary>
		/// Storage for Required
		/// </summary>
		private global::System.Boolean requiredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Required domain property.
		/// If true, cannot be null (or the default value for the property type, if not
		/// nullable)
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Required.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Required.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Required.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e3b492a9-5341-4694-afa5-cb566ae813a7")]
		public global::System.Boolean Required
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return requiredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RequiredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Required domain property.
		/// </summary>
		internal sealed partial class RequiredPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private RequiredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Required domain property value handler.
			/// </summary>
			public static readonly RequiredPropertyHandler Instance = new RequiredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Required domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RequiredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.requiredPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.requiredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Persistent domain property code
		
		/// <summary>
		/// Persistent domain property Id.
		/// </summary>
		public static readonly global::System.Guid PersistentDomainPropertyId = new global::System.Guid(0xe19260c6, 0x5ae0, 0x43bc, 0x82, 0xeb, 0xdd, 0x2b, 0x4d, 0x23, 0x4f, 0x9e);
		
		/// <summary>
		/// Storage for Persistent
		/// </summary>
		private global::System.Boolean persistentPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Persistent domain property.
		/// Attribute will be stored in persistent storage
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Persistent.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Persistent.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Persistent.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("e19260c6-5ae0-43bc-82eb-dd2b4d234f9e")]
		public global::System.Boolean Persistent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return persistentPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PersistentPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Persistent domain property.
		/// </summary>
		internal sealed partial class PersistentPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private PersistentPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Persistent domain property value handler.
			/// </summary>
			public static readonly PersistentPropertyHandler Instance = new PersistentPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Persistent domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PersistentDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.persistentPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.persistentPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MaxLength domain property code
		
		/// <summary>
		/// MaxLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaxLengthDomainPropertyId = new global::System.Guid(0x8c128f2b, 0x8f9f, 0x4c8e, 0xac, 0xf1, 0xdd, 0x54, 0x88, 0x73, 0x6b, 0x79);
		
		/// <summary>
		/// Storage for MaxLength
		/// </summary>
		private global::System.Nullable<System.Int32> maxLengthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of MaxLength domain property.
		/// Maximum length of the string, A positive number will generate a length
		/// constraint, negative number means the database maximum (approx. 2GB), and null
		/// or 0 for no max length entry (migration traditionally will set the database
		/// column to 2000 characters).
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(MaxLengthTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/MaxLength.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/MaxLength.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/MaxLength.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8c128f2b-8f9f-4c8e-acf1-dd5488736b79")]
		public global::System.Nullable<System.Int32> MaxLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return maxLengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MaxLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.MaxLength domain property.
		/// </summary>
		internal sealed partial class MaxLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Nullable<System.Int32>>
		{
			private MaxLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.MaxLength domain property value handler.
			/// </summary>
			public static readonly MaxLengthPropertyHandler Instance = new MaxLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.MaxLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaxLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Nullable<System.Int32> GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.maxLengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Nullable<System.Int32> newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Nullable<System.Int32> oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.maxLengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Indexed domain property code
		
		/// <summary>
		/// Indexed domain property Id.
		/// </summary>
		public static readonly global::System.Guid IndexedDomainPropertyId = new global::System.Guid(0x59213f5b, 0x9662, 0x4f70, 0xad, 0xe1, 0x28, 0x0d, 0x2d, 0x7a, 0xb7, 0x7b);
		
		/// <summary>
		/// Storage for Indexed
		/// </summary>
		private global::System.Boolean indexedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Indexed domain property.
		/// Should this attribute create an index in the database?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Indexed.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Indexed.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Indexed.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("59213f5b-9662-4f70-ade1-280d2d7ab77b")]
		public global::System.Boolean Indexed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return indexedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IndexedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Indexed domain property.
		/// </summary>
		internal sealed partial class IndexedPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IndexedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Indexed domain property value handler.
			/// </summary>
			public static readonly IndexedPropertyHandler Instance = new IndexedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Indexed domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IndexedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.indexedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.indexedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IndexedUnique domain property code
		
		/// <summary>
		/// IndexedUnique domain property Id.
		/// </summary>
		public static readonly global::System.Guid IndexedUniqueDomainPropertyId = new global::System.Guid(0xa4f65b33, 0xe958, 0x4f04, 0x9d, 0xd0, 0x16, 0x0c, 0xe7, 0x2a, 0x9f, 0x5c);
		
		/// <summary>
		/// Storage for IndexedUnique
		/// </summary>
		private global::System.Boolean indexedUniquePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IndexedUnique domain property.
		/// If indexed, is the index a unique index?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IndexedUnique.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IndexedUnique.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IndexedUnique.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a4f65b33-e958-4f04-9dd0-160ce72a9f5c")]
		public global::System.Boolean IndexedUnique
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return indexedUniquePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IndexedUniquePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IndexedUnique domain property.
		/// </summary>
		internal sealed partial class IndexedUniquePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IndexedUniquePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IndexedUnique domain property value handler.
			/// </summary>
			public static readonly IndexedUniquePropertyHandler Instance = new IndexedUniquePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IndexedUnique domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IndexedUniqueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.indexedUniquePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.indexedUniquePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StringType domain property code
		
		/// <summary>
		/// StringType domain property Id.
		/// </summary>
		public static readonly global::System.Guid StringTypeDomainPropertyId = new global::System.Guid(0xb129be88, 0x1030, 0x4ef1, 0x9b, 0xa2, 0x98, 0xa0, 0x2a, 0xa4, 0x0d, 0x2b);
		
		/// <summary>
		/// Storage for StringType
		/// </summary>
		private HTML5Type stringTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of StringType domain property.
		/// If not empty, will create a standard validation annotation for this attribute.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/StringType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/StringType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/StringType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b129be88-1030-4ef1-9ba2-98a02aa40d2b")]
		public HTML5Type StringType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return stringTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StringTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.StringType domain property.
		/// </summary>
		internal sealed partial class StringTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, HTML5Type>
		{
			private StringTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.StringType domain property value handler.
			/// </summary>
			public static readonly StringTypePropertyHandler Instance = new StringTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.StringType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StringTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed HTML5Type GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.stringTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, HTML5Type newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				HTML5Type oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.stringTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TableOverride domain property code
		
		/// <summary>
		/// TableOverride domain property Id.
		/// </summary>
		public static readonly global::System.Guid TableOverrideDomainPropertyId = new global::System.Guid(0x5e502e9e, 0x7120, 0x42d1, 0xbd, 0x3b, 0x27, 0xdf, 0xc4, 0x2f, 0x36, 0x18);
		
		/// <summary>
		/// Storage for TableOverride
		/// </summary>
		private global::System.String tableOverridePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TableOverride domain property.
		/// Unused - Alternate table to store this attribute. If empty, the class's table is
		/// used.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/TableOverride.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/TableOverride.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/TableOverride.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("5e502e9e-7120-42d1-bd3b-27dfc42f3618")]
		public global::System.String TableOverride
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tableOverridePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TableOverridePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.TableOverride domain property.
		/// </summary>
		internal sealed partial class TableOverridePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private TableOverridePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.TableOverride domain property value handler.
			/// </summary>
			public static readonly TableOverridePropertyHandler Instance = new TableOverridePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.TableOverride domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TableOverrideDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tableOverridePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tableOverridePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsConcurrencyToken domain property code
		
		/// <summary>
		/// IsConcurrencyToken domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsConcurrencyTokenDomainPropertyId = new global::System.Guid(0x875fc44f, 0x1355, 0x4b9e, 0xb3, 0xbb, 0x37, 0x7a, 0xb3, 0x51, 0x0f, 0x3b);
		
		/// <summary>
		/// Storage for IsConcurrencyToken
		/// </summary>
		private global::System.Boolean isConcurrencyTokenPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsConcurrencyToken domain property.
		/// If true, this property serves as the concurrency value for the class
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsConcurrencyToken.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsConcurrencyToken.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsConcurrencyToken.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("875fc44f-1355-4b9e-b3bb-377ab3510f3b")]
		public global::System.Boolean IsConcurrencyToken
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isConcurrencyTokenPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsConcurrencyTokenPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsConcurrencyToken domain property.
		/// </summary>
		internal sealed partial class IsConcurrencyTokenPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsConcurrencyTokenPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsConcurrencyToken domain property value handler.
			/// </summary>
			public static readonly IsConcurrencyTokenPropertyHandler Instance = new IsConcurrencyTokenPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsConcurrencyToken domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsConcurrencyTokenDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isConcurrencyTokenPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isConcurrencyTokenPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdentityType domain property code
		
		/// <summary>
		/// IdentityType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentityTypeDomainPropertyId = new global::System.Guid(0xe52b2355, 0x7c6c, 0x4493, 0x80, 0x12, 0x29, 0x1f, 0x4f, 0x67, 0x9d, 0x7b);
		
		/// <summary>
		/// Storage for IdentityType
		/// </summary>
		private IdentityType identityTypePropertyStorage = IdentityType.None;
		
		/// <summary>
		/// Gets or sets the value of IdentityType domain property.
		/// If this property is an identity, how the value is generated
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IdentityType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IdentityType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IdentityType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IdentityType.None)]
		[DslModeling::DomainObjectId("e52b2355-7c6c-4493-8012-291f4f679d7b")]
		public IdentityType IdentityType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identityTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentityTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IdentityType domain property.
		/// </summary>
		internal sealed partial class IdentityTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, IdentityType>
		{
			private IdentityTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IdentityType domain property value handler.
			/// </summary>
			public static readonly IdentityTypePropertyHandler Instance = new IdentityTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IdentityType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentityTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IdentityType GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.identityTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, IdentityType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IdentityType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identityTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xd974a312, 0x57fe, 0x42b3, 0xb3, 0x77, 0x22, 0xfe, 0x01, 0x56, 0x23, 0x56);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Detailed code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Description.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Description.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Description.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("d974a312-57fe-42b3-b377-22fe01562356")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x1ebd74c3, 0x5011, 0x48e6, 0xb5, 0xc1, 0x67, 0xd7, 0x82, 0x93, 0x06, 0x7d);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Brief code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Summary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Summary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Summary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1ebd74c3-5011-48e6-b5c1-67d78293067d")]
		public global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.summaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xdf236d99, 0xef7c, 0x419c, 0x83, 0x3d, 0xa9, 0x72, 0xbf, 0x8c, 0xcc, 0x52);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the property. Must be a valid C# symbol.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Name.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Name.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Name.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName(typeof(ModelAttributeNameProvider))]
		[DslModeling::DomainObjectId("df236d99-ef7c-419c-833d-a972bf8ccc52")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SetterVisibility domain property code
		
		/// <summary>
		/// SetterVisibility domain property Id.
		/// </summary>
		public static readonly global::System.Guid SetterVisibilityDomainPropertyId = new global::System.Guid(0x76cc7aca, 0x4420, 0x423c, 0x89, 0x1c, 0x2d, 0x34, 0x9c, 0x8b, 0x7b, 0xc4);
		
		/// <summary>
		/// Storage for SetterVisibility
		/// </summary>
		private SetterAccessModifier setterVisibilityPropertyStorage = SetterAccessModifier.Public;
		
		/// <summary>
		/// Gets or sets the value of SetterVisibility domain property.
		/// Visibility for property setter; getter is public
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/SetterVisibility.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/SetterVisibility.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/SetterVisibility.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(SetterAccessModifier.Public)]
		[DslModeling::DomainObjectId("76cc7aca-4420-423c-891c-2d349c8b7bc4")]
		public SetterAccessModifier SetterVisibility
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return setterVisibilityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SetterVisibilityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.SetterVisibility domain property.
		/// </summary>
		internal sealed partial class SetterVisibilityPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, SetterAccessModifier>
		{
			private SetterVisibilityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.SetterVisibility domain property value handler.
			/// </summary>
			public static readonly SetterVisibilityPropertyHandler Instance = new SetterVisibilityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.SetterVisibility domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SetterVisibilityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed SetterAccessModifier GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.setterVisibilityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, SetterAccessModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				SetterAccessModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.setterVisibilityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Virtual domain property code
		
		/// <summary>
		/// Virtual domain property Id.
		/// </summary>
		public static readonly global::System.Guid VirtualDomainPropertyId = new global::System.Guid(0xc416dac0, 0x92c6, 0x4b36, 0x89, 0xcd, 0xb7, 0x63, 0x80, 0xa3, 0xc4, 0x48);
		
		/// <summary>
		/// Storage for Virtual
		/// </summary>
		private global::System.Boolean virtualPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Virtual domain property.
		/// If true, property will be generated with the 'virtual' keyword
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Virtual.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Virtual.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/Virtual.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c416dac0-92c6-4b36-89cd-b76380a3c448")]
		public global::System.Boolean Virtual
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return virtualPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VirtualPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Virtual domain property.
		/// </summary>
		internal sealed partial class VirtualPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private VirtualPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Virtual domain property value handler.
			/// </summary>
			public static readonly VirtualPropertyHandler Instance = new VirtualPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Virtual domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VirtualDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.virtualPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.virtualPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReadOnly domain property code
		
		/// <summary>
		/// ReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReadOnlyDomainPropertyId = new global::System.Guid(0xd20e1491, 0xe58d, 0x4a3c, 0x8c, 0x0a, 0x24, 0x65, 0x3c, 0xc3, 0x85, 0x80);
		
		/// <summary>
		/// Storage for ReadOnly
		/// </summary>
		private global::System.Boolean readOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ReadOnly domain property.
		/// If true, no setter will be generated. Only valid for transient public
		/// properties.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ReadOnly.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ReadOnly.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ReadOnly.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d20e1491-e58d-4a3c-8c0a-24653cc38580")]
		public global::System.Boolean ReadOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return readOnlyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ReadOnlyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.ReadOnly domain property.
		/// </summary>
		internal sealed partial class ReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private ReadOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.ReadOnly domain property value handler.
			/// </summary>
			public static readonly ReadOnlyPropertyHandler Instance = new ReadOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.ReadOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReadOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.readOnlyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.readOnlyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AutoProperty domain property code
		
		/// <summary>
		/// AutoProperty domain property Id.
		/// </summary>
		public static readonly global::System.Guid AutoPropertyDomainPropertyId = new global::System.Guid(0xbd0273dc, 0xd3ea, 0x44e2, 0x8b, 0x01, 0xf7, 0x9d, 0x39, 0xca, 0x07, 0x04);
		
		/// <summary>
		/// Gets or sets the value of AutoProperty domain property.
		/// If false, generates a backing field and a partial method to hook getting and
		/// setting the property. If true, generates a simple auto property.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/AutoProperty.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/AutoProperty.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/AutoProperty.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("bd0273dc-d3ea-44e2-8b01-f79d39ca0704")]
		public global::System.Boolean AutoProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return AutoPropertyPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AutoPropertyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.AutoProperty domain property.
		/// </summary>
		internal sealed partial class AutoPropertyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private AutoPropertyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.AutoProperty domain property value handler.
			/// </summary>
			public static readonly AutoPropertyPropertyHandler Instance = new AutoPropertyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.AutoProperty domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AutoPropertyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for AutoProperty because its Kind is
				// set to CustomStorage. Please provide the GetAutoPropertyValue()
				// method on the domain class.
				return element.GetAutoPropertyValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for AutoProperty because its Kind is
					// set to CustomStorage. Please provide the SetAutoPropertyValue()
					// method on the domain class.
					element.SetAutoPropertyValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region MinLength domain property code
		
		/// <summary>
		/// MinLength domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinLengthDomainPropertyId = new global::System.Guid(0x7fe42ef4, 0x9691, 0x4db1, 0x82, 0x19, 0x59, 0x10, 0x7c, 0x14, 0x47, 0x8b);
		
		/// <summary>
		/// Storage for MinLength
		/// </summary>
		private global::System.Int32 minLengthPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of MinLength domain property.
		/// Minimum length of the string, 0 for no minimum length
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(MinLengthTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/MinLength.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/MinLength.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/MinLength.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7fe42ef4-9691-4db1-8219-59107c14478b")]
		public global::System.Int32 MinLength
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minLengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinLengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.MinLength domain property.
		/// </summary>
		internal sealed partial class MinLengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Int32>
		{
			private MinLengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.MinLength domain property value handler.
			/// </summary>
			public static readonly MinLengthPropertyHandler Instance = new MinLengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.MinLength domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinLengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minLengthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minLengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColumnName domain property code
		
		/// <summary>
		/// ColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnNameDomainPropertyId = new global::System.Guid(0xe4394dde, 0x038f, 0x4fea, 0xa3, 0x28, 0x3b, 0x6b, 0xed, 0x85, 0x71, 0xf8);
		
		/// <summary>
		/// Gets or sets the value of ColumnName domain property.
		/// The name for the table column backing this property
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e4394dde-038f-4fea-a328-3b6bed8571f8")]
		public global::System.String ColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ColumnNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.ColumnName domain property.
		/// </summary>
		internal sealed partial class ColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private ColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.ColumnName domain property value handler.
			/// </summary>
			public static readonly ColumnNamePropertyHandler Instance = new ColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.ColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ColumnName because its Kind is
				// set to CustomStorage. Please provide the GetColumnNameValue()
				// method on the domain class.
				return element.GetColumnNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ColumnName because its Kind is
					// set to CustomStorage. Please provide the SetColumnNameValue()
					// method on the domain class.
					element.SetColumnNameValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsColumnNameTracking domain property code
		
		/// <summary>
		/// IsColumnNameTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsColumnNameTrackingDomainPropertyId = new global::System.Guid(0x7e3b91ab, 0x3859, 0x4b80, 0x92, 0x70, 0x9a, 0xdf, 0x7b, 0x46, 0xdb, 0xb3);
		
		/// <summary>
		/// Storage for IsColumnNameTracking
		/// </summary>
		private global::System.Boolean isColumnNameTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsColumnNameTracking domain property.
		/// If true, ModelAttribute.ColumnName tracks ModelAttribute.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsColumnNameTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsColumnNameTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("7e3b91ab-3859-4b80-9270-9adf7b46dbb3")]
		public global::System.Boolean IsColumnNameTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isColumnNameTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsColumnNameTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsColumnNameTracking domain property.
		/// </summary>
		internal sealed partial class IsColumnNameTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsColumnNameTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsColumnNameTracking domain property value handler.
			/// </summary>
			public static readonly IsColumnNameTrackingPropertyHandler Instance = new IsColumnNameTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsColumnNameTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsColumnNameTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isColumnNameTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isColumnNameTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ColumnType domain property code
		
		/// <summary>
		/// ColumnType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnTypeDomainPropertyId = new global::System.Guid(0x17cc5012, 0x1352, 0x4a08, 0x99, 0x65, 0x55, 0xdc, 0xec, 0xaa, 0x98, 0x5f);
		
		/// <summary>
		/// Gets or sets the value of ColumnType domain property.
		/// The data type for the table column backing this property
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ColumnType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("17cc5012-1352-4a08-9965-55dcecaa985f")]
		public global::System.String ColumnType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ColumnTypePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.ColumnType domain property.
		/// </summary>
		internal sealed partial class ColumnTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private ColumnTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.ColumnType domain property value handler.
			/// </summary>
			public static readonly ColumnTypePropertyHandler Instance = new ColumnTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.ColumnType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ColumnType because its Kind is
				// set to CustomStorage. Please provide the GetColumnTypeValue()
				// method on the domain class.
				return element.GetColumnTypeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ColumnType because its Kind is
					// set to CustomStorage. Please provide the SetColumnTypeValue()
					// method on the domain class.
					element.SetColumnTypeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsColumnTypeTracking domain property code
		
		/// <summary>
		/// IsColumnTypeTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsColumnTypeTrackingDomainPropertyId = new global::System.Guid(0x8f4f2c30, 0xd7cd, 0x4ee6, 0xaa, 0x6b, 0x1b, 0xc1, 0xdc, 0x8f, 0xd1, 0x3c);
		
		/// <summary>
		/// Storage for IsColumnTypeTracking
		/// </summary>
		private global::System.Boolean isColumnTypeTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsColumnTypeTracking domain property.
		/// If true, ModelAttribute.ColumnType tracks ModelAttribute.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsColumnTypeTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsColumnTypeTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("8f4f2c30-d7cd-4ee6-aa6b-1bc1dc8fd13c")]
		public global::System.Boolean IsColumnTypeTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isColumnTypeTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsColumnTypeTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsColumnTypeTracking domain property.
		/// </summary>
		internal sealed partial class IsColumnTypeTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsColumnTypeTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsColumnTypeTracking domain property value handler.
			/// </summary>
			public static readonly IsColumnTypeTrackingPropertyHandler Instance = new IsColumnTypeTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsColumnTypeTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsColumnTypeTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isColumnTypeTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isColumnTypeTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0xc54c284f, 0x10d6, 0x4a49, 0x8f, 0xc1, 0x0b, 0xcf, 0x4b, 0xab, 0x8c, 0x6f);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Any custom attributes to be generated for this element.  Will be passed through
		/// as entered.
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/CustomAttributes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/CustomAttributes.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/CustomAttributes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c54c284f-10d6-4a49-8fc1-0bcf4bab8c6f")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayText domain property code
		
		/// <summary>
		/// DisplayText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayTextDomainPropertyId = new global::System.Guid(0x7d65b45d, 0xff09, 0x49c7, 0xb1, 0xbc, 0xea, 0x80, 0x17, 0x56, 0x86, 0xd8);
		
		/// <summary>
		/// Storage for DisplayText
		/// </summary>
		private global::System.String displayTextPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DisplayText domain property.
		/// Text for [Display(Name="<text>")] attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/DisplayText.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/DisplayText.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/DisplayText.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7d65b45d-ff09-49c7-b1bc-ea80175686d8")]
		public global::System.String DisplayText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.DisplayText domain property.
		/// </summary>
		internal sealed partial class DisplayTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private DisplayTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.DisplayText domain property value handler.
			/// </summary>
			public static readonly DisplayTextPropertyHandler Instance = new DisplayTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.DisplayText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ImplementNotify domain property code
		
		/// <summary>
		/// ImplementNotify domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImplementNotifyDomainPropertyId = new global::System.Guid(0xdfb9a776, 0x9fda, 0x4565, 0x8f, 0x78, 0xbc, 0xac, 0x2a, 0x6f, 0xb7, 0x34);
		
		/// <summary>
		/// Gets or sets the value of ImplementNotify domain property.
		/// Should this class implement INotifyPropertyChanged?
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ImplementNotify.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ImplementNotify.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/ImplementNotify.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("dfb9a776-9fda-4565-8f78-bcac2a6fb734")]
		public global::System.Boolean ImplementNotify
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ImplementNotifyPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImplementNotifyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.ImplementNotify domain property.
		/// </summary>
		internal sealed partial class ImplementNotifyPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private ImplementNotifyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.ImplementNotify domain property value handler.
			/// </summary>
			public static readonly ImplementNotifyPropertyHandler Instance = new ImplementNotifyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.ImplementNotify domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImplementNotifyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ImplementNotify because its Kind is
				// set to CustomStorage. Please provide the GetImplementNotifyValue()
				// method on the domain class.
				return element.GetImplementNotifyValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for ImplementNotify because its Kind is
					// set to CustomStorage. Please provide the SetImplementNotifyValue()
					// method on the domain class.
					element.SetImplementNotifyValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsImplementNotifyTracking domain property code
		
		/// <summary>
		/// IsImplementNotifyTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsImplementNotifyTrackingDomainPropertyId = new global::System.Guid(0x51e44c7a, 0x7fbc, 0x4ddc, 0xae, 0x59, 0x97, 0xea, 0x55, 0x19, 0xba, 0xa7);
		
		/// <summary>
		/// Storage for IsImplementNotifyTracking
		/// </summary>
		private global::System.Boolean isImplementNotifyTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsImplementNotifyTracking domain property.
		/// If true, ModelAttribute.IsImplementNotify tracks ModelClass.ImplementNotify
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsImplementNotifyTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsImplementNotifyTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("51e44c7a-7fbc-4ddc-ae59-97ea5519baa7")]
		public global::System.Boolean IsImplementNotifyTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isImplementNotifyTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsImplementNotifyTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsImplementNotifyTracking domain property.
		/// </summary>
		internal sealed partial class IsImplementNotifyTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsImplementNotifyTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsImplementNotifyTracking domain property value handler.
			/// </summary>
			public static readonly IsImplementNotifyTrackingPropertyHandler Instance = new IsImplementNotifyTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsImplementNotifyTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsImplementNotifyTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isImplementNotifyTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isImplementNotifyTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAutoPropertyTracking domain property code
		
		/// <summary>
		/// IsAutoPropertyTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAutoPropertyTrackingDomainPropertyId = new global::System.Guid(0x79e4dae8, 0xe284, 0x44a2, 0xb7, 0xb2, 0x6a, 0xaa, 0xe8, 0xc0, 0x23, 0x9d);
		
		/// <summary>
		/// Storage for IsAutoPropertyTracking
		/// </summary>
		private global::System.Boolean isAutoPropertyTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsAutoPropertyTracking domain property.
		/// If true, ModelAttribute.AutoProperty tracks ModelClass.AutoPropertyDefault
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsAutoPropertyTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsAutoPropertyTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("79e4dae8-e284-44a2-b7b2-6aaae8c0239d")]
		public global::System.Boolean IsAutoPropertyTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAutoPropertyTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAutoPropertyTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsAutoPropertyTracking domain property.
		/// </summary>
		internal sealed partial class IsAutoPropertyTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsAutoPropertyTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsAutoPropertyTracking domain property value handler.
			/// </summary>
			public static readonly IsAutoPropertyTrackingPropertyHandler Instance = new IsAutoPropertyTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsAutoPropertyTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAutoPropertyTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAutoPropertyTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAutoPropertyTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsForeignKeyFor domain property code
		
		/// <summary>
		/// IsForeignKeyFor domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsForeignKeyForDomainPropertyId = new global::System.Guid(0x8282d835, 0x2c0e, 0x4d59, 0xa6, 0x38, 0x6d, 0x3c, 0x6e, 0x49, 0x42, 0x60);
		
		/// <summary>
		/// Storage for IsForeignKeyFor
		/// </summary>
		private global::System.Guid isForeignKeyForPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsForeignKeyFor domain property.
		/// If present, this attribute is a foreign key for the association named by this
		/// Guid
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsForeignKeyFor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsForeignKeyFor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("8282d835-2c0e-4d59-a638-6d3c6e494260")]
		public global::System.Guid IsForeignKeyFor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isForeignKeyForPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			internal set
			{
				IsForeignKeyForPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsForeignKeyFor domain property.
		/// </summary>
		internal sealed partial class IsForeignKeyForPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Guid>
		{
			private IsForeignKeyForPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsForeignKeyFor domain property value handler.
			/// </summary>
			public static readonly IsForeignKeyForPropertyHandler Instance = new IsForeignKeyForPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsForeignKeyFor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsForeignKeyForDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isForeignKeyForPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isForeignKeyForPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BackingFieldName domain property code
		
		/// <summary>
		/// BackingFieldName domain property Id.
		/// </summary>
		public static readonly global::System.Guid BackingFieldNameDomainPropertyId = new global::System.Guid(0xce0d2639, 0x3b83, 0x4ce7, 0x82, 0x0e, 0x43, 0x45, 0x64, 0x12, 0xda, 0x05);
		
		/// <summary>
		/// Gets or sets the value of BackingFieldName domain property.
		/// The name of the backing field for this property
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/BackingFieldName.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/BackingFieldName.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/BackingFieldName.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ce0d2639-3b83-4ce7-820e-43456412da05")]
		public global::System.String BackingFieldName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return BackingFieldNamePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BackingFieldNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.BackingFieldName domain property.
		/// </summary>
		internal sealed partial class BackingFieldNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private BackingFieldNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.BackingFieldName domain property value handler.
			/// </summary>
			public static readonly BackingFieldNamePropertyHandler Instance = new BackingFieldNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.BackingFieldName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BackingFieldNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for BackingFieldName because its Kind is
				// set to CustomStorage. Please provide the GetBackingFieldNameValue()
				// method on the domain class.
				return element.GetBackingFieldNameValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for BackingFieldName because its Kind is
					// set to CustomStorage. Please provide the SetBackingFieldNameValue()
					// method on the domain class.
					element.SetBackingFieldNameValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region DatabaseCollation domain property code
		
		/// <summary>
		/// DatabaseCollation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DatabaseCollationDomainPropertyId = new global::System.Guid(0x349c587e, 0x0b87, 0x42a7, 0xac, 0x99, 0xef, 0x96, 0x48, 0xa7, 0x03, 0x25);
		
		/// <summary>
		/// Gets or sets the value of DatabaseCollation domain property.
		/// Overrides the default database collation setting for the column that persists
		/// this attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/DatabaseCollation.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/DatabaseCollation.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/DatabaseCollation.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("349c587e-0b87-42a7-ac99-ef9648a70325")]
		public global::System.String DatabaseCollation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DatabaseCollationPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DatabaseCollationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.DatabaseCollation domain property.
		/// </summary>
		internal sealed partial class DatabaseCollationPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private DatabaseCollationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.DatabaseCollation domain property value handler.
			/// </summary>
			public static readonly DatabaseCollationPropertyHandler Instance = new DatabaseCollationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.DatabaseCollation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DatabaseCollationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DatabaseCollation because its Kind is
				// set to CustomStorage. Please provide the GetDatabaseCollationValue()
				// method on the domain class.
				return element.GetDatabaseCollationValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for DatabaseCollation because its Kind is
					// set to CustomStorage. Please provide the SetDatabaseCollationValue()
					// method on the domain class.
					element.SetDatabaseCollationValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsDatabaseCollationTracking domain property code
		
		/// <summary>
		/// IsDatabaseCollationTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsDatabaseCollationTrackingDomainPropertyId = new global::System.Guid(0xcd11a7f7, 0x0432, 0x4d16, 0x98, 0xd8, 0x5d, 0xb6, 0xa9, 0x8f, 0xfc, 0x8b);
		
		/// <summary>
		/// Storage for IsDatabaseCollationTracking
		/// </summary>
		private global::System.Boolean isDatabaseCollationTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsDatabaseCollationTracking domain property.
		/// If true, ModelAttribute.DatabaseCollation tracks
		/// ModelRoot.DatabaseCollationDefault
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsDatabaseCollationTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsDatabaseCollationTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("cd11a7f7-0432-4d16-98d8-5db6a98ffc8b")]
		public global::System.Boolean IsDatabaseCollationTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isDatabaseCollationTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsDatabaseCollationTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsDatabaseCollationTracking domain property.
		/// </summary>
		internal sealed partial class IsDatabaseCollationTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsDatabaseCollationTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsDatabaseCollationTracking domain property value handler.
			/// </summary>
			public static readonly IsDatabaseCollationTrackingPropertyHandler Instance = new IsDatabaseCollationTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsDatabaseCollationTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsDatabaseCollationTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isDatabaseCollationTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isDatabaseCollationTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyAccessMode domain property code
		
		/// <summary>
		/// PropertyAccessMode domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyAccessModeDomainPropertyId = new global::System.Guid(0xfcbce627, 0x878c, 0x468f, 0x84, 0xa5, 0xb0, 0xe5, 0xde, 0xed, 0xac, 0xb0);
		
		/// <summary>
		/// Gets or sets the value of PropertyAccessMode domain property.
		/// Defines how EF reads and write this property or its backing field. See 
		/// https://docs.microsoft.com/en-us/dotnet/api/microsoft.entityframeworkcore.propertyaccessmode
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(PropertyAccessModeTypeConverter))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/PropertyAccessMode.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/PropertyAccessMode.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/PropertyAccessMode.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PropertyAccessMode.FieldDuringConstruction)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("fcbce627-878c-468f-84a5-b0e5deedacb0")]
		public PropertyAccessMode PropertyAccessMode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return PropertyAccessModePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyAccessModePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.PropertyAccessMode domain property.
		/// </summary>
		internal sealed partial class PropertyAccessModePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, PropertyAccessMode>
		{
			private PropertyAccessModePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.PropertyAccessMode domain property value handler.
			/// </summary>
			public static readonly PropertyAccessModePropertyHandler Instance = new PropertyAccessModePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.PropertyAccessMode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyAccessModeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyAccessMode GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for PropertyAccessMode because its Kind is
				// set to CustomStorage. Please provide the GetPropertyAccessModeValue()
				// method on the domain class.
				return element.GetPropertyAccessModeValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, PropertyAccessMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyAccessMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for PropertyAccessMode because its Kind is
					// set to CustomStorage. Please provide the SetPropertyAccessModeValue()
					// method on the domain class.
					element.SetPropertyAccessModeValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0x0ee5f3e7, 0xa047, 0x4c79, 0xa4, 0xf4, 0x2d, 0x63, 0x2f, 0x2b, 0xd4, 0x7c);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private global::System.Boolean isAbstractPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// If true, this will be generated as an abstract property
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsAbstract.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsAbstract.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsAbstract.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0ee5f3e7-a047-4c79-a4f4-2d632f2bd47c")]
		public global::System.Boolean IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsPropertyAccessModeTracking domain property code
		
		/// <summary>
		/// IsPropertyAccessModeTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPropertyAccessModeTrackingDomainPropertyId = new global::System.Guid(0xe8193ff7, 0x7dd5, 0x4ea8, 0x82, 0xe1, 0x6c, 0x7e, 0x4f, 0x99, 0x2a, 0x53);
		
		/// <summary>
		/// Storage for IsPropertyAccessModeTracking
		/// </summary>
		private global::System.Boolean isPropertyAccessModeTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsPropertyAccessModeTracking domain property.
		/// If true, ModelAttribute.PropertyAccessMode tracks
		/// ModelRoot.PropertyAccessModeDefault
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsPropertyAccessModeTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelAttribute/IsPropertyAccessModeTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("e8193ff7-7dd5-4ea8-82e1-6c7e4f992a53")]
		public global::System.Boolean IsPropertyAccessModeTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPropertyAccessModeTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPropertyAccessModeTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.IsPropertyAccessModeTracking domain property.
		/// </summary>
		internal sealed partial class IsPropertyAccessModeTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.Boolean>
		{
			private IsPropertyAccessModeTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.IsPropertyAccessModeTracking domain property value handler.
			/// </summary>
			public static readonly IsPropertyAccessModeTrackingPropertyHandler Instance = new IsPropertyAccessModeTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.IsPropertyAccessModeTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPropertyAccessModeTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isPropertyAccessModeTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPropertyAccessModeTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.AttributeDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.AttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Comment.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Comment.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e2c13b26-0944-4b6c-89b5-bb95c500f515")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2c13b26, 0x0944, 0x4b6c, 0x89, 0xb5, 0xbb, 0x95, 0xc5, 0x00, 0xf5, 0x15);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x8c3255f6, 0x3ee8, 0x40e1, 0xb4, 0x33, 0x07, 0x19, 0xaa, 0xff, 0xce, 0x04);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// Comment text
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Comment/Text.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Comment/Text.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("8c3255f6-3ee8-40e1-b433-0719aaffce04")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ShortText domain property code
		
		/// <summary>
		/// ShortText domain property Id.
		/// </summary>
		public static readonly global::System.Guid ShortTextDomainPropertyId = new global::System.Guid(0xa17c8f41, 0x4a5b, 0x40a1, 0x9f, 0x77, 0x71, 0x34, 0x6c, 0x42, 0x82, 0x07);
		
		/// <summary>
		/// Gets or sets the value of ShortText domain property.
		/// Truncated Text property for Explorer display
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.Comment/ShortText.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Comment/ShortText.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("a17c8f41-4a5b-40a1-9f77-71346c428207")]
		public global::System.String ShortText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ShortTextPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Comment.ShortText domain property.
		/// </summary>
		internal sealed partial class ShortTextPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Comment, global::System.String>
		{
			private ShortTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.ShortText domain property value handler.
			/// </summary>
			public static readonly ShortTextPropertyHandler Instance = new ShortTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.ShortText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ShortTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ShortText because its Kind is
				// set to Calculated. Please provide the GetShortTextValue()
				// method on the domain class.
				return element.GetShortTextValue();
			}
		
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Subjects.
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.Comment
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<DesignElement> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<DesignElement>, DesignElement>(global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
		#region Classes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Classes.
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Classes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelClass>, ModelClass>(global::Sawczyn.EFDesigner.EFModel.CommentReferencesClasses.CommentDomainRoleId);
			}
		}
		#endregion
		#region Enums opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Enums.
		/// Description for Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.Comment
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelEnum> Enums
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelEnum>, ModelEnum>(global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass ModelEnum
	/// Represents an enumeration in C#
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(ModelEnumTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9c7f55aa-1cc9-4841-b671-0cab31164a24")]
	public partial class ModelEnum : DesignElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelEnum domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9c7f55aa, 0x1cc9, 0x4841, 0xb6, 0x71, 0x0c, 0xab, 0x31, 0x16, 0x4a, 0x24);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelEnum(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelEnum(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ValueType domain property code
		
		/// <summary>
		/// ValueType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueTypeDomainPropertyId = new global::System.Guid(0x123f14ef, 0x96ff, 0x4a05, 0x94, 0x40, 0x88, 0x8c, 0x43, 0xc4, 0x4e, 0x36);
		
		/// <summary>
		/// Storage for ValueType
		/// </summary>
		private EnumValueType valueTypePropertyStorage = EnumValueType.Int32;
		
		/// <summary>
		/// Gets or sets the value of ValueType domain property.
		/// CLR type implementing this enum (usually Int32)
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/ValueType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/ValueType.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/ValueType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EnumValueType.Int32)]
		[DslModeling::DomainObjectId("123f14ef-96ff-4a05-9440-888c43c44e36")]
		public EnumValueType ValueType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valueTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValueTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.ValueType domain property.
		/// </summary>
		internal sealed partial class ValueTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, EnumValueType>
		{
			private ValueTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.ValueType domain property value handler.
			/// </summary>
			public static readonly ValueTypePropertyHandler Instance = new ValueTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.ValueType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EnumValueType GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valueTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, EnumValueType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EnumValueType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valueTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x14138023, 0x9e10, 0x4ffd, 0x84, 0x8b, 0xd7, 0x7c, 0xe3, 0xde, 0x3c, 0xfc);
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Overrides default namespace
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Namespace.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Namespace.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Namespace.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("14138023-9e10-4ffd-848b-d77ce3de3cfc")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return NamespacePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Namespace because its Kind is
				// set to CustomStorage. Please provide the GetNamespaceValue()
				// method on the domain class.
				return element.GetNamespaceValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Namespace because its Kind is
					// set to CustomStorage. Please provide the SetNamespaceValue()
					// method on the domain class.
					element.SetNamespaceValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsNamespaceTracking domain property code
		
		/// <summary>
		/// IsNamespaceTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsNamespaceTrackingDomainPropertyId = new global::System.Guid(0x4f7323ec, 0x9053, 0x4127, 0xa4, 0x15, 0x9e, 0x98, 0x57, 0xf6, 0xdf, 0x68);
		
		/// <summary>
		/// Storage for IsNamespaceTracking
		/// </summary>
		private global::System.Boolean isNamespaceTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsNamespaceTracking domain property.
		/// If true, ModelEnum.Namespace tracks ModelRoot.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/IsNamespaceTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/IsNamespaceTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("4f7323ec-9053-4127-a415-9e9857f6df68")]
		public global::System.Boolean IsNamespaceTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isNamespaceTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsNamespaceTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.IsNamespaceTracking domain property.
		/// </summary>
		internal sealed partial class IsNamespaceTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.Boolean>
		{
			private IsNamespaceTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.IsNamespaceTracking domain property value handler.
			/// </summary>
			public static readonly IsNamespaceTrackingPropertyHandler Instance = new IsNamespaceTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.IsNamespaceTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsNamespaceTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isNamespaceTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isNamespaceTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x0d249431, 0xc352, 0x4468, 0x83, 0x22, 0xeb, 0x59, 0x10, 0x47, 0x7f, 0xee);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name of the enumeration
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Name.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Name.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Name.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName(typeof(ModelEnumNameProvider))]
		[DslModeling::DomainObjectId("0d249431-c352-4468-8322-eb5910477fee")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsFlags domain property code
		
		/// <summary>
		/// IsFlags domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsFlagsDomainPropertyId = new global::System.Guid(0x2196162d, 0x2f05, 0x48dd, 0x9a, 0xe6, 0xd2, 0x93, 0x19, 0x0c, 0x9c, 0x77);
		
		/// <summary>
		/// Storage for IsFlags
		/// </summary>
		private global::System.Boolean isFlagsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsFlags domain property.
		/// If true, values in this enumeration are flags and will have initial values set
		/// appropriately.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/IsFlags.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/IsFlags.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/IsFlags.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2196162d-2f05-48dd-9ae6-d293190c9c77")]
		public global::System.Boolean IsFlags
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isFlagsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsFlagsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.IsFlags domain property.
		/// </summary>
		internal sealed partial class IsFlagsPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.Boolean>
		{
			private IsFlagsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.IsFlags domain property value handler.
			/// </summary>
			public static readonly IsFlagsPropertyHandler Instance = new IsFlagsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.IsFlags domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsFlagsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isFlagsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isFlagsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OutputDirectory domain property code
		
		/// <summary>
		/// OutputDirectory domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutputDirectoryDomainPropertyId = new global::System.Guid(0x6556f5a3, 0xcba4, 0x415f, 0xbd, 0x8c, 0x1a, 0xf7, 0x86, 0xb6, 0x14, 0x21);
		
		/// <summary>
		/// Gets or sets the value of OutputDirectory domain property.
		/// Overrides default output directory
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/OutputDirectory.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/OutputDirectory.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/OutputDirectory.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6556f5a3-cba4-415f-bd8c-1af786b61421")]
		public global::System.String OutputDirectory
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutputDirectoryPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutputDirectoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.OutputDirectory domain property.
		/// </summary>
		internal sealed partial class OutputDirectoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.String>
		{
			private OutputDirectoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.OutputDirectory domain property value handler.
			/// </summary>
			public static readonly OutputDirectoryPropertyHandler Instance = new OutputDirectoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.OutputDirectory domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutputDirectoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutputDirectory because its Kind is
				// set to CustomStorage. Please provide the GetOutputDirectoryValue()
				// method on the domain class.
				return element.GetOutputDirectoryValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutputDirectory because its Kind is
					// set to CustomStorage. Please provide the SetOutputDirectoryValue()
					// method on the domain class.
					element.SetOutputDirectoryValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region IsOutputDirectoryTracking domain property code
		
		/// <summary>
		/// IsOutputDirectoryTracking domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsOutputDirectoryTrackingDomainPropertyId = new global::System.Guid(0x1a498d1a, 0x15d7, 0x48fe, 0xb9, 0x11, 0x17, 0xb1, 0x02, 0x8d, 0xa5, 0xf7);
		
		/// <summary>
		/// Storage for IsOutputDirectoryTracking
		/// </summary>
		private global::System.Boolean isOutputDirectoryTrackingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsOutputDirectoryTracking domain property.
		/// If true, ModelEnum.OutputDirectory tracks ModelRoot.EnumOutputDirectory
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/IsOutputDirectoryTracking.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/IsOutputDirectoryTracking.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("1a498d1a-15d7-48fe-b911-17b1028da5f7")]
		public global::System.Boolean IsOutputDirectoryTracking
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isOutputDirectoryTrackingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsOutputDirectoryTrackingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.IsOutputDirectoryTracking domain property.
		/// </summary>
		internal sealed partial class IsOutputDirectoryTrackingPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.Boolean>
		{
			private IsOutputDirectoryTrackingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.IsOutputDirectoryTracking domain property value handler.
			/// </summary>
			public static readonly IsOutputDirectoryTrackingPropertyHandler Instance = new IsOutputDirectoryTrackingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.IsOutputDirectoryTracking domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsOutputDirectoryTrackingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isOutputDirectoryTrackingPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isOutputDirectoryTrackingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GlyphType domain property code
		
		/// <summary>
		/// GlyphType domain property Id.
		/// </summary>
		public static readonly global::System.Guid GlyphTypeDomainPropertyId = new global::System.Guid(0xb643f6b2, 0xd807, 0x4318, 0xa2, 0x91, 0x42, 0x4b, 0x74, 0x89, 0x3f, 0x3c);
		
		/// <summary>
		/// Gets or sets the value of GlyphType domain property.
		/// Type of glyph to show on the design surface
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/GlyphType.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/GlyphType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("b643f6b2-d807-4318-a291-424b74893f3c")]
		internal global::System.String GlyphType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GlyphTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.GlyphType domain property.
		/// </summary>
		internal sealed partial class GlyphTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<ModelEnum, global::System.String>
		{
			private GlyphTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.GlyphType domain property value handler.
			/// </summary>
			public static readonly GlyphTypePropertyHandler Instance = new GlyphTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.GlyphType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GlyphTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for GlyphType because its Kind is
				// set to Calculated. Please provide the GetGlyphTypeValue()
				// method on the domain class.
				return element.GetGlyphTypeValue();
			}
		
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xe0146bec, 0x7ec5, 0x4bba, 0xad, 0x7b, 0x6c, 0x30, 0x5a, 0x42, 0x1c, 0x0c);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Detailed code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Description.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Description.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Description.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("e0146bec-7ec5-4bba-ad7b-6c305a421c0c")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x12ea7154, 0xbe17, 0x4707, 0xac, 0x96, 0xeb, 0x1f, 0x8f, 0x20, 0x29, 0xce);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Brief code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Summary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Summary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/Summary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("12ea7154-be17-4707-ac96-eb1f8f2029ce")]
		public global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.summaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0xd4b2ab6e, 0x54f5, 0x4b70, 0x94, 0xb0, 0x40, 0x30, 0x25, 0xb0, 0x15, 0x41);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Any custom attributes to be generated for this element. Will be passed through
		/// as entered.
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/CustomAttributes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/CustomAttributes.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/CustomAttributes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d4b2ab6e-54f5-4b70-94b0-403025b01541")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GenerateCode domain property code
		
		/// <summary>
		/// GenerateCode domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenerateCodeDomainPropertyId = new global::System.Guid(0x8ebaa1e0, 0x1528, 0x478d, 0xaa, 0x32, 0x0a, 0x2c, 0xed, 0xd8, 0x92, 0x54);
		
		/// <summary>
		/// Storage for GenerateCode
		/// </summary>
		private global::System.Boolean generateCodePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of GenerateCode domain property.
		/// If true (the default), code will be generated for this enum. If false, it is
		/// assumed to be referenced from another assembly.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnum/GenerateCode.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnum/GenerateCode.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnum/GenerateCode.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("8ebaa1e0-1528-478d-aa32-0a2cedd89254")]
		public global::System.Boolean GenerateCode
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generateCodePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenerateCodePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnum.GenerateCode domain property.
		/// </summary>
		internal sealed partial class GenerateCodePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnum, global::System.Boolean>
		{
			private GenerateCodePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnum.GenerateCode domain property value handler.
			/// </summary>
			public static readonly GenerateCodePropertyHandler Instance = new GenerateCodePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnum.GenerateCode domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenerateCodeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ModelEnum element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.generateCodePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnum element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generateCodePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// No description available
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelEnumDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelEnumDomainRoleId, value);
			}
		}
		#endregion
		#region Values opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Values.
		/// No description available
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelEnumValue> Values
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ModelEnumValue>, ModelEnumValue>(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.EnumDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.ModelEnumValue.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Sawczyn.EFDesigner.EFModel.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Sawczyn.EFDesigner.EFModel.ModelEnumValue sourceModelEnumValue1 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelEnumValue;
			if (sourceModelEnumValue1 != null)
			{
				// Create link for path ModelEnumHasValues.Values
				this.Values.Add(sourceModelEnumValue1);

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.Comment sourceComment2 = sourceElement as global::Sawczyn.EFDesigner.EFModel.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path CommentReferencesEnums.Comments
				global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.GetComments((global::Sawczyn.EFDesigner.EFModel.ModelEnum)this).Add(sourceComment2);

				// Create link for path ModelRootHasEnums.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
						// Segments 0 and 1
						global::Sawczyn.EFDesigner.EFModel.ModelRoot commentHost1 = this.ModelRoot;
						if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasEnums.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				commentHost1.Comments.Add(sourceComment2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Sawczyn.EFDesigner.EFModel.ModelEnumValue sourceModelEnumValue1 = sourceElement as global::Sawczyn.EFDesigner.EFModel.ModelEnumValue;
			if (sourceModelEnumValue1 != null)
			{
				// Delete link for path ModelEnumHasValues.Values
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelEnum)this, sourceModelEnumValue1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.EnumDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.ValueDomainRoleId);
				}

				return;
			}
				
			global::Sawczyn.EFDesigner.EFModel.Comment sourceComment2 = sourceElement as global::Sawczyn.EFDesigner.EFModel.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path CommentReferencesEnums.Comments
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.GetLinks(sourceComment2, (global::Sawczyn.EFDesigner.EFModel.ModelEnum)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.ModelEnumDomainRoleId, global::Sawczyn.EFDesigner.EFModel.CommentReferencesEnums.CommentDomainRoleId);
				}

				// Delete link for path ModelRootHasEnums.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
					// Segments 0 and 1
					global::Sawczyn.EFDesigner.EFModel.ModelRoot commentHost1 = this.ModelRoot;
					if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasEnums.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.GetLinks((global::Sawczyn.EFDesigner.EFModel.ModelRoot)commentHost1, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.ModelRootDomainRoleId, global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass ModelEnumValue
	/// Represents a value in a C# enumeration
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("89938de9-60f8-472a-9507-f7c7de18a511")]
	public partial class ModelEnumValue : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelEnumValue domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x89938de9, 0x60f8, 0x472a, 0x95, 0x07, 0xf7, 0xc7, 0xde, 0x18, 0xa5, 0x11);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelEnumValue(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelEnumValue(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf67322ba, 0x10ef, 0x44d8, 0xbd, 0x5f, 0xb5, 0x49, 0x55, 0xcb, 0x70, 0xff);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Name.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Name.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Name.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f67322ba-10ef-44d8-bd5f-b54955cb70ff")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnumValue.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnumValue, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnumValue.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnumValue.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnumValue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x23fd110b, 0xaff0, 0x4abd, 0x87, 0xf6, 0xc3, 0x8a, 0xb7, 0xba, 0x3f, 0x19);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// Optional value for this enum element. Must be in the range of the enum's
		/// ValueType
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Value.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Value.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Value.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("23fd110b-aff0-4abd-87f6-c38ab7ba3f19")]
		public global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnumValue.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnumValue, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnumValue.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnumValue.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnumValue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x295765ec, 0x8896, 0x4a75, 0xb4, 0xf6, 0xa9, 0xb5, 0xf6, 0xc6, 0x63, 0xcd);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Detailed code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Description.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Description.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Description.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("295765ec-8896-4a75-b4f6-a9b5f6c663cd")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnumValue.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnumValue, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnumValue.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnumValue.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnumValue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x4eec932a, 0x9148, 0x4d3c, 0x9f, 0x29, 0x35, 0xd8, 0xdb, 0xd1, 0x38, 0x44);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Brief code documentation
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Summary.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Summary.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/Summary.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4eec932a-9148-4d3c-9f29-35d8dbd13844")]
		public global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnumValue.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnumValue, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnumValue.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnumValue.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.summaryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnumValue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CustomAttributes domain property code
		
		/// <summary>
		/// CustomAttributes domain property Id.
		/// </summary>
		public static readonly global::System.Guid CustomAttributesDomainPropertyId = new global::System.Guid(0xf01f16bc, 0x6d9b, 0x4b19, 0xad, 0x24, 0x18, 0x2b, 0x32, 0x37, 0x99, 0x61);
		
		/// <summary>
		/// Storage for CustomAttributes
		/// </summary>
		private global::System.String customAttributesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CustomAttributes domain property.
		/// Any custom attributes to be generated for this element. Will be passed through
		/// as entered.
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/CustomAttributes.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/CustomAttributes.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/CustomAttributes.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f01f16bc-6d9b-4b19-ad24-182b32379961")]
		public global::System.String CustomAttributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return customAttributesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CustomAttributesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnumValue.CustomAttributes domain property.
		/// </summary>
		internal sealed partial class CustomAttributesPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnumValue, global::System.String>
		{
			private CustomAttributesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnumValue.CustomAttributes domain property value handler.
			/// </summary>
			public static readonly CustomAttributesPropertyHandler Instance = new CustomAttributesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnumValue.CustomAttributes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CustomAttributesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.customAttributesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnumValue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.customAttributesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DisplayText domain property code
		
		/// <summary>
		/// DisplayText domain property Id.
		/// </summary>
		public static readonly global::System.Guid DisplayTextDomainPropertyId = new global::System.Guid(0xc776a259, 0x4e87, 0x42d3, 0xad, 0xe8, 0xa6, 0x17, 0x00, 0x87, 0xc1, 0x1b);
		
		/// <summary>
		/// Storage for DisplayText
		/// </summary>
		private global::System.String displayTextPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DisplayText domain property.
		/// Text for [Display(Name="<text>")] attribute
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/DisplayText.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/DisplayText.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelEnumValue/DisplayText.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c776a259-4e87-42d3-ade8-a6170087c11b")]
		public global::System.String DisplayText
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return displayTextPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DisplayTextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelEnumValue.DisplayText domain property.
		/// </summary>
		internal sealed partial class DisplayTextPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelEnumValue, global::System.String>
		{
			private DisplayTextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelEnumValue.DisplayText domain property value handler.
			/// </summary>
			public static readonly DisplayTextPropertyHandler Instance = new DisplayTextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelEnumValue.DisplayText domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DisplayTextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelEnumValue element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.displayTextPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelEnumValue element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.displayTextPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Enum opposite domain role accessor
		/// <summary>
		/// Gets or sets Enum.
		/// No description available
		/// </summary>
		public virtual ModelEnum Enum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.ValueDomainRoleId) as ModelEnum;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.ValueDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass DesignElement
	/// Description for Sawczyn.EFDesigner.EFModel.DesignElement
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.DesignElement.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DesignElement.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("460f3d41-02c2-41dd-8fd3-8286e400e6f1")]
	public abstract partial class DesignElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DesignElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x460f3d41, 0x02c2, 0x41dd, 0x8f, 0xd3, 0x82, 0x86, 0xe4, 0x00, 0xe6, 0xf1);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected DesignElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Comments.
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DesignElement
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::ReadOnlyLinkedElementCollection<Comment>, Comment>(global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects.DesignElementDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass ModelDiagramData
	/// Represents a viewable model diagram
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelDiagramData.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelDiagramData.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9698525f-c2b0-4283-99f4-6660e10fa082")]
	public partial class ModelDiagramData : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelDiagramData domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9698525f, 0xc2b0, 0x4283, 0x99, 0xf4, 0x66, 0x60, 0xe1, 0x0f, 0xa0, 0x82);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelDiagramData(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelDiagramData(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x202e04fe, 0xde2a, 0x4030, 0x9e, 0x96, 0x0a, 0x7e, 0x9d, 0xf6, 0x13, 0xab);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Diagram name
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ModelDiagramData/Name.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ModelDiagramData/Name.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName(typeof(ModelDiagramDataNameProvider))]
		[DslModeling::DomainObjectId("202e04fe-de2a-4030-9e96-0a7e9df613ab")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelDiagramData.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelDiagramData, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelDiagramData.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelDiagramData.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelDiagramData element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelDiagramData element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.ModelDiagramData
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.ModelDiagramDataDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.ModelDiagramDataDomainRoleId, value);
			}
		}
		#endregion
	}
}

namespace Sawczyn.EFDesigner.EFModel
{
   /// <summary>
   /// Current designer version
   /// </summary>
	partial class ModelRoot
	{
		public const string DSLVersion = "4.1.2.0";
	}
}
