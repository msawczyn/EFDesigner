//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// Double-derived base class for DomainClass ClassShape
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassShape.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassShape.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8055f08f-3d3a-435f-8b47-7afcd0e051bd")]
	public abstract partial class ClassShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ClassShape.
		/// </summary>
		public static DslDiagrams::Decorator FindClassShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.3);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Width = 0.01F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 0, 122, 204);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Text brush settings for this shape.
			DslDiagrams::BrushSettings textBrush = new DslDiagrams::BrushSettings();
			textBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, textBrush);
		
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property OutlineColor.
		/// </summary>
		private global::System.Drawing.Color GetOutlineColorValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineColor.
		/// </summary>
		private void SetOutlineColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.Color = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromArgb(255, 0, 122, 204);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private global::System.Drawing.Drawing2D.DashStyle GetOutlineDashStyleValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.DashStyle))
			{
				return settings.DashStyle;
			}
			return global::System.Drawing.Drawing2D.DashStyle.Solid;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private void SetOutlineDashStyleValue(global::System.Drawing.Drawing2D.DashStyle newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.DashStyle = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private float GetOutlineThicknessValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Width))
			{
				return settings.Width;
			}
			return 0.01f;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private void SetOutlineThicknessValue(float newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.Width = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("Name");
			field1.DefaultText = global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("ClassShapeNameDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field1);
			
			DslDiagrams::ChevronButtonField field2 = new DslDiagrams::ChevronButtonField("ExpandCollapse");
			field2.DefaultSelectable = true;
			field2.DefaultFocusable = true;
			shapeFields.Add(field2);
			
			DslDiagrams::ImageField field3 = new DslDiagrams::ImageField("EntityGlyph");
			field3.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeEntityGlyphDefaultImage"));
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("AbstractEntityGlyph");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeAbstractEntityGlyphDefaultImage"));
			shapeFields.Add(field4);
			
			DslDiagrams::ImageField field5 = new DslDiagrams::ImageField("WarningGlyph");
			field5.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeWarningGlyphDefaultImage"));
			shapeFields.Add(field5);
			
			DslDiagrams::ImageField field6 = new DslDiagrams::ImageField("TransientGlyph");
			field6.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeTransientGlyphDefaultImage"));
			shapeFields.Add(field6);
			
			DslDiagrams::ImageField field7 = new DslDiagrams::ImageField("NoGenGlyph");
			field7.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeNoGenGlyphDefaultImage"));
			shapeFields.Add(field7);
			
			DslDiagrams::ImageField field8 = new DslDiagrams::ImageField("DictionaryGlyph");
			field8.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeDictionaryGlyphDefaultImage"));
			shapeFields.Add(field8);
			
			DslDiagrams::ImageField field9 = new DslDiagrams::ImageField("SQLGlyph");
			field9.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeSQLGlyphDefaultImage"));
			shapeFields.Add(field9);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "Name");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapse");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field2, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "EntityGlyph");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "AbstractEntityGlyph");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator4);
				
			DslDiagrams::ShapeField field5 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "WarningGlyph");
			DslDiagrams::Decorator decorator5 = new DslDiagrams::ShapeDecorator(field5, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator5);
				
			DslDiagrams::ShapeField field6 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "TransientGlyph");
			DslDiagrams::Decorator decorator6 = new DslDiagrams::ShapeDecorator(field6, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator6);
				
			DslDiagrams::ShapeField field7 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NoGenGlyph");
			DslDiagrams::Decorator decorator7 = new DslDiagrams::ShapeDecorator(field7, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.01, 0));
			decorators.Add(decorator7);
				
			DslDiagrams::ShapeField field8 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "DictionaryGlyph");
			DslDiagrams::Decorator decorator8 = new DslDiagrams::ShapeDecorator(field8, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator8);
				
			DslDiagrams::ShapeField field9 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "SQLGlyph");
			DslDiagrams::Decorator decorator9 = new DslDiagrams::ShapeDecorator(field9, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator9);
				
			DslDiagrams::ImageField field10 = new DslDiagrams::ImageField("Interface");
			field10.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("ClassShapeInterfaceDefaultImage"));
			DslDiagrams::Decorator decorator10 = new DslDiagrams::ShapeDecorator(field10, DslDiagrams::ShapeDecoratorPosition.OuterTopLeft, new DslDiagrams::PointD(0.2, 0.1));
			decorators.Add(decorator10);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[3+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("ClassShapeAttributesCompartmentTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("AttributesCompartment", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Transparent), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
				{
					string title = global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("ClassShapeAssociationsCompartmentTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("AssociationsCompartment", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Transparent), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+1] = descriptor;
				}
				{
					string title = global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("ClassShapeSourcesCompartmentTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("SourcesCompartment", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Transparent), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+2] = descriptor;
				}
			}
			
			return ClassShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::Sawczyn.EFDesigner.EFModel.ModelClass));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[3+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromModelClassForAttributesCompartment(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"AttributesCompartment", 
																				global::Sawczyn.EFDesigner.EFModel.ModelAttribute.NameDomainPropertyId, 
																				global::Sawczyn.EFDesigner.EFModel.ModelAttribute.DomainClassId, 
																				GetElementsFromModelClassForAttributesCompartment,
																				null,
																				GetDisplayPropertyFromModelClassForAttributesCompartment,	// This method needs to be provided. Please see comment-block above.
																				null);
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromModelClassForAssociationsCompartment(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+1] = new DslDiagrams::ElementListCompartmentMapping(
																				"AssociationsCompartment", 
																				global::Sawczyn.EFDesigner.EFModel.ModelClass.NameDomainPropertyId, 
																				global::Sawczyn.EFDesigner.EFModel.Association.DomainClassId, 
																				GetElementsFromModelClassForAssociationsCompartment,
																				GetPropertyElementFromModelClassForAssociationsCompartment,	// This method needs to be provided. Please see comment-block above.
																				GetDisplayPropertyFromModelClassForAssociationsCompartment,	// This method needs to be provided. Please see comment-block above.
																				null);
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromModelClassForSourcesCompartment(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+2] = new DslDiagrams::ElementListCompartmentMapping(
																				"SourcesCompartment", 
																				global::Sawczyn.EFDesigner.EFModel.ModelClass.NameDomainPropertyId, 
																				global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.DomainClassId, 
																				GetElementsFromModelClassForSourcesCompartment,
																				GetPropertyElementFromModelClassForSourcesCompartment,	// This method needs to be provided. Please see comment-block above.
																				GetDisplayPropertyFromModelClassForSourcesCompartment,	// This method needs to be provided. Please see comment-block above.
																				null);
					compartmentMappings.Add(typeof(global::Sawczyn.EFDesigner.EFModel.ModelClass), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromModelClassForAttributesCompartment(DslModeling::ModelElement rootElement)
			{
				global::Sawczyn.EFDesigner.EFModel.ModelClass root = (global::Sawczyn.EFDesigner.EFModel.ModelClass)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Sawczyn.EFDesigner.EFModel.ModelAttribute> result = root.Attributes;
				return result;
			}
			internal static global::System.Collections.IList GetElementsFromModelClassForAssociationsCompartment(DslModeling::ModelElement rootElement)
			{
				global::Sawczyn.EFDesigner.EFModel.ModelClass root = (global::Sawczyn.EFDesigner.EFModel.ModelClass)rootElement;
					// Segment 0
					global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.Association> result = global::Sawczyn.EFDesigner.EFModel.Association.GetLinksToTargets(root);
				return result;
			}
			internal static DslModeling::ModelElement GetPropertyElementFromModelClassForAssociationsCompartment(DslModeling::ModelElement element)
			{
				global::Sawczyn.EFDesigner.EFModel.Association root = (global::Sawczyn.EFDesigner.EFModel.Association)element;
					// Segment 0
					global::Sawczyn.EFDesigner.EFModel.ModelClass result = root.Target;
					if ( result == null ) return null;
				return result;
			}
			internal static global::System.Collections.IList GetElementsFromModelClassForSourcesCompartment(DslModeling::ModelElement rootElement)
			{
				global::Sawczyn.EFDesigner.EFModel.ModelClass root = (global::Sawczyn.EFDesigner.EFModel.ModelClass)rootElement;
					// Segment 0
					global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation> result = global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.GetLinksToBidirectionalSources(root);
				return result;
			}
			internal static DslModeling::ModelElement GetPropertyElementFromModelClassForSourcesCompartment(DslModeling::ModelElement element)
			{
				global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation root = (global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)element;
					// Segment 0
					global::Sawczyn.EFDesigner.EFModel.ModelClass result = root.BidirectionalSource;
					if ( result == null ) return null;
				return result;
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8055f08f, 0x3d3a, 0x435f, 0x8b, 0x47, 0x7a, 0xfc, 0xd0, 0xe0, 0x51, 0xbd);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ClassShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0x77fd1ed0, 0x30ca, 0x4c62, 0x8d, 0x29, 0xbf, 0xc2, 0x3c, 0xe7, 0x8a, 0x18);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Fill color for shape when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassShape/FillColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ClassShape/FillColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassShape/FillColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("77fd1ed0-30ca-4c62-8d29-bfc23ce78a18")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ClassShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0xa1bc67d8, 0x5957, 0x4fd3, 0xac, 0x57, 0xe3, 0x20, 0xdb, 0x11, 0xbf, 0xe2);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Color of the shape's text when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassShape/TextColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ClassShape/TextColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassShape/TextColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("a1bc67d8-5957-4fd3-ac57-e320db11bfe2")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ClassShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineColor domain property code
		
		/// <summary>
		/// OutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineColorDomainPropertyId = new global::System.Guid(0xb60bda34, 0x6c70, 0x4825, 0xaf, 0x60, 0x48, 0x2a, 0x91, 0x12, 0xbd, 0xf8);
		
		/// <summary>
		/// Gets or sets the value of OutlineColor domain property.
		/// Color of the shape's outline when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b60bda34-6c70-4825-af60-482a9112bdf8")]
		public global::System.Drawing.Color OutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassShape.OutlineColor domain property.
		/// </summary>
		internal sealed partial class OutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassShapeBase, global::System.Drawing.Color>
		{
			private OutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassShape.OutlineColor domain property value handler.
			/// </summary>
			public static readonly OutlineColorPropertyHandler Instance = new OutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassShape.OutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(ClassShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineColor because its Kind is
				// set to CustomStorage. Please provide the GetOutlineColorValue()
				// method on the domain class.
				return element.GetOutlineColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineColor because its Kind is
					// set to CustomStorage. Please provide the SetOutlineColorValue()
					// method on the domain class.
					element.SetOutlineColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineDashStyle domain property code
		
		/// <summary>
		/// OutlineDashStyle domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineDashStyleDomainPropertyId = new global::System.Guid(0x88235240, 0xd714, 0x4315, 0x9f, 0x26, 0x54, 0xff, 0x84, 0x06, 0xa6, 0xb6);
		
		/// <summary>
		/// Gets or sets the value of OutlineDashStyle domain property.
		/// Line style for the shape's outline
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineDashStyle.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineDashStyle.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineDashStyle.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("88235240-d714-4315-9f26-54ff8406a6b6")]
		public global::System.Drawing.Drawing2D.DashStyle OutlineDashStyle
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineDashStylePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineDashStylePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassShape.OutlineDashStyle domain property.
		/// </summary>
		internal sealed partial class OutlineDashStylePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassShapeBase, global::System.Drawing.Drawing2D.DashStyle>
		{
			private OutlineDashStylePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassShape.OutlineDashStyle domain property value handler.
			/// </summary>
			public static readonly OutlineDashStylePropertyHandler Instance = new OutlineDashStylePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassShape.OutlineDashStyle domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineDashStyleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.DashStyle GetValue(ClassShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineDashStyle because its Kind is
				// set to CustomStorage. Please provide the GetOutlineDashStyleValue()
				// method on the domain class.
				return element.GetOutlineDashStyleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassShapeBase element, global::System.Drawing.Drawing2D.DashStyle newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.DashStyle oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineDashStyle because its Kind is
					// set to CustomStorage. Please provide the SetOutlineDashStyleValue()
					// method on the domain class.
					element.SetOutlineDashStyleValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region Visible domain property code
		
		/// <summary>
		/// Visible domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisibleDomainPropertyId = new global::System.Guid(0x2e283376, 0x63d0, 0x454e, 0x9e, 0x56, 0xfc, 0x6d, 0x8c, 0xb5, 0x66, 0x89);
		
		/// <summary>
		/// Gets or sets the value of Visible domain property.
		/// If true, shape is visible.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassShape/Visible.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ClassShape/Visible.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassShape/Visible.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("2e283376-63d0-454e-9e56-fc6d8cb56689")]
		public global::System.Boolean Visible
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return VisiblePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisiblePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassShape.Visible domain property.
		/// </summary>
		internal sealed partial class VisiblePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassShapeBase, global::System.Boolean>
		{
			private VisiblePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassShape.Visible domain property value handler.
			/// </summary>
			public static readonly VisiblePropertyHandler Instance = new VisiblePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassShape.Visible domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisibleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ClassShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Visible because its Kind is
				// set to CustomStorage. Please provide the GetVisibleValue()
				// method on the domain class.
				return element.GetVisibleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassShapeBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Visible because its Kind is
					// set to CustomStorage. Please provide the SetVisibleValue()
					// method on the domain class.
					element.SetVisibleValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineThickness domain property code
		
		/// <summary>
		/// OutlineThickness domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineThicknessDomainPropertyId = new global::System.Guid(0x18455bd8, 0x9cd4, 0x4566, 0x98, 0xde, 0x79, 0x46, 0x29, 0xf3, 0x08, 0x6e);
		
		/// <summary>
		/// Gets or sets the value of OutlineThickness domain property.
		/// Thickness, in inches, of the shapes's outline
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineThickness.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineThickness.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ClassShape/OutlineThickness.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("18455bd8-9cd4-4566-98de-794629f3086e")]
		public global::System.Single OutlineThickness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineThicknessPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineThicknessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassShape.OutlineThickness domain property.
		/// </summary>
		internal sealed partial class OutlineThicknessPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassShapeBase, global::System.Single>
		{
			private OutlineThicknessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassShape.OutlineThickness domain property value handler.
			/// </summary>
			public static readonly OutlineThicknessPropertyHandler Instance = new OutlineThicknessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassShape.OutlineThickness domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineThicknessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Single GetValue(ClassShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineThickness because its Kind is
				// set to CustomStorage. Please provide the GetOutlineThicknessValue()
				// method on the domain class.
				return element.GetOutlineThicknessValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassShapeBase element, global::System.Single newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Single oldValue = GetValue(element);
				// float type precision is guaranteed only to 7th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-7)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineThickness because its Kind is
					// set to CustomStorage. Please provide the SetOutlineThicknessValue()
					// method on the domain class.
					element.SetOutlineThicknessValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass ClassShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ClassShape : ClassShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// Double-derived base class for DomainClass CommentBoxShape
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ac82cb66-4d3d-46ac-a7e2-b7f0cd67a73f")]
	public abstract partial class CommentBoxShapeBase : DslDiagrams::NodeShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CommentBoxShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCommentBoxShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.3);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromArgb(255, 204, 204, 102);
			outlinePen.Width = 0.01F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromArgb(255, 255, 255, 204);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.ForwardDiagonal;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property OutlineColor.
		/// </summary>
		private global::System.Drawing.Color GetOutlineColorValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromArgb(255, 204, 204, 102);
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineColor.
		/// </summary>
		private void SetOutlineColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.Color = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromArgb(255, 255, 255, 204);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private global::System.Drawing.Drawing2D.DashStyle GetOutlineDashStyleValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.DashStyle))
			{
				return settings.DashStyle;
			}
			return global::System.Drawing.Drawing2D.DashStyle.Solid;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private void SetOutlineDashStyleValue(global::System.Drawing.Drawing2D.DashStyle newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.DashStyle = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private float GetOutlineThicknessValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Width))
			{
				return settings.Width;
			}
			return 0.01f;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private void SetOutlineThicknessValue(float newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.Width = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("Comment");
			field1.DefaultText = string.Empty;
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field1);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "Comment");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.Center, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// CommentBoxShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xac82cb66, 0x4d3d, 0x46ac, 0xa7, 0xe2, 0xb7, 0xf0, 0xcd, 0x67, 0xa7, 0x3f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected CommentBoxShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0x276258af, 0x085d, 0x4201, 0xb3, 0xe8, 0xfb, 0x26, 0xa2, 0xd6, 0xef, 0xc4);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Fill color for the shape when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/FillColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/FillColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/FillColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("276258af-085d-4201-b3e8-fb26a2d6efc4")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommentBoxShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<CommentBoxShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommentBoxShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommentBoxShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(CommentBoxShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommentBoxShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineColor domain property code
		
		/// <summary>
		/// OutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineColorDomainPropertyId = new global::System.Guid(0xb83f02a5, 0x312b, 0x4fa4, 0x86, 0x2a, 0x93, 0xe7, 0xd5, 0x17, 0x66, 0xe5);
		
		/// <summary>
		/// Gets or sets the value of OutlineColor domain property.
		/// Color of the shape's outline when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b83f02a5-312b-4fa4-862a-93e7d51766e5")]
		public global::System.Drawing.Color OutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommentBoxShape.OutlineColor domain property.
		/// </summary>
		internal sealed partial class OutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<CommentBoxShapeBase, global::System.Drawing.Color>
		{
			private OutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommentBoxShape.OutlineColor domain property value handler.
			/// </summary>
			public static readonly OutlineColorPropertyHandler Instance = new OutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommentBoxShape.OutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(CommentBoxShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineColor because its Kind is
				// set to CustomStorage. Please provide the GetOutlineColorValue()
				// method on the domain class.
				return element.GetOutlineColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommentBoxShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineColor because its Kind is
					// set to CustomStorage. Please provide the SetOutlineColorValue()
					// method on the domain class.
					element.SetOutlineColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0xba60eaf8, 0xceb3, 0x4542, 0xa8, 0x9e, 0x65, 0xf6, 0x9b, 0x9d, 0xcb, 0xc3);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Color of the shape's text when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/TextColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/TextColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/TextColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("ba60eaf8-ceb3-4542-a89e-65f69b9dcbc3")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommentBoxShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<CommentBoxShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommentBoxShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommentBoxShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(CommentBoxShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommentBoxShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineDashStyle domain property code
		
		/// <summary>
		/// OutlineDashStyle domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineDashStyleDomainPropertyId = new global::System.Guid(0xe3459214, 0x9d50, 0x4fe5, 0xb9, 0x9f, 0xcd, 0x18, 0x89, 0x89, 0x85, 0x47);
		
		/// <summary>
		/// Gets or sets the value of OutlineDashStyle domain property.
		/// Line style for the shape's outline
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineDashStyle.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineDashStyle.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineDashStyle.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e3459214-9d50-4fe5-b99f-cd1889898547")]
		public global::System.Drawing.Drawing2D.DashStyle OutlineDashStyle
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineDashStylePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineDashStylePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommentBoxShape.OutlineDashStyle domain property.
		/// </summary>
		internal sealed partial class OutlineDashStylePropertyHandler : DslModeling::DomainPropertyValueHandler<CommentBoxShapeBase, global::System.Drawing.Drawing2D.DashStyle>
		{
			private OutlineDashStylePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommentBoxShape.OutlineDashStyle domain property value handler.
			/// </summary>
			public static readonly OutlineDashStylePropertyHandler Instance = new OutlineDashStylePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommentBoxShape.OutlineDashStyle domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineDashStyleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.DashStyle GetValue(CommentBoxShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineDashStyle because its Kind is
				// set to CustomStorage. Please provide the GetOutlineDashStyleValue()
				// method on the domain class.
				return element.GetOutlineDashStyleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommentBoxShapeBase element, global::System.Drawing.Drawing2D.DashStyle newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.DashStyle oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineDashStyle because its Kind is
					// set to CustomStorage. Please provide the SetOutlineDashStyleValue()
					// method on the domain class.
					element.SetOutlineDashStyleValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineThickness domain property code
		
		/// <summary>
		/// OutlineThickness domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineThicknessDomainPropertyId = new global::System.Guid(0x47b0cf2f, 0x0712, 0x480f, 0xbd, 0xf7, 0xd2, 0x7c, 0xfb, 0xd8, 0xdb, 0x3e);
		
		/// <summary>
		/// Gets or sets the value of OutlineThickness domain property.
		/// Thickness, in inches, of the shapes's outline
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineThickness.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineThickness.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/OutlineThickness.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("47b0cf2f-0712-480f-bdf7-d27cfbd8db3e")]
		public global::System.Single OutlineThickness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineThicknessPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineThicknessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommentBoxShape.OutlineThickness domain property.
		/// </summary>
		internal sealed partial class OutlineThicknessPropertyHandler : DslModeling::DomainPropertyValueHandler<CommentBoxShapeBase, global::System.Single>
		{
			private OutlineThicknessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommentBoxShape.OutlineThickness domain property value handler.
			/// </summary>
			public static readonly OutlineThicknessPropertyHandler Instance = new OutlineThicknessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommentBoxShape.OutlineThickness domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineThicknessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Single GetValue(CommentBoxShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineThickness because its Kind is
				// set to CustomStorage. Please provide the GetOutlineThicknessValue()
				// method on the domain class.
				return element.GetOutlineThicknessValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommentBoxShapeBase element, global::System.Single newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Single oldValue = GetValue(element);
				// float type precision is guaranteed only to 7th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-7)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineThickness because its Kind is
					// set to CustomStorage. Please provide the SetOutlineThicknessValue()
					// method on the domain class.
					element.SetOutlineThicknessValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region Visible domain property code
		
		/// <summary>
		/// Visible domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisibleDomainPropertyId = new global::System.Guid(0x8604c11f, 0x3053, 0x4b68, 0x9c, 0x10, 0x72, 0x2a, 0x0a, 0xaa, 0x3b, 0x1f);
		
		/// <summary>
		/// Gets or sets the value of Visible domain property.
		/// If true, shape is visible.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/Visible.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/Visible.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CommentBoxShape/Visible.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("8604c11f-3053-4b68-9c10-722a0aaa3b1f")]
		public global::System.Boolean Visible
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return VisiblePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisiblePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommentBoxShape.Visible domain property.
		/// </summary>
		internal sealed partial class VisiblePropertyHandler : DslModeling::DomainPropertyValueHandler<CommentBoxShapeBase, global::System.Boolean>
		{
			private VisiblePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommentBoxShape.Visible domain property value handler.
			/// </summary>
			public static readonly VisiblePropertyHandler Instance = new VisiblePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommentBoxShape.Visible domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisibleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CommentBoxShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Visible because its Kind is
				// set to CustomStorage. Please provide the GetVisibleValue()
				// method on the domain class.
				return element.GetVisibleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommentBoxShapeBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Visible because its Kind is
					// set to CustomStorage. Please provide the SetVisibleValue()
					// method on the domain class.
					element.SetVisibleValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass CommentBoxShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class CommentBoxShape : CommentBoxShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommentBoxShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommentBoxShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// Double-derived base class for DomainClass EnumShape
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EnumShape.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumShape.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("de514c36-0966-422a-9511-997b89ac7a56")]
	public abstract partial class EnumShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with EnumShape.
		/// </summary>
		public static DslDiagrams::Decorator FindEnumShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.3);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Width = 0.01F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Fill brush settings for this shape.
			DslDiagrams::BrushSettings backgroundBrush = new DslDiagrams::BrushSettings();
			backgroundBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Gray);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, backgroundBrush);
		
			// Text brush settings for this shape.
			DslDiagrams::BrushSettings textBrush = new DslDiagrams::BrushSettings();
			textBrush.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
			classStyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, textBrush);
		
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return false;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property OutlineColor.
		/// </summary>
		private global::System.Drawing.Color GetOutlineColorValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineColor.
		/// </summary>
		private void SetOutlineColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.Color = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Gray);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeText);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeText, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private global::System.Drawing.Drawing2D.DashStyle GetOutlineDashStyleValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.DashStyle))
			{
				return settings.DashStyle;
			}
			return global::System.Drawing.Drawing2D.DashStyle.Solid;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private void SetOutlineDashStyleValue(global::System.Drawing.Drawing2D.DashStyle newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.DashStyle = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private float GetOutlineThicknessValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Width))
			{
				return settings.Width;
			}
			return 0.01f;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private void SetOutlineThicknessValue(float newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.Width = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("Name");
			field1.DefaultText = global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("EnumShapeNameDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field1);
			
			DslDiagrams::ChevronButtonField field2 = new DslDiagrams::ChevronButtonField("ExpandCollapse");
			field2.DefaultSelectable = true;
			field2.DefaultFocusable = true;
			shapeFields.Add(field2);
			
			DslDiagrams::ImageField field3 = new DslDiagrams::ImageField("EnumGlyph");
			field3.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("EnumShapeEnumGlyphDefaultImage"));
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("WarningGlyph");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("EnumShapeWarningGlyphDefaultImage"));
			shapeFields.Add(field4);
			
			DslDiagrams::ImageField field5 = new DslDiagrams::ImageField("NoGenGlyph");
			field5.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetObject("EnumShapeNoGenGlyphDefaultImage"));
			shapeFields.Add(field5);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "Name");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapse");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field2, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "EnumGlyph");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ShapeDecorator(field3, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "WarningGlyph");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator4);
				
			DslDiagrams::ShapeField field5 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "NoGenGlyph");
			DslDiagrams::Decorator decorator5 = new DslDiagrams::ShapeDecorator(field5, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(16, 0));
			decorators.Add(decorator5);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[1+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("EnumShapeValuesCompartmentTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("ValuesCompartment", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.LightGray), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Transparent), false,
						null, null,
						false);
					descriptor.ItemTextColor = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.IndianRed);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
			}
			
			return EnumShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnum));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[1+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					////////
					// CompartmentMap.DisplaysCustomString == true
					// Please provide the following method to get the string to be
					// displayed in the compartment list: 
					//
					// static string GetDisplayPropertyFromModelEnumForValuesCompartment(DslModeling::ModelElement element)
					////////
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"ValuesCompartment", 
																				global::Sawczyn.EFDesigner.EFModel.ModelEnumValue.NameDomainPropertyId, 
																				global::Sawczyn.EFDesigner.EFModel.ModelEnumValue.DomainClassId, 
																				GetElementsFromModelEnumForValuesCompartment,
																				null,
																				GetDisplayPropertyFromModelEnumForValuesCompartment,	// This method needs to be provided. Please see comment-block above.
																				null);
					compartmentMappings.Add(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnum), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromModelEnumForValuesCompartment(DslModeling::ModelElement rootElement)
			{
				global::Sawczyn.EFDesigner.EFModel.ModelEnum root = (global::Sawczyn.EFDesigner.EFModel.ModelEnum)rootElement;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::Sawczyn.EFDesigner.EFModel.ModelEnumValue> result = root.Values;
				return result;
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// EnumShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde514c36, 0x0966, 0x422a, 0x95, 0x11, 0x99, 0x7b, 0x89, 0xac, 0x7a, 0x56);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected EnumShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0xb4b78660, 0x37fd, 0x48ee, 0x90, 0xc1, 0x4a, 0x33, 0x8c, 0x5d, 0xb7, 0x91);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Fill color for shape when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EnumShape/FillColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.EnumShape/FillColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumShape/FillColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("b4b78660-37fd-48ee-90c1-4a338c5db791")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(EnumShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0x764aa9b3, 0xeb39, 0x4bc7, 0x93, 0x71, 0x0e, 0x1e, 0xc8, 0x0f, 0x3c, 0xff);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// Color of the shape's text when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EnumShape/TextColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.EnumShape/TextColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumShape/TextColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("764aa9b3-eb39-4bc7-9371-0e1ec80f3cff")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumShape.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumShapeBase, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumShape.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumShape.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(EnumShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineColor domain property code
		
		/// <summary>
		/// OutlineColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineColorDomainPropertyId = new global::System.Guid(0xe8ae18fb, 0xd462, 0x4a71, 0x8b, 0x57, 0x00, 0xff, 0x03, 0xbb, 0x55, 0x06);
		
		/// <summary>
		/// Gets or sets the value of OutlineColor domain property.
		/// Color of the shape's outline when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineColor.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e8ae18fb-d462-4a71-8b57-00ff03bb5506")]
		public global::System.Drawing.Color OutlineColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumShape.OutlineColor domain property.
		/// </summary>
		internal sealed partial class OutlineColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumShapeBase, global::System.Drawing.Color>
		{
			private OutlineColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumShape.OutlineColor domain property value handler.
			/// </summary>
			public static readonly OutlineColorPropertyHandler Instance = new OutlineColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumShape.OutlineColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(EnumShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineColor because its Kind is
				// set to CustomStorage. Please provide the GetOutlineColorValue()
				// method on the domain class.
				return element.GetOutlineColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineColor because its Kind is
					// set to CustomStorage. Please provide the SetOutlineColorValue()
					// method on the domain class.
					element.SetOutlineColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region Visible domain property code
		
		/// <summary>
		/// Visible domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisibleDomainPropertyId = new global::System.Guid(0x53db1f2a, 0x6349, 0x411e, 0xb2, 0x8a, 0x08, 0xa6, 0xf8, 0xed, 0x36, 0xaa);
		
		/// <summary>
		/// Gets or sets the value of Visible domain property.
		/// If true, shape is visible.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EnumShape/Visible.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.EnumShape/Visible.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumShape/Visible.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("53db1f2a-6349-411e-b28a-08a6f8ed36aa")]
		public global::System.Boolean Visible
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return VisiblePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisiblePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumShape.Visible domain property.
		/// </summary>
		internal sealed partial class VisiblePropertyHandler : DslModeling::DomainPropertyValueHandler<EnumShapeBase, global::System.Boolean>
		{
			private VisiblePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumShape.Visible domain property value handler.
			/// </summary>
			public static readonly VisiblePropertyHandler Instance = new VisiblePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumShape.Visible domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisibleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EnumShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Visible because its Kind is
				// set to CustomStorage. Please provide the GetVisibleValue()
				// method on the domain class.
				return element.GetVisibleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumShapeBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for Visible because its Kind is
					// set to CustomStorage. Please provide the SetVisibleValue()
					// method on the domain class.
					element.SetVisibleValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineThickness domain property code
		
		/// <summary>
		/// OutlineThickness domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineThicknessDomainPropertyId = new global::System.Guid(0x22d0c259, 0xc2d2, 0x4bd5, 0xa6, 0xc8, 0x5e, 0xb7, 0x87, 0x01, 0xea, 0xd0);
		
		/// <summary>
		/// Gets or sets the value of OutlineThickness domain property.
		/// Thickness, in inches, of the shapes's outline
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineThickness.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineThickness.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineThickness.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("22d0c259-c2d2-4bd5-a6c8-5eb78701ead0")]
		public global::System.Single OutlineThickness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineThicknessPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineThicknessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumShape.OutlineThickness domain property.
		/// </summary>
		internal sealed partial class OutlineThicknessPropertyHandler : DslModeling::DomainPropertyValueHandler<EnumShapeBase, global::System.Single>
		{
			private OutlineThicknessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumShape.OutlineThickness domain property value handler.
			/// </summary>
			public static readonly OutlineThicknessPropertyHandler Instance = new OutlineThicknessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumShape.OutlineThickness domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineThicknessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Single GetValue(EnumShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineThickness because its Kind is
				// set to CustomStorage. Please provide the GetOutlineThicknessValue()
				// method on the domain class.
				return element.GetOutlineThicknessValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumShapeBase element, global::System.Single newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Single oldValue = GetValue(element);
				// float type precision is guaranteed only to 7th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-7)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineThickness because its Kind is
					// set to CustomStorage. Please provide the SetOutlineThicknessValue()
					// method on the domain class.
					element.SetOutlineThicknessValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineDashStyle domain property code
		
		/// <summary>
		/// OutlineDashStyle domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineDashStyleDomainPropertyId = new global::System.Guid(0x06df5a34, 0x08ff, 0x4a03, 0xbe, 0xa5, 0x44, 0x4f, 0x2b, 0xef, 0x94, 0x54);
		
		/// <summary>
		/// Gets or sets the value of OutlineDashStyle domain property.
		/// Line style for the shape's outline
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineDashStyle.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineDashStyle.Category", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumShape/OutlineDashStyle.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("06df5a34-08ff-4a03-bea5-444f2bef9454")]
		public global::System.Drawing.Drawing2D.DashStyle OutlineDashStyle
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineDashStylePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineDashStylePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EnumShape.OutlineDashStyle domain property.
		/// </summary>
		internal sealed partial class OutlineDashStylePropertyHandler : DslModeling::DomainPropertyValueHandler<EnumShapeBase, global::System.Drawing.Drawing2D.DashStyle>
		{
			private OutlineDashStylePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EnumShape.OutlineDashStyle domain property value handler.
			/// </summary>
			public static readonly OutlineDashStylePropertyHandler Instance = new OutlineDashStylePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EnumShape.OutlineDashStyle domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineDashStyleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.DashStyle GetValue(EnumShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineDashStyle because its Kind is
				// set to CustomStorage. Please provide the GetOutlineDashStyleValue()
				// method on the domain class.
				return element.GetOutlineDashStyleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EnumShapeBase element, global::System.Drawing.Drawing2D.DashStyle newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.DashStyle oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineDashStyle because its Kind is
					// set to CustomStorage. Please provide the SetOutlineDashStyleValue()
					// method on the domain class.
					element.SetOutlineDashStyleValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass EnumShape
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class EnumShape : EnumShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EnumShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}

