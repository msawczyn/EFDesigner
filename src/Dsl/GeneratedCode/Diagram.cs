//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
using System.Linq;
using System.Collections.Generic;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Sawczyn.EFDesigner.EFModel.EFModelDiagram")]

namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainClass EFModelDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EFModelDiagram.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EFModelDiagram.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4bd5b7e6-86b6-43d2-962d-b6e87ac4690a")]
	public partial class EFModelDiagram : DslDiagrams::Diagram
	{
		#region Fixup
		
		protected internal virtual void OnSynchronized()
		{
		}
		
		#endregion
		
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
		   get
		   {
		      if (classStyleSet == null)
		      {
		         classStyleSet = CreateClassStyleSet();
		      }
		      return classStyleSet;
		   }
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
		   get
		   {
		      if (shapeFields == null)
		      {
		         shapeFields = CreateShapeFields();
		      }
		      return shapeFields;
		   }
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
		         new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		private readonly global::System.Collections.Generic.List<global::System.ComponentModel.ToolboxItemFilterAttribute> targetToolboxItemFilterAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.ToolboxItemFilterAttribute>(); // HACK : MEXEDGE
		
		protected virtual bool GetToolSupported(string toolName) // HACK : MEXEDGE
		{
		    return true;
		}
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
		   get
		   {
		        if (0 == targetToolboxItemFilterAttributes.Count) // HACK : MEXEDGE
		        {
		            targetToolboxItemFilterAttributes.AddRange(toolboxFilters);
		            foreach (var toolboxName in global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.GetToolboxNames())
		            {
		                targetToolboxItemFilterAttributes.Add(new global::System.ComponentModel.ToolboxItemFilterAttribute(toolboxName, this.GetToolSupported(toolboxName) ? global::System.ComponentModel.ToolboxItemFilterType.Require : global::System.ComponentModel.ToolboxItemFilterType.Prevent));
		            }
		        }
		        return targetToolboxItemFilterAttributes;
		   }
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
		   DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.DiagramBackground);
		   if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
		   {
		      return settings.Color;
		   }
		   return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
		   DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.DiagramBackground);
		   if(settings == null) settings = new DslDiagrams::BrushSettings();
		   settings.Color = newValue;
		   this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramBackground, settings);
		   this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetTextColorValue()
		{
		   DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.DiagramText);
		   if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
		   {
		      return settings.Color;
		   }
		   return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Black);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetTextColorValue(global::System.Drawing.Color newValue)
		{
		   DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.DiagramText);
		   if(settings == null) settings = new DslDiagrams::BrushSettings();
		   settings.Color = newValue;
		   this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.DiagramText, settings);
		   this.Invalidate();
		}
		
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
		   get
		   {
		      return true;
		   }
		}
		#endregion
		#region Compartment support
		/// <summary>
		/// Whether compartment items change events are subscribed to.
		/// </summary>
		private bool subscribedCompartmentItemsEvents;
		
		/// <summary>
		/// Subscribe to events fired when compartment items changes.
		/// </summary>
		public void SubscribeCompartmentItemsEvents()
		{
		   if (!subscribedCompartmentItemsEvents && this.Store != null)
		   {
		      subscribedCompartmentItemsEvents = true;
		      this.Store.EventManagerDirectory.ElementAdded.Add(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
		      this.Store.EventManagerDirectory.ElementDeleted.Add(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
		      this.Store.EventManagerDirectory.ElementPropertyChanged.Add(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
		      this.Store.EventManagerDirectory.RolePlayerChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
		      this.Store.EventManagerDirectory.RolePlayerOrderChanged.Add(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
		   }
		}
		
		/// <summary>
		/// Unsubscribe to events fired when compartment items changes.
		/// </summary>
		public void UnsubscribeCompartmentItemsEvents()
		{
		   if (subscribedCompartmentItemsEvents)
		   {
		      this.Store.EventManagerDirectory.ElementAdded.Remove(new global::System.EventHandler<DslModeling::ElementAddedEventArgs>(this.CompartmentItemAdded));
		      this.Store.EventManagerDirectory.ElementDeleted.Remove(new global::System.EventHandler<DslModeling::ElementDeletedEventArgs>(this.CompartmentItemDeleted));
		      this.Store.EventManagerDirectory.ElementPropertyChanged.Remove(new global::System.EventHandler<DslModeling::ElementPropertyChangedEventArgs>(this.CompartmentItemPropertyChanged));
		      this.Store.EventManagerDirectory.RolePlayerChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerChangedEventArgs>(this.CompartmentItemRolePlayerChanged));
		      this.Store.EventManagerDirectory.RolePlayerOrderChanged.Remove(new global::System.EventHandler<DslModeling::RolePlayerOrderChangedEventArgs>(this.CompartmentItemRolePlayerOrderChanged));
		      subscribedCompartmentItemsEvents = false;
		   }
		}
		
		#region Event handlers
		/// <summary>
		/// Event for element added.
		/// </summary>
		private void CompartmentItemAdded(object sender, DslModeling::ElementAddedEventArgs e)
		{
		   CompartmentItemAddRule.ElementAdded(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element deleted.
		/// </summary>
		private void CompartmentItemDeleted(object sender, DslModeling::ElementDeletedEventArgs e)
		{
		   CompartmentItemDeleteRule.ElementDeleted(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for element property changed.
		/// </summary>
		private void CompartmentItemPropertyChanged(object sender, DslModeling::ElementPropertyChangedEventArgs e)
		{
		   CompartmentItemChangeRule.ElementPropertyChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player changed.
		/// </summary>
		private void CompartmentItemRolePlayerChanged(object sender, DslModeling::RolePlayerChangedEventArgs e)
		{
		   CompartmentItemRolePlayerChangeRule.RolePlayerChanged(e, true /* repaint only */);
		}
		/// <summary>
		/// Event for role-player order changed.
		/// </summary>
		private void CompartmentItemRolePlayerOrderChanged(object sender, DslModeling::RolePlayerOrderChangedEventArgs e)
		{
		   CompartmentItemRolePlayerPositionChangeRule.RolePlayerPositionChanged(e, true /* repaint only */);
		}
		#endregion
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		//protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		//{
		//   return true;
		//}
		
		internal bool ShouldSupport(DslModeling::ModelElement element) // HACK : MEXEDGE
		{
		    return this.ShouldAddShapeForElement(element);
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
		   DslDiagrams::NodeShape sourceShape;
		   DslDiagrams::NodeShape targetShape;
		   DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
		   if(connector == null)
		   {
		      base.OnChildConfiguring(child, createdDuringViewFixup);
		      return;
		   }
		   this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
		   
		   global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
		   connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
		   sourceShape = null;
		   targetShape = null;
		   
		   if (sourceShape == null || targetShape == null)
		   {
		      DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
		      if(sourceShape == null)
		      {
		         sourceShape = endShapes[0];
		      }
		      if(targetShape == null)
		      {
		         targetShape = endShapes[1];
		      }
		   }
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
		   DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
		   DslDiagrams::NodeShape sourceShape = null, targetShape = null;
		   if (link != null)
		   {
		      global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
		      if (linkedElements.Count == 2)
		      {
		         DslDiagrams::Diagram currentDiagram = this.Diagram;
		         DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
		         foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
		         {
		            DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
		            if (shape != null && shape.Diagram == currentDiagram)
		            {
		               sourceShape = shape;
		               break;
		            }
		         }
		         
		         presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
		         foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
		         {
		            DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
		            if (shape != null && shape.Diagram == currentDiagram)
		            {
		               targetShape = shape;
		               break;
		            }
		         }
		
		      }
		   }
		   
		   return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Most connectors are mapped to element links, but there can be exceptions. This method tell if a connector should be
		/// mapped to an element link.
		/// </summary>
		public override bool IsConnectorMappedToLink(DslDiagrams::BinaryLinkShape connector)
		{
		   #region Check Parameters
		   global::System.Diagnostics.Debug.Assert(connector != null);
		   if (connector == null)
		      throw new global::System.ArgumentNullException("connector");
		   #endregion
		   if (connector.GetType() == typeof(global::Sawczyn.EFDesigner.EFModel.AssociationConnector))
		      return false;
		   return base.IsConnectorMappedToLink(connector);
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
		   if(element is global::Sawczyn.EFDesigner.EFModel.ModelClass)
		   {
		      global::Sawczyn.EFDesigner.EFModel.ClassShape newShape = new global::Sawczyn.EFDesigner.EFModel.ClassShape(this.Partition);
		      if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
		      return newShape;
		   }
		   if(element is global::Sawczyn.EFDesigner.EFModel.ModelEnum)
		   {
		      global::Sawczyn.EFDesigner.EFModel.EnumShape newShape = new global::Sawczyn.EFDesigner.EFModel.EnumShape(this.Partition);
		      if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
		      return newShape;
		   }
		   if(element is global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)
		   {
		      global::Sawczyn.EFDesigner.EFModel.BidirectionalConnector newShape = new global::Sawczyn.EFDesigner.EFModel.BidirectionalConnector(this.Partition);
		      return newShape;
		   }
		   if(element is global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation)
		   {
		      global::Sawczyn.EFDesigner.EFModel.UnidirectionalConnector newShape = new global::Sawczyn.EFDesigner.EFModel.UnidirectionalConnector(this.Partition);
		      return newShape;
		   }
		   if(element is global::Sawczyn.EFDesigner.EFModel.Comment)
		   {
		      global::Sawczyn.EFDesigner.EFModel.CommentBoxShape newShape = new global::Sawczyn.EFDesigner.EFModel.CommentBoxShape(this.Partition);
		      if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
		      return newShape;
		   }
		   if(element is global::Sawczyn.EFDesigner.EFModel.Generalization)
		   {
		      global::Sawczyn.EFDesigner.EFModel.GeneralizationConnector newShape = new global::Sawczyn.EFDesigner.EFModel.GeneralizationConnector(this.Partition);
		      return newShape;
		   }
		   if(element is global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects)
		   {
		      global::Sawczyn.EFDesigner.EFModel.CommentConnector newShape = new global::Sawczyn.EFDesigner.EFModel.CommentConnector(this.Partition);
		      return newShape;
		   }
		   return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
		   base.InitializeShapeFields(shapeFields);
		   global::Sawczyn.EFDesigner.EFModel.ClassShape.DecoratorsInitialized += ClassShapeDecoratorMap.OnDecoratorsInitialized;
		   global::Sawczyn.EFDesigner.EFModel.CommentBoxShape.DecoratorsInitialized += CommentBoxShapeDecoratorMap.OnDecoratorsInitialized;
		   global::Sawczyn.EFDesigner.EFModel.EnumShape.DecoratorsInitialized += EnumShapeDecoratorMap.OnDecoratorsInitialized;
		   global::Sawczyn.EFDesigner.EFModel.UnidirectionalConnector.DecoratorsInitialized += UnidirectionalConnectorDecoratorMap.OnDecoratorsInitialized;
		   global::Sawczyn.EFDesigner.EFModel.BidirectionalConnector.DecoratorsInitialized += BidirectionalConnectorDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ClassShape.
		/// </summary>
		internal static partial class ClassShapeDecoratorMap
		{
		   /// <summary>
		   /// Event handler called when decorator initialization is complete for ClassShape.  Adds decorator mappings for this shape or connector.
		   /// </summary>
		   public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
		   {
		      DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
		      DslDiagrams::AssociatedPropertyInfo propertyInfo;
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.NameDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("EntityGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "EntityGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("AbstractEntityGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "AbstractEntityGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("WarningGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "WarningGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("TransientGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TransientGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.GenerateCodeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("False");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NoGenGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("SQLGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SQLGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("DictionaryGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "DictionaryGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelClass.ShouldShowInterfaceGlyphDomainPropertyId);
		      propertyInfo.FilteringValues.Add("True");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Interface").AssociateVisibilityWith(shape.Store, propertyInfo);
		   }
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CommentBoxShape.
		/// </summary>
		internal static partial class CommentBoxShapeDecoratorMap
		{
		   /// <summary>
		   /// Event handler called when decorator initialization is complete for CommentBoxShape.  Adds decorator mappings for this shape or connector.
		   /// </summary>
		   public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
		   {
		      DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
		      DslDiagrams::AssociatedPropertyInfo propertyInfo;
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.Comment.TextDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Comment").AssociateValueWith(shape.Store, propertyInfo);
		   }
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EnumShape.
		/// </summary>
		internal static partial class EnumShapeDecoratorMap
		{
		   /// <summary>
		   /// Event handler called when decorator initialization is complete for EnumShape.  Adds decorator mappings for this shape or connector.
		   /// </summary>
		   public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
		   {
		      DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
		      DslDiagrams::AssociatedPropertyInfo propertyInfo;
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelEnum.NameDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "Name").AssociateValueWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelEnum.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("EnumGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "EnumGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelEnum.GlyphTypeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("WarningGlyph");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "WarningGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.ModelEnum.GenerateCodeDomainPropertyId);
		      propertyInfo.FilteringValues.Add("False");
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NoGenGlyph").AssociateVisibilityWith(shape.Store, propertyInfo);
		   }
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for AssociationConnector.
		/// </summary>
		internal static partial class AssociationConnectorDecoratorMap
		{
		   /// <summary>
		   /// Event handler called when decorator initialization is complete for AssociationConnector.  Adds decorator mappings for this shape or connector.
		   /// </summary>
		   public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
		   {
		   }
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UnidirectionalConnector.
		/// </summary>
		internal static partial class UnidirectionalConnectorDecoratorMap
		{
		   /// <summary>
		   /// Event handler called when decorator initialization is complete for UnidirectionalConnector.  Adds decorator mappings for this shape or connector.
		   /// </summary>
		   public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
		   {
		      AssociationConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
		      
		      DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
		      DslDiagrams::AssociatedPropertyInfo propertyInfo;
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.Association.TargetPropertyNameDisplayDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetPropertyNameDisplay").AssociateValueWith(shape.Store, propertyInfo);
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.Association.SourceMultiplicityDisplayDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicityDisplay").AssociateValueWith(shape.Store, propertyInfo);
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.Association.TargetMultiplicityDisplayDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicityDisplay").AssociateValueWith(shape.Store, propertyInfo);
		   }
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for BidirectionalConnector.
		/// </summary>
		internal static partial class BidirectionalConnectorDecoratorMap
		{
		   /// <summary>
		   /// Event handler called when decorator initialization is complete for BidirectionalConnector.  Adds decorator mappings for this shape or connector.
		   /// </summary>
		   public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
		   {
		      AssociationConnectorDecoratorMap.OnDecoratorsInitialized(sender, e);
		      
		      DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
		      DslDiagrams::AssociatedPropertyInfo propertyInfo;
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.Association.TargetPropertyNameDisplayDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetPropertyNameDisplay").AssociateValueWith(shape.Store, propertyInfo);
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.SourcePropertyNameDisplayDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourcePropertyNameDisplay").AssociateValueWith(shape.Store, propertyInfo);
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.Association.SourceMultiplicityDisplayDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "SourceMultiplicityDisplay").AssociateValueWith(shape.Store, propertyInfo);
		      
		      propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Sawczyn.EFDesigner.EFModel.Association.TargetMultiplicityDisplayDomainPropertyId);
		      DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "TargetMultiplicityDisplay").AssociateValueWith(shape.Store, propertyInfo);
		   }
		}
		
		#endregion
		
		#region Sticky Toolbox Support
		private string stickyToolboxItemId = null; // Id of the last-selected sticky toolbox item.
		
		/// <summary>
		/// Called when the selection on toolbox changed (through a single-click, or pressing up/down arrow keys).
		/// Base implementation does nothing.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">New toolbox item with selection. This can be null, if "Pointer" mode is selected.</param>
		public override void OnToolboxSelectionChanged(DslDesign::ModelingToolboxItem toolboxItem)
		{
		   base.OnToolboxSelectionChanged(toolboxItem);
		
		   // When a toolbox item is single-clicked, we need to turn off the sticky mode.
		   this.stickyToolboxItemId = null;
		   if (this.ActiveDiagramView != null)
		   {
		      DslDiagrams::CreateAction createAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::CreateAction;
		      if (createAction != null)
		      {
		         createAction.StickyMode = false;
		      }
		      else
		      {
		         DslDiagrams::ConnectAction connectAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::ConnectAction;
		         if (connectAction != null)
		         {
		            connectAction.StickyMode = false;
		         }
		      }
		   }
		}
		
		/// <summary>
		/// Called on selection of a ToolboxItem. (A selection is a double-click, or pressing Enter).
		/// The selection cannot be null; this method is not called when the "Pointer" mode is selected.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">Selected toolbox item.</param>
		public override bool OnToolboxItemSelected(DslDesign::ModelingToolboxItem toolboxItem)
		{
		   // Save the current sticky item choice.
		   this.stickyToolboxItemId = toolboxItem.Id;
		   
		   // Return true to indicate that the toolbox selection action is handled. Otherwise the old
		   // behavior of creating new element on double-click will be carried out.
		   return true;
		}
		#endregion
		
		
		#region Toolbox actions
		private bool changingMouseAction;
		private global::Sawczyn.EFDesigner.EFModel.ModelClassCreateAction modelClassCreateAction;
		private global::Sawczyn.EFDesigner.EFModel.CommentCreateAction commentCreateAction;
		private global::Sawczyn.EFDesigner.EFModel.EnumerationCreateAction enumerationCreateAction;
		private global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociationConnectAction unidirectionalAssociationConnectAction;
		private global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociationConnectAction bidirectionalAssociationConnectAction;
		private global::Sawczyn.EFDesigner.EFModel.GeneralizationConnectAction generalizationConnectAction;
		private global::Sawczyn.EFDesigner.EFModel.CommentLinkConnectAction commentLinkConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
		   return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
		   if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
		   DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		   if(activeView != null)
		   {
		      bool stickyMode = false;
		      DslDesign::ModelingToolboxItem selectedToolboxItem = activeView.Toolbox.GetSelectedToolboxItem() as DslDesign::ModelingToolboxItem;
		      if (selectedToolboxItem != null && selectedToolboxItem.Id == this.stickyToolboxItemId)
		      {
		         stickyMode = true;
		      }
		      else
		      {
		         stickyMode = false;
		         this.stickyToolboxItemId = null;
		      }
		
		      DslDiagrams::MouseAction action = null;
		      if (SelectedToolboxItemSupportsFilterString(activeView, global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.ModelClassFilterString))
		      {
		         if (this.modelClassCreateAction == null)
		         {
		            this.modelClassCreateAction = new global::Sawczyn.EFDesigner.EFModel.ModelClassCreateAction(this);
		            this.modelClassCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
		         }
		         this.modelClassCreateAction.StickyMode = stickyMode;
		         action = this.modelClassCreateAction;
		      }
		      else if (SelectedToolboxItemSupportsFilterString(activeView, global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.CommentFilterString))
		      {
		         if (this.commentCreateAction == null)
		         {
		            this.commentCreateAction = new global::Sawczyn.EFDesigner.EFModel.CommentCreateAction(this);
		            this.commentCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
		         }
		         this.commentCreateAction.StickyMode = stickyMode;
		         action = this.commentCreateAction;
		      }
		      else if (SelectedToolboxItemSupportsFilterString(activeView, global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.EnumerationFilterString))
		      {
		         if (this.enumerationCreateAction == null)
		         {
		            this.enumerationCreateAction = new global::Sawczyn.EFDesigner.EFModel.EnumerationCreateAction(this);
		            this.enumerationCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
		         }
		         this.enumerationCreateAction.StickyMode = stickyMode;
		         action = this.enumerationCreateAction;
		      }
		      else if (SelectedToolboxItemSupportsFilterString(activeView, global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.UnidirectionalAssociationFilterString))
		      {
		         if (this.unidirectionalAssociationConnectAction == null)
		         {
		            this.unidirectionalAssociationConnectAction = new global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociationConnectAction(this);
		            this.unidirectionalAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
		         }
		         this.unidirectionalAssociationConnectAction.StickyMode = stickyMode;
		         action = this.unidirectionalAssociationConnectAction;
		      } 
		      else if (SelectedToolboxItemSupportsFilterString(activeView, global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.BidirectionalAssociationFilterString))
		      {
		         if (this.bidirectionalAssociationConnectAction == null)
		         {
		            this.bidirectionalAssociationConnectAction = new global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociationConnectAction(this);
		            this.bidirectionalAssociationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
		         }
		         this.bidirectionalAssociationConnectAction.StickyMode = stickyMode;
		         action = this.bidirectionalAssociationConnectAction;
		      } 
		      else if (SelectedToolboxItemSupportsFilterString(activeView, global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.GeneralizationFilterString))
		      {
		         if (this.generalizationConnectAction == null)
		         {
		            this.generalizationConnectAction = new global::Sawczyn.EFDesigner.EFModel.GeneralizationConnectAction(this);
		            this.generalizationConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
		         }
		         this.generalizationConnectAction.StickyMode = stickyMode;
		         action = this.generalizationConnectAction;
		      } 
		      else if (SelectedToolboxItemSupportsFilterString(activeView, global::Sawczyn.EFDesigner.EFModel.EFModelToolboxHelper.CommentLinkFilterString))
		      {
		         if (this.commentLinkConnectAction == null)
		         {
		            this.commentLinkConnectAction = new global::Sawczyn.EFDesigner.EFModel.CommentLinkConnectAction(this);
		            this.commentLinkConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
		         }
		         this.commentLinkConnectAction.StickyMode = stickyMode;
		         action = this.commentLinkConnectAction;
		      } 
		      else
		      {
		         action = null;
		      }
		      
		      if (pointArgs.DiagramClientView.ActiveMouseAction != action)
		      {
		         try
		         {
		            this.changingMouseAction = true;
		            pointArgs.DiagramClientView.ActiveMouseAction = action;
		         }
		         finally
		         {
		            this.changingMouseAction = false;
		         }
		      }
		   }
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom toolbox action.
		/// </summary>
		private void OnToolboxActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
		   OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom toolbox action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
		   DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
		   if (activeView != null && activeView.Toolbox != null)
		   {
		      // If we're not changing mouse action due to changing toolbox selection change,
		      // reset toolbox selection.
		      if (!this.changingMouseAction)
		      {
		         activeView.Toolbox.SelectedToolboxItemUsed();
		      }
		   }
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
		   try
		   {
		      if(disposing)
		      {
		         if(this.modelClassCreateAction != null)
		         {
		            this.modelClassCreateAction.Dispose();
		            this.modelClassCreateAction = null;
		         }
		         if(this.commentCreateAction != null)
		         {
		            this.commentCreateAction.Dispose();
		            this.commentCreateAction = null;
		         }
		         if(this.enumerationCreateAction != null)
		         {
		            this.enumerationCreateAction.Dispose();
		            this.enumerationCreateAction = null;
		         }
		         if(this.unidirectionalAssociationConnectAction != null)
		         {
		            this.unidirectionalAssociationConnectAction.Dispose();
		            this.unidirectionalAssociationConnectAction = null;
		         }
		         if(this.bidirectionalAssociationConnectAction != null)
		         {
		            this.bidirectionalAssociationConnectAction.Dispose();
		            this.bidirectionalAssociationConnectAction = null;
		         }
		         if(this.generalizationConnectAction != null)
		         {
		            this.generalizationConnectAction.Dispose();
		            this.generalizationConnectAction = null;
		         }
		         if(this.commentLinkConnectAction != null)
		         {
		            this.commentLinkConnectAction.Dispose();
		            this.commentLinkConnectAction = null;
		         }
		         this.UnsubscribeCompartmentItemsEvents();
		      }
		   }
		   finally
		   {
		      base.Dispose(disposing);
		   }
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// EFModelDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4bd5b7e6, 0x86b6, 0x43d2, 0x96, 0x2d, 0xb6, 0xe8, 0x7a, 0xc4, 0x69, 0x0a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EFModelDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EFModelDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0x65dfd143, 0x7282, 0x4702, 0xa9, 0x2e, 0xca, 0x44, 0x38, 0x73, 0xba, 0x27);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// The background color when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EFModelDiagram/FillColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EFModelDiagram/FillColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("65dfd143-7282-4702-a92e-ca443873ba27")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EFModelDiagram.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EFModelDiagram, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EFModelDiagram.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EFModelDiagram.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(EFModelDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EFModelDiagram element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region TextColor domain property code
		
		/// <summary>
		/// TextColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextColorDomainPropertyId = new global::System.Guid(0x8e5fb873, 0xc075, 0x421f, 0xa2, 0x32, 0x4e, 0x18, 0x79, 0x8f, 0xd8, 0x1e);
		
		/// <summary>
		/// Gets or sets the value of TextColor domain property.
		/// The text color when using a theme with a light background.
		/// </summary>
		[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EFModelDiagram/TextColor.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EFModelDiagram/TextColor.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("8e5fb873-c075-421f-a232-4e18798fd81e")]
		public global::System.Drawing.Color TextColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TextColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EFModelDiagram.TextColor domain property.
		/// </summary>
		internal sealed partial class TextColorPropertyHandler : DslModeling::DomainPropertyValueHandler<EFModelDiagram, global::System.Drawing.Color>
		{
			private TextColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EFModelDiagram.TextColor domain property value handler.
			/// </summary>
			public static readonly TextColorPropertyHandler Instance = new TextColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EFModelDiagram.TextColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(EFModelDiagram element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TextColor because its Kind is
				// set to CustomStorage. Please provide the GetTextColorValue()
				// method on the domain class.
				return element.GetTextColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EFModelDiagram element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for TextColor because its Kind is
					// set to CustomStorage. Please provide the SetTextColorValue()
					// method on the domain class.
					element.SetTextColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	
	   /// <summary>
	   /// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
	   /// This now enables the DSL author to everride the SkipFixUp() method 
	   /// </summary>
	   internal partial class FixUpDiagramBase : DslModeling::AddRule
	   {
	      protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
	      {
	         return childElement.IsDeleted;
	      }
	   }
	
	   /// <summary>
	   /// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelClass), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnum), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Comment), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   internal sealed partial class FixUpDiagram : FixUpDiagramBase
	   {
	      [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
	      public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
	      {
	         if(e == null) throw new global::System.ArgumentNullException("e");
	      
	         DslModeling::ModelElement childElement = e.ModelElement;
	         if (this.SkipFixup(childElement))
	            return;
	         DslModeling::ModelElement parentElement;
	         if(childElement is DslModeling::ElementLink)
	         {
	            parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
	         } else
	         if(childElement is global::Sawczyn.EFDesigner.EFModel.ModelClass)
	         {
	            parentElement = GetParentForModelClass((global::Sawczyn.EFDesigner.EFModel.ModelClass)childElement);
	         } else
	         if(childElement is global::Sawczyn.EFDesigner.EFModel.ModelEnum)
	         {
	            parentElement = GetParentForModelEnum((global::Sawczyn.EFDesigner.EFModel.ModelEnum)childElement);
	         } else
	         if(childElement is global::Sawczyn.EFDesigner.EFModel.Comment)
	         {
	            parentElement = GetParentForComment((global::Sawczyn.EFDesigner.EFModel.Comment)childElement);
	         } else
	         {
	            parentElement = null;
	         }
	         
	         if(parentElement != null)
	         {
	            DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
	         }
	      }
			public static global::Sawczyn.EFDesigner.EFModel.ModelRoot GetParentForModelClass( global::Sawczyn.EFDesigner.EFModel.ModelClass root )
			{
				// Segments 0 and 1
				global::Sawczyn.EFDesigner.EFModel.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			public static global::Sawczyn.EFDesigner.EFModel.ModelRoot GetParentForComment( global::Sawczyn.EFDesigner.EFModel.Comment root )
			{
				// Segments 0 and 1
				global::Sawczyn.EFDesigner.EFModel.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
			public static global::Sawczyn.EFDesigner.EFModel.ModelRoot GetParentForModelEnum( global::Sawczyn.EFDesigner.EFModel.ModelEnum root )
			{
				// Segments 0 and 1
				global::Sawczyn.EFDesigner.EFModel.ModelRoot result = root.ModelRoot;
				if ( result == null ) return null;
				return result;
			}
	      private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
	      {
	         global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
	         if (linkedElements.Count == 2)
	         {
	            DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
	            DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
	            if(sourceShape == null)
	            {
	               DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
	               foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
	               {
	                  DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
	                  if (shape != null)
	                  {
	                     sourceShape = shape;
	                     break;
	                  }
	               }
	            }
	            
	            if(targetShape == null)
	            {
	               DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
	               foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
	               {
	                  DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
	                  if (shape != null)
	                  {
	                     targetShape = shape;
	                     break;
	                  }
	               }
	            }
	            
	            if(sourceShape == null || targetShape == null)
	            {
	               global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
	               return null;
	            }
	
	            DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
	            DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
	            while (sourceParent != targetParent && sourceParent != null)
	            {
	               DslDiagrams::ShapeElement curParent = targetParent;
	               while (sourceParent != curParent && curParent != null)
	               {
	                  curParent = curParent.ParentShape;
	               }
	
	               if(sourceParent == curParent)
	               {
	                  break;
	               }
	               else
	               {
	                  sourceParent = sourceParent.ParentShape;
	               }
	            }
	
	            while (sourceParent != null)
	            {
	               // ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
	               if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
	               {
	                  break;
	               }
	               else
	               {
	                  sourceParent = sourceParent.ParentShape;
	               }
	            }
	
	            global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
	            return sourceParent.ModelElement;
	         }
	
	         return null;
	      }
	   }
	
	   /// <summary>
	   /// Rule to update compartments when an item is added to the list
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Association), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   internal sealed class CompartmentItemAddRule : DslModeling::AddRule
	   {
	      /// <summary>
	      /// Called when an element is added. 
	      /// </summary>
	      /// <param name="e"></param>
	      public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
	      {
	         ElementAdded(e, false);
	      }
	
	      internal static void ElementAdded(DslModeling::ElementAddedEventArgs e, bool repaintOnly)
	      {
	         if(e==null) throw new global::System.ArgumentNullException("e");
	         if (e.ModelElement.IsDeleted)
	            return;
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes)
	         {
	            global::System.Collections.IEnumerable elements = GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes)e.ModelElement);
	            UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AttributesCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.Association)
	         {
	            global::System.Collections.IEnumerable elements = GetModelClassForClassShapeAssociationsCompartment((global::Sawczyn.EFDesigner.EFModel.Association)e.ModelElement);
	            UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AssociationsCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)
	         {
	            global::System.Collections.IEnumerable elements = GetModelClassForClassShapeSourcesCompartment((global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)e.ModelElement);
	            UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "SourcesCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues)
	         {
	            global::System.Collections.IEnumerable elements = GetModelEnumForEnumShapeValuesCompartmentFromLastLink((global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues)e.ModelElement);
	            UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.EnumShape), "ValuesCompartment", repaintOnly, false);
	         }
	      }
	      
	      #region static DomainPath traversal methods to get the list of compartments to update
	      internal static global::System.Collections.ICollection GetModelClassForClassShapeAttributesCompartmentFromLastLink(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes root)
	      {
				// Segment 0
				global::Sawczyn.EFDesigner.EFModel.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
	         return new DslModeling::ModelElement[] {result};
	      }
	      internal static global::System.Collections.ICollection GetModelClassForClassShapeAttributesCompartment(global::Sawczyn.EFDesigner.EFModel.ModelAttribute root)
	      {
				// Segments 1 and 0
				global::Sawczyn.EFDesigner.EFModel.ModelClass result = root.ModelClass;
				if ( result == null ) return new DslModeling::ModelElement[0];
	         return new DslModeling::ModelElement[] {result};
	      }
	      internal static global::System.Collections.ICollection GetModelClassForClassShapeAssociationsCompartment(global::Sawczyn.EFDesigner.EFModel.Association root)
	      {
				// Segment 0
				global::Sawczyn.EFDesigner.EFModel.ModelClass result = root.Source;
				if ( result == null ) return new DslModeling::ModelElement[0];
	         return new DslModeling::ModelElement[] {result};
	      }
	      internal static global::System.Collections.ICollection GetModelClassForClassShapeAssociationsCompartmentFromPropertyElement(global::Sawczyn.EFDesigner.EFModel.ModelClass root)
	      {
				// Segment 0
					global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.Association> result = global::Sawczyn.EFDesigner.EFModel.Association.GetLinksToSources(root);
	         return result;
	      }
	      internal static global::System.Collections.ICollection GetModelClassForClassShapeSourcesCompartment(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation root)
	      {
				// Segment 0
				global::Sawczyn.EFDesigner.EFModel.ModelClass result = root.BidirectionalTarget;
				if ( result == null ) return new DslModeling::ModelElement[0];
	         return new DslModeling::ModelElement[] {result};
	      }
	      internal static global::System.Collections.ICollection GetModelClassForClassShapeSourcesCompartmentFromPropertyElement(global::Sawczyn.EFDesigner.EFModel.ModelClass root)
	      {
				// Segment 0
					global::System.Collections.ObjectModel.ReadOnlyCollection<global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation> result = global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.GetLinksToBidirectionalTargets(root);
	         return result;
	      }
	      internal static global::System.Collections.ICollection GetModelEnumForEnumShapeValuesCompartmentFromLastLink(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues root)
	      {
				// Segment 0
				global::Sawczyn.EFDesigner.EFModel.ModelEnum result = root.Enum;
				if ( result == null ) return new DslModeling::ModelElement[0];
	         return new DslModeling::ModelElement[] {result};
	      }
	      internal static global::System.Collections.ICollection GetModelEnumForEnumShapeValuesCompartment(global::Sawczyn.EFDesigner.EFModel.ModelEnumValue root)
	      {
				// Segments 1 and 0
				global::Sawczyn.EFDesigner.EFModel.ModelEnum result = root.Enum;
				if ( result == null ) return new DslModeling::ModelElement[0];
	         return new DslModeling::ModelElement[] {result};
	      }
	      #endregion
	
	      #region helper method to update compartments 
	      /// <summary>
	      /// Updates the compartments for the shapes associated to the given list of model elements
	      /// </summary>
	      /// <param name="elements">List of model elements</param>
	      /// <param name="shapeType">The type of shape that needs updating</param>
	      /// <param name="compartmentName">The name of the compartment to update</param>
	      /// <param name="repaintOnly">If true, the method will only invalidate the shape for a repaint, without re-initializing the shape.</param>
	      /// <param name="currentDiagramOnly">If true, the method will only add the shape for the active diagram.</param>
	      internal static void UpdateCompartments(global::System.Collections.IEnumerable elements, global::System.Type shapeType, string compartmentName, bool repaintOnly, bool currentDiagramOnly = true)
	      {
	         DslModeling.Transaction transaction = null;
	   
	         try
	         {
	            foreach (DslModeling::ModelElement element in elements)
	            {
	               Microsoft.VisualStudio.Modeling.Diagrams.Diagram currentDiagram = ModelRoot.GetCurrentDiagram?.Invoke();
	               if (currentDiagramOnly && currentDiagram == null) return;
	   
	               IEnumerable<DslDiagrams::CompartmentShape> pels = DslDiagrams::PresentationViewsSubject.GetPresentation(element).OfType<DslDiagrams::CompartmentShape>();
	               foreach (DslDiagrams::CompartmentShape compartmentShape in pels .Where(p => !currentDiagramOnly || p.Diagram == currentDiagram))
	               {
	                  if (repaintOnly)
	                     compartmentShape.Invalidate();
	                  else
	                  {
	                     transaction = transaction ?? element.Store.TransactionManager.BeginTransaction("UpdateCompartments");
	                     compartmentShape.GetCompartmentMappings().FirstOrDefault(m => m.CompartmentId==compartmentName)?.InitializeCompartmentShape(compartmentShape);
	                  }
	               }
	            }
	   
	            transaction?.Commit();
	            transaction = null;
	         }
	         finally
	         {
	            transaction?.Rollback();
	         }
	      }
	      #endregion
	   }
	   
	   /// <summary>
	   /// Rule to update compartments when an items is removed from the list
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Association), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   internal sealed class CompartmentItemDeleteRule : DslModeling::DeleteRule
	   {
	      /// <summary>
	      /// Called when an element is deleted
	      /// </summary>
	      /// <param name="e"></param>
	      public override void ElementDeleted(DslModeling::ElementDeletedEventArgs e)
	      {
	         ElementDeleted(e, false);
	      }
	      
	      internal static void ElementDeleted(DslModeling::ElementDeletedEventArgs e, bool repaintOnly)
	      {
	         if(e==null) throw new global::System.ArgumentNullException("e");
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes)
	         {
	            global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes)e.ModelElement);
	            CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AttributesCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.Association)
	         {
	            global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeAssociationsCompartment((global::Sawczyn.EFDesigner.EFModel.Association)e.ModelElement);
	            CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AssociationsCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)
	         {
	            global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeSourcesCompartment((global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)e.ModelElement);
	            CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "SourcesCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues)
	         {
	            global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelEnumForEnumShapeValuesCompartmentFromLastLink((global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues)e.ModelElement);
	            CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.EnumShape), "ValuesCompartment", repaintOnly, false);
	         }
	      }
	   }
	   
	   /// <summary>
	   /// Rule to update compartments when the property on an item being displayed changes.
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelAttribute), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelClass), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnumValue), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   internal sealed class CompartmentItemChangeRule : DslModeling::ChangeRule 
	   {
	      /// <summary>
	      /// Called when an element is changed
	      /// </summary>
	      /// <param name="e"></param>
	      public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
	      {
	         ElementPropertyChanged(e, false);
	      }
	      
	      internal static void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e, bool repaintOnly)
	      {
	         if(e==null) throw new global::System.ArgumentNullException("e");
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ModelAttribute && e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.ModelAttribute.NameDomainPropertyId)
	         {
	            global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::Sawczyn.EFDesigner.EFModel.ModelAttribute)e.ModelElement);
	            CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AttributesCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ModelClass && e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.ModelClass.NameDomainPropertyId)
	         {
	            global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeAssociationsCompartmentFromPropertyElement((global::Sawczyn.EFDesigner.EFModel.ModelClass)e.ModelElement);
	            global::System.Collections.ArrayList list = new global::System.Collections.ArrayList(elements.Count);
	            foreach(DslModeling::ModelElement element in elements)
	            {
	               global::System.Collections.ICollection rootElements  = CompartmentItemAddRule.GetModelClassForClassShapeAssociationsCompartment((global::Sawczyn.EFDesigner.EFModel.Association)element);
	               list.AddRange(rootElements);
	            }
	            CompartmentItemAddRule.UpdateCompartments(list, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AssociationsCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ModelClass && e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.ModelClass.NameDomainPropertyId)
	         {
	            global::System.Collections.ICollection elements = CompartmentItemAddRule.GetModelClassForClassShapeSourcesCompartmentFromPropertyElement((global::Sawczyn.EFDesigner.EFModel.ModelClass)e.ModelElement);
	            global::System.Collections.ArrayList list = new global::System.Collections.ArrayList(elements.Count);
	            foreach(DslModeling::ModelElement element in elements)
	            {
	               global::System.Collections.ICollection rootElements  = CompartmentItemAddRule.GetModelClassForClassShapeSourcesCompartment((global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)element);
	               list.AddRange(rootElements);
	            }
	            CompartmentItemAddRule.UpdateCompartments(list, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "SourcesCompartment", repaintOnly, false);
	         }
	         if(e.ModelElement is global::Sawczyn.EFDesigner.EFModel.ModelEnumValue && e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.ModelEnumValue.NameDomainPropertyId)
	         {
	            global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelEnumForEnumShapeValuesCompartment((global::Sawczyn.EFDesigner.EFModel.ModelEnumValue)e.ModelElement);
	            CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.EnumShape), "ValuesCompartment", repaintOnly, false);
	         }
	      }
	   }
	   
	   /// <summary>
	   /// Rule to update compartments when a roleplayer change happens
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Association), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   internal sealed class CompartmentItemRolePlayerChangeRule : DslModeling::RolePlayerChangeRule 
	   {
	      /// <summary>
	      /// Called when the roleplayer on a link changes.
	      /// </summary>
	      /// <param name="e"></param>
	      public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
	      {
	         RolePlayerChanged(e, false);
	      }
	      
	      internal static void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e, bool repaintOnly)
	      {
	         if(e==null) throw new global::System.ArgumentNullException("e");
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(e.DomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartmentFromLastLink((global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes)e.ElementLink);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AttributesCompartment", repaintOnly);
	            }
	            else 
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::Sawczyn.EFDesigner.EFModel.ModelAttribute)e.NewRolePlayer);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AttributesCompartment", repaintOnly);
	            }
	         }
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.Association).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(e.DomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAssociationsCompartment((global::Sawczyn.EFDesigner.EFModel.Association)e.ElementLink);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AssociationsCompartment", repaintOnly);
	            }
	         }
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(!e.DomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeSourcesCompartment((global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)e.ElementLink);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "SourcesCompartment", repaintOnly);
	            }
	         }
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(e.DomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelEnumForEnumShapeValuesCompartmentFromLastLink((global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues)e.ElementLink);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.EnumShape), "ValuesCompartment", repaintOnly);
	            }
	            else 
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelEnumForEnumShapeValuesCompartment((global::Sawczyn.EFDesigner.EFModel.ModelEnumValue)e.NewRolePlayer);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.EnumShape), "ValuesCompartment", repaintOnly);
	            }
	         }
	      }
	   }
	
	   /// <summary>
	   /// Rule to update compartments when the order of items in the list changes.
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Association), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues), FireTime=DslModeling::TimeToFire.TopLevelCommit, InitiallyDisabled=true)]
	   internal sealed class CompartmentItemRolePlayerPositionChangeRule : DslModeling::RolePlayerPositionChangeRule 
	   {
	      /// <summary>
	      /// Called when the order of a roleplayer in a relationship changes
	      /// </summary>
	      /// <param name="e"></param>
	      public override void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e)
	      {
	         RolePlayerPositionChanged(e, false);
	      }
	      
	      internal static void RolePlayerPositionChanged(DslModeling::RolePlayerOrderChangedEventArgs e, bool repaintOnly)
	      {
	         if(e==null) throw new global::System.ArgumentNullException("e");
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(!e.CounterpartDomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAttributesCompartment((global::Sawczyn.EFDesigner.EFModel.ModelAttribute)e.CounterpartRolePlayer);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AttributesCompartment", repaintOnly);
	            }
	         }
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.Association).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(!e.CounterpartDomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeAssociationsCompartment((global::Sawczyn.EFDesigner.EFModel.Association)e.CounterpartRolePlayer);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "AssociationsCompartment", repaintOnly);
	            }
	         }
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(e.CounterpartDomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelClassForClassShapeSourcesCompartment((global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation)e.SourceElement);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.ClassShape), "SourcesCompartment", repaintOnly);
	            }
	         }
	         if(typeof(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues).IsAssignableFrom(e.DomainRelationship.ImplementationClass))
	         {
	            if(!e.CounterpartDomainRole.IsSource)
	            {
	               global::System.Collections.IEnumerable elements = CompartmentItemAddRule.GetModelEnumForEnumShapeValuesCompartment((global::Sawczyn.EFDesigner.EFModel.ModelEnumValue)e.CounterpartRolePlayer);
	               CompartmentItemAddRule.UpdateCompartments(elements, typeof(global::Sawczyn.EFDesigner.EFModel.EnumShape), "ValuesCompartment", repaintOnly);
	            }
	         }
	      }
	   }
	
	   /// <summary>
	   /// A rule which fires when data mapped to outer text decorators has changed,
	   /// so we can update the decorator host's bounds.
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Association), InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation), InitiallyDisabled=true)]
	   internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
	   {
	      [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
	      public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
	      {
	         if(e == null) throw new global::System.ArgumentNullException("e");
	         
	         if (e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.Association.TargetPropertyNameDisplayDomainPropertyId)
	         {
					DslDiagrams::Decorator decorator = global::Sawczyn.EFDesigner.EFModel.BidirectionalConnector.FindBidirectionalConnectorDecorator("TargetPropertyNameDisplay");
					if(decorator != null)
					{
					   decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.DomainClassId);
					}
					decorator = global::Sawczyn.EFDesigner.EFModel.UnidirectionalConnector.FindUnidirectionalConnectorDecorator("TargetPropertyNameDisplay");
					if(decorator != null)
					{
					   decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.DomainClassId);
					}
	         }
	         else if (e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.SourcePropertyNameDisplayDomainPropertyId)
	         {
					DslDiagrams::Decorator decorator = global::Sawczyn.EFDesigner.EFModel.BidirectionalConnector.FindBidirectionalConnectorDecorator("SourcePropertyNameDisplay");
					if(decorator != null)
					{
					   decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.DomainClassId);
					}
	         }
	         else if (e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.Association.SourceMultiplicityDisplayDomainPropertyId)
	         {
					DslDiagrams::Decorator decorator = global::Sawczyn.EFDesigner.EFModel.BidirectionalConnector.FindBidirectionalConnectorDecorator("SourceMultiplicityDisplay");
					if(decorator != null)
					{
					   decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.DomainClassId);
					}
					decorator = global::Sawczyn.EFDesigner.EFModel.UnidirectionalConnector.FindUnidirectionalConnectorDecorator("SourceMultiplicityDisplay");
					if(decorator != null)
					{
					   decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.DomainClassId);
					}
	         }
	         else if (e.DomainProperty.Id == global::Sawczyn.EFDesigner.EFModel.Association.TargetMultiplicityDisplayDomainPropertyId)
	         {
					DslDiagrams::Decorator decorator = global::Sawczyn.EFDesigner.EFModel.BidirectionalConnector.FindBidirectionalConnectorDecorator("TargetMultiplicityDisplay");
					if(decorator != null)
					{
					   decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation.DomainClassId);
					}
					decorator = global::Sawczyn.EFDesigner.EFModel.UnidirectionalConnector.FindUnidirectionalConnectorDecorator("TargetMultiplicityDisplay");
					if(decorator != null)
					{
					   decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation.DomainClassId);
					}
	         }
	      }
	   }
	
	   /// <summary>
	   /// Reroute a connector when the role players of its underlying relationship change
	   /// </summary>
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.BidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.UnidirectionalAssociation), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.Generalization), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   [DslModeling::RuleOn(typeof(global::Sawczyn.EFDesigner.EFModel.CommentReferencesSubjects), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
	   internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
	   {
	      /// <summary>
	      /// Reroute a connector when the role players of its underlying relationship change
	      /// </summary>
	      public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
	      {
	         if (e == null) throw new global::System.ArgumentNullException("e");
	
	         global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
	         foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
	         {
	            // Fix up any binary link shapes attached to the element link.
	            DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
	            if (linkShape != null)
	            {
	               global::Sawczyn.EFDesigner.EFModel.EFModelDiagram diagram = linkShape.Diagram as global::Sawczyn.EFDesigner.EFModel.EFModelDiagram;
	               if (diagram != null)
	               {
	                  if (e.NewRolePlayer != null)
	                  {
	                     DslDiagrams::NodeShape fromShape;
	                     DslDiagrams::NodeShape toShape;
	                     diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
	                     if (fromShape != null && toShape != null)
	                     {
	                        if (!object.Equals(fromShape, linkShape.FromShape))
	                        {
	                           linkShape.FromShape = fromShape;
	                        }
	                        if (!object.Equals(linkShape.ToShape, toShape))
	                        {
	                           linkShape.ToShape = toShape;
	                        }
	                     }
	                     else
	                     {
	                        // delete the connector if we cannot find an appropriate target shape.
	                        linkShape.Delete();
	                     }
	                  }
	                  else
	                  {
	                     // delete the connector if the new role player is null.
	                     linkShape.Delete();
	                  }
	               }
	            }
	         }
	      }
	   }
	}
	 