//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainModel EFModelDomainModel
	/// Entity Framework visual editor for EF6, EFCore and beyond.
	/// </summary>
	[DslDesign::DisplayNameResource("Sawczyn.EFDesigner.EFModel.EFModelDomainModel.DisplayName", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EFModelDomainModel.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("2f9962d2-544c-40e2-a4ba-a2babee17a5b")]
	public partial class EFModelDomainModel : DslModeling::DomainModel
	{
	   #region Constructor, domain model Id
	
	   /// <summary>
	   /// EFModelDomainModel domain model Id.
	   /// </summary>
	   public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x2f9962d2, 0x544c, 0x40e2, 0xa4, 0xba, 0xa2, 0xba, 0xbe, 0xe1, 0x7a, 0x5b);
	
	   /// <summary>
	   /// Constructor.
	   /// </summary>
	   /// <param name="store">Store containing the domain model.</param>
	   public EFModelDomainModel(DslModeling::Store store)
	      : base(store, DomainModelId)
	   {
	      // Call the partial method to allow any required serialization setup to be done.
	      this.InitializeSerialization(store);
	   }
	
	
	   ///<Summary>
	   /// Defines a partial method that will be called from the constructor to
	   /// allow any necessary serialization setup to be done.
	   ///</Summary>
	   ///<remarks>
	   /// For a DSL created with the DSL Designer wizard, an implementation of this 
	   /// method will be generated in the GeneratedCode\SerializationHelper.cs class.
	   ///</remarks>
	   partial void InitializeSerialization(DslModeling::Store store);
	
	
	   #endregion
	   #region Domain model reflection
	
	   /// <summary>
	   /// Gets the list of generated domain model types (classes, rules, relationships).
	   /// </summary>
	   /// <returns>List of types.</returns>
	   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	   protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
	   {
	      return new global::System.Type[]
	      {
	         typeof(ModelRoot),
	         typeof(ModelClass),
	         typeof(ModelAttribute),
	         typeof(Comment),
	         typeof(ModelEnum),
	         typeof(ModelEnumValue),
	         typeof(DesignElement),
	         typeof(ModelDiagramData),
	         typeof(Association),
	         typeof(UnidirectionalAssociation),
	         typeof(ClassHasAttributes),
	         typeof(ModelRootHasComments),
	         typeof(Generalization),
	         typeof(BidirectionalAssociation),
	         typeof(ModelRootHasEnums),
	         typeof(ModelEnumHasValues),
	         typeof(ModelRootHasClasses),
	         typeof(CommentReferencesSubjects),
	         typeof(CommentReferencesClasses),
	         typeof(CommentReferencesEnums),
	         typeof(ModelRootHasModelDiagrams),
	         typeof(EFModelDiagram),
	         typeof(AssociationConnector),
	         typeof(UnidirectionalConnector),
	         typeof(BidirectionalConnector),
	         typeof(GeneralizationConnector),
	         typeof(CommentConnector),
	         typeof(CommentBoxShape),
	         typeof(ClassShape),
	         typeof(EnumShape),
	         typeof(global::Sawczyn.EFDesigner.EFModel.FixUpAllDiagrams),
	         typeof(global::Sawczyn.EFDesigner.EFModel.DecoratorPropertyChanged),
	         typeof(global::Sawczyn.EFDesigner.EFModel.ConnectorRolePlayerChanged),
	         typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemAddRule),
	         typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemDeleteRule),
	         typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemRolePlayerChangeRule),
	         typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemRolePlayerPositionChangeRule),
	         typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemChangeRule),
	      };
	   }
	   /// <summary>
	   /// Gets the list of generated domain properties.
	   /// </summary>
	   /// <returns>List of property data.</returns>
	   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	   protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
	   {
	      return new DomainMemberInfo[]
	      {
	         new DomainMemberInfo(typeof(ModelRoot), "LazyLoadingEnabled", ModelRoot.LazyLoadingEnabledDomainPropertyId, typeof(ModelRoot.LazyLoadingEnabledPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EntityContainerAccess", ModelRoot.EntityContainerAccessDomainPropertyId, typeof(ModelRoot.EntityContainerAccessPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EntityContainerName", ModelRoot.EntityContainerNameDomainPropertyId, typeof(ModelRoot.EntityContainerNamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "Namespace", ModelRoot.NamespaceDomainPropertyId, typeof(ModelRoot.NamespacePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "DatabaseInitializerType", ModelRoot.DatabaseInitializerTypeDomainPropertyId, typeof(ModelRoot.DatabaseInitializerTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ConnectionString", ModelRoot.ConnectionStringDomainPropertyId, typeof(ModelRoot.ConnectionStringPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "AutomaticMigrationsEnabled", ModelRoot.AutomaticMigrationsEnabledDomainPropertyId, typeof(ModelRoot.AutomaticMigrationsEnabledPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EntityOutputDirectory", ModelRoot.EntityOutputDirectoryDomainPropertyId, typeof(ModelRoot.EntityOutputDirectoryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ContextOutputDirectory", ModelRoot.ContextOutputDirectoryDomainPropertyId, typeof(ModelRoot.ContextOutputDirectoryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EnumOutputDirectory", ModelRoot.EnumOutputDirectoryDomainPropertyId, typeof(ModelRoot.EnumOutputDirectoryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "DatabaseSchema", ModelRoot.DatabaseSchemaDomainPropertyId, typeof(ModelRoot.DatabaseSchemaPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ConcurrencyDefault", ModelRoot.ConcurrencyDefaultDomainPropertyId, typeof(ModelRoot.ConcurrencyDefaultPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "FileNameMarker", ModelRoot.FileNameMarkerDomainPropertyId, typeof(ModelRoot.FileNameMarkerPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EntityFrameworkVersion", ModelRoot.EntityFrameworkVersionDomainPropertyId, typeof(ModelRoot.EntityFrameworkVersionPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ConnectionStringName", ModelRoot.ConnectionStringNameDomainPropertyId, typeof(ModelRoot.ConnectionStringNamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ChopMethodChains", ModelRoot.ChopMethodChainsDomainPropertyId, typeof(ModelRoot.ChopMethodChainsPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "InheritanceStrategy", ModelRoot.InheritanceStrategyDomainPropertyId, typeof(ModelRoot.InheritanceStrategyPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "DefaultCollectionClass", ModelRoot.DefaultCollectionClassDomainPropertyId, typeof(ModelRoot.DefaultCollectionClassPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ProxyGenerationEnabled", ModelRoot.ProxyGenerationEnabledDomainPropertyId, typeof(ModelRoot.ProxyGenerationEnabledPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "TransformOnSave", ModelRoot.TransformOnSaveDomainPropertyId, typeof(ModelRoot.TransformOnSavePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "DefaultIdentityType", ModelRoot.DefaultIdentityTypeDomainPropertyId, typeof(ModelRoot.DefaultIdentityTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ShowCascadeDeletes", ModelRoot.ShowCascadeDeletesDomainPropertyId, typeof(ModelRoot.ShowCascadeDeletesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "DatabaseType", ModelRoot.DatabaseTypeDomainPropertyId, typeof(ModelRoot.DatabaseTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "WarnOnMissingDocumentation", ModelRoot.WarnOnMissingDocumentationDomainPropertyId, typeof(ModelRoot.WarnOnMissingDocumentationPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EntityFrameworkPackageVersion", ModelRoot.EntityFrameworkPackageVersionDomainPropertyId, typeof(ModelRoot.EntityFrameworkPackageVersionPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "StructOutputDirectory", ModelRoot.StructOutputDirectoryDomainPropertyId, typeof(ModelRoot.StructOutputDirectoryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "DbSetAccess", ModelRoot.DbSetAccessDomainPropertyId, typeof(ModelRoot.DbSetAccessPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "Description", ModelRoot.DescriptionDomainPropertyId, typeof(ModelRoot.DescriptionPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "Summary", ModelRoot.SummaryDomainPropertyId, typeof(ModelRoot.SummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ShowWarningsInDesigner", ModelRoot.ShowWarningsInDesignerDomainPropertyId, typeof(ModelRoot.ShowWarningsInDesignerPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EntityNamespace", ModelRoot.EntityNamespaceDomainPropertyId, typeof(ModelRoot.EntityNamespacePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EnumNamespace", ModelRoot.EnumNamespaceDomainPropertyId, typeof(ModelRoot.EnumNamespacePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "StructNamespace", ModelRoot.StructNamespaceDomainPropertyId, typeof(ModelRoot.StructNamespacePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "Namespaces", ModelRoot.NamespacesDomainPropertyId, typeof(ModelRoot.NamespacesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "OutputLocations", ModelRoot.OutputLocationsDomainPropertyId, typeof(ModelRoot.OutputLocationsPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ExposeForeignKeys", ModelRoot.ExposeForeignKeysDomainPropertyId, typeof(ModelRoot.ExposeForeignKeysPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "BaseClass", ModelRoot.BaseClassDomainPropertyId, typeof(ModelRoot.BaseClassPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ShowGrid", ModelRoot.ShowGridDomainPropertyId, typeof(ModelRoot.ShowGridPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "SnapToGrid", ModelRoot.SnapToGridDomainPropertyId, typeof(ModelRoot.SnapToGridPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "GridColor", ModelRoot.GridColorDomainPropertyId, typeof(ModelRoot.GridColorPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "GridSize", ModelRoot.GridSizeDomainPropertyId, typeof(ModelRoot.GridSizePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ShowForeignKeyPropertyNames", ModelRoot.ShowForeignKeyPropertyNamesDomainPropertyId, typeof(ModelRoot.ShowForeignKeyPropertyNamesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "DatabaseCollationDefault", ModelRoot.DatabaseCollationDefaultDomainPropertyId, typeof(ModelRoot.DatabaseCollationDefaultPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "PropertyAccessModeDefault", ModelRoot.PropertyAccessModeDefaultDomainPropertyId, typeof(ModelRoot.PropertyAccessModeDefaultPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "UseTabs", ModelRoot.UseTabsDomainPropertyId, typeof(ModelRoot.UseTabsPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "GenerateDbContextFactory", ModelRoot.GenerateDbContextFactoryDomainPropertyId, typeof(ModelRoot.GenerateDbContextFactoryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "EntityDefaultConstructorVisibilityDefault", ModelRoot.EntityDefaultConstructorVisibilityDefaultDomainPropertyId, typeof(ModelRoot.EntityDefaultConstructorVisibilityDefaultPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "PluralizeDbSetNames", ModelRoot.PluralizeDbSetNamesDomainPropertyId, typeof(ModelRoot.PluralizeDbSetNamesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "PluralizeTableNames", ModelRoot.PluralizeTableNamesDomainPropertyId, typeof(ModelRoot.PluralizeTableNamesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ShadowKeyNamePattern", ModelRoot.ShadowKeyNamePatternDomainPropertyId, typeof(ModelRoot.ShadowKeyNamePatternPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "AutoPropertyDefault", ModelRoot.AutoPropertyDefaultDomainPropertyId, typeof(ModelRoot.AutoPropertyDefaultPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "ShowInterfaceIndicators", ModelRoot.ShowInterfaceIndicatorsDomainPropertyId, typeof(ModelRoot.ShowInterfaceIndicatorsPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelRoot), "GenerateTableComments", ModelRoot.GenerateTableCommentsDomainPropertyId, typeof(ModelRoot.GenerateTableCommentsPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsAbstract", ModelClass.IsAbstractDomainPropertyId, typeof(ModelClass.IsAbstractPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "TableName", ModelClass.TableNameDomainPropertyId, typeof(ModelClass.TableNamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "DatabaseSchema", ModelClass.DatabaseSchemaDomainPropertyId, typeof(ModelClass.DatabaseSchemaPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "Concurrency", ModelClass.ConcurrencyDomainPropertyId, typeof(ModelClass.ConcurrencyPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsDatabaseSchemaTracking", ModelClass.IsDatabaseSchemaTrackingDomainPropertyId, typeof(ModelClass.IsDatabaseSchemaTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "Namespace", ModelClass.NamespaceDomainPropertyId, typeof(ModelClass.NamespacePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsNamespaceTracking", ModelClass.IsNamespaceTrackingDomainPropertyId, typeof(ModelClass.IsNamespaceTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "DbSetName", ModelClass.DbSetNameDomainPropertyId, typeof(ModelClass.DbSetNamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "Name", ModelClass.NameDomainPropertyId, typeof(ModelClass.NamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "ImplementNotify", ModelClass.ImplementNotifyDomainPropertyId, typeof(ModelClass.ImplementNotifyPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "CustomInterfaces", ModelClass.CustomInterfacesDomainPropertyId, typeof(ModelClass.CustomInterfacesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsDependentType", ModelClass.IsDependentTypeDomainPropertyId, typeof(ModelClass.IsDependentTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "OutputDirectory", ModelClass.OutputDirectoryDomainPropertyId, typeof(ModelClass.OutputDirectoryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsOutputDirectoryTracking", ModelClass.IsOutputDirectoryTrackingDomainPropertyId, typeof(ModelClass.IsOutputDirectoryTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "GlyphType", ModelClass.GlyphTypeDomainPropertyId, typeof(ModelClass.GlyphTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "Description", ModelClass.DescriptionDomainPropertyId, typeof(ModelClass.DescriptionPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "Summary", ModelClass.SummaryDomainPropertyId, typeof(ModelClass.SummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "BaseClass", ModelClass.BaseClassDomainPropertyId, typeof(ModelClass.BaseClassPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "CustomAttributes", ModelClass.CustomAttributesDomainPropertyId, typeof(ModelClass.CustomAttributesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "AutoPropertyDefault", ModelClass.AutoPropertyDefaultDomainPropertyId, typeof(ModelClass.AutoPropertyDefaultPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "GenerateCode", ModelClass.GenerateCodeDomainPropertyId, typeof(ModelClass.GenerateCodePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsPropertyBag", ModelClass.IsPropertyBagDomainPropertyId, typeof(ModelClass.IsPropertyBagPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsQueryType", ModelClass.IsQueryTypeDomainPropertyId, typeof(ModelClass.IsQueryTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "ExcludeFromMigrations", ModelClass.ExcludeFromMigrationsDomainPropertyId, typeof(ModelClass.ExcludeFromMigrationsPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsDatabaseView", ModelClass.IsDatabaseViewDomainPropertyId, typeof(ModelClass.IsDatabaseViewPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "ViewName", ModelClass.ViewNameDomainPropertyId, typeof(ModelClass.ViewNamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "DefaultConstructorVisibility", ModelClass.DefaultConstructorVisibilityDomainPropertyId, typeof(ModelClass.DefaultConstructorVisibilityPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsDefaultConstructorVisibilityTracking", ModelClass.IsDefaultConstructorVisibilityTrackingDomainPropertyId, typeof(ModelClass.IsDefaultConstructorVisibilityTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsAutoPropertyDefaultTracking", ModelClass.IsAutoPropertyDefaultTrackingDomainPropertyId, typeof(ModelClass.IsAutoPropertyDefaultTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "ShouldShowInterfaceGlyph", ModelClass.ShouldShowInterfaceGlyphDomainPropertyId, typeof(ModelClass.ShouldShowInterfaceGlyphPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "UseTemporalTables", ModelClass.UseTemporalTablesDomainPropertyId, typeof(ModelClass.UseTemporalTablesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "IsAssociationClass", ModelClass.IsAssociationClassDomainPropertyId, typeof(ModelClass.IsAssociationClassPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "DescribedAssociationElementId", ModelClass.DescribedAssociationElementIdDomainPropertyId, typeof(ModelClass.DescribedAssociationElementIdPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelClass), "TableComment", ModelClass.TableCommentDomainPropertyId, typeof(ModelClass.TableCommentPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Type", ModelAttribute.TypeDomainPropertyId, typeof(ModelAttribute.TypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "InitialValue", ModelAttribute.InitialValueDomainPropertyId, typeof(ModelAttribute.InitialValuePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsIdentity", ModelAttribute.IsIdentityDomainPropertyId, typeof(ModelAttribute.IsIdentityPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Required", ModelAttribute.RequiredDomainPropertyId, typeof(ModelAttribute.RequiredPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Persistent", ModelAttribute.PersistentDomainPropertyId, typeof(ModelAttribute.PersistentPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "MaxLength", ModelAttribute.MaxLengthDomainPropertyId, typeof(ModelAttribute.MaxLengthPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Indexed", ModelAttribute.IndexedDomainPropertyId, typeof(ModelAttribute.IndexedPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IndexedUnique", ModelAttribute.IndexedUniqueDomainPropertyId, typeof(ModelAttribute.IndexedUniquePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "StringType", ModelAttribute.StringTypeDomainPropertyId, typeof(ModelAttribute.StringTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "TableOverride", ModelAttribute.TableOverrideDomainPropertyId, typeof(ModelAttribute.TableOverridePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsConcurrencyToken", ModelAttribute.IsConcurrencyTokenDomainPropertyId, typeof(ModelAttribute.IsConcurrencyTokenPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IdentityType", ModelAttribute.IdentityTypeDomainPropertyId, typeof(ModelAttribute.IdentityTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Description", ModelAttribute.DescriptionDomainPropertyId, typeof(ModelAttribute.DescriptionPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Summary", ModelAttribute.SummaryDomainPropertyId, typeof(ModelAttribute.SummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Name", ModelAttribute.NameDomainPropertyId, typeof(ModelAttribute.NamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "SetterVisibility", ModelAttribute.SetterVisibilityDomainPropertyId, typeof(ModelAttribute.SetterVisibilityPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "Virtual", ModelAttribute.VirtualDomainPropertyId, typeof(ModelAttribute.VirtualPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "ReadOnly", ModelAttribute.ReadOnlyDomainPropertyId, typeof(ModelAttribute.ReadOnlyPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "AutoProperty", ModelAttribute.AutoPropertyDomainPropertyId, typeof(ModelAttribute.AutoPropertyPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "MinLength", ModelAttribute.MinLengthDomainPropertyId, typeof(ModelAttribute.MinLengthPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "ColumnName", ModelAttribute.ColumnNameDomainPropertyId, typeof(ModelAttribute.ColumnNamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsColumnNameTracking", ModelAttribute.IsColumnNameTrackingDomainPropertyId, typeof(ModelAttribute.IsColumnNameTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "ColumnType", ModelAttribute.ColumnTypeDomainPropertyId, typeof(ModelAttribute.ColumnTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsColumnTypeTracking", ModelAttribute.IsColumnTypeTrackingDomainPropertyId, typeof(ModelAttribute.IsColumnTypeTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "CustomAttributes", ModelAttribute.CustomAttributesDomainPropertyId, typeof(ModelAttribute.CustomAttributesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "DisplayText", ModelAttribute.DisplayTextDomainPropertyId, typeof(ModelAttribute.DisplayTextPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "ImplementNotify", ModelAttribute.ImplementNotifyDomainPropertyId, typeof(ModelAttribute.ImplementNotifyPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsImplementNotifyTracking", ModelAttribute.IsImplementNotifyTrackingDomainPropertyId, typeof(ModelAttribute.IsImplementNotifyTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsAutoPropertyTracking", ModelAttribute.IsAutoPropertyTrackingDomainPropertyId, typeof(ModelAttribute.IsAutoPropertyTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsForeignKeyFor", ModelAttribute.IsForeignKeyForDomainPropertyId, typeof(ModelAttribute.IsForeignKeyForPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "BackingFieldName", ModelAttribute.BackingFieldNameDomainPropertyId, typeof(ModelAttribute.BackingFieldNamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "DatabaseCollation", ModelAttribute.DatabaseCollationDomainPropertyId, typeof(ModelAttribute.DatabaseCollationPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsDatabaseCollationTracking", ModelAttribute.IsDatabaseCollationTrackingDomainPropertyId, typeof(ModelAttribute.IsDatabaseCollationTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "PropertyAccessMode", ModelAttribute.PropertyAccessModeDomainPropertyId, typeof(ModelAttribute.PropertyAccessModePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsAbstract", ModelAttribute.IsAbstractDomainPropertyId, typeof(ModelAttribute.IsAbstractPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelAttribute), "IsPropertyAccessModeTracking", ModelAttribute.IsPropertyAccessModeTrackingDomainPropertyId, typeof(ModelAttribute.IsPropertyAccessModeTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(Comment), "Text", Comment.TextDomainPropertyId, typeof(Comment.TextPropertyHandler)),
	         new DomainMemberInfo(typeof(Comment), "ShortText", Comment.ShortTextDomainPropertyId, typeof(Comment.ShortTextPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "ValueType", ModelEnum.ValueTypeDomainPropertyId, typeof(ModelEnum.ValueTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "Namespace", ModelEnum.NamespaceDomainPropertyId, typeof(ModelEnum.NamespacePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "IsNamespaceTracking", ModelEnum.IsNamespaceTrackingDomainPropertyId, typeof(ModelEnum.IsNamespaceTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "Name", ModelEnum.NameDomainPropertyId, typeof(ModelEnum.NamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "IsFlags", ModelEnum.IsFlagsDomainPropertyId, typeof(ModelEnum.IsFlagsPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "OutputDirectory", ModelEnum.OutputDirectoryDomainPropertyId, typeof(ModelEnum.OutputDirectoryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "IsOutputDirectoryTracking", ModelEnum.IsOutputDirectoryTrackingDomainPropertyId, typeof(ModelEnum.IsOutputDirectoryTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "GlyphType", ModelEnum.GlyphTypeDomainPropertyId, typeof(ModelEnum.GlyphTypePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "Description", ModelEnum.DescriptionDomainPropertyId, typeof(ModelEnum.DescriptionPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "Summary", ModelEnum.SummaryDomainPropertyId, typeof(ModelEnum.SummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "CustomAttributes", ModelEnum.CustomAttributesDomainPropertyId, typeof(ModelEnum.CustomAttributesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnum), "GenerateCode", ModelEnum.GenerateCodeDomainPropertyId, typeof(ModelEnum.GenerateCodePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnumValue), "Name", ModelEnumValue.NameDomainPropertyId, typeof(ModelEnumValue.NamePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnumValue), "Value", ModelEnumValue.ValueDomainPropertyId, typeof(ModelEnumValue.ValuePropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnumValue), "Description", ModelEnumValue.DescriptionDomainPropertyId, typeof(ModelEnumValue.DescriptionPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnumValue), "Summary", ModelEnumValue.SummaryDomainPropertyId, typeof(ModelEnumValue.SummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnumValue), "CustomAttributes", ModelEnumValue.CustomAttributesDomainPropertyId, typeof(ModelEnumValue.CustomAttributesPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelEnumValue), "DisplayText", ModelEnumValue.DisplayTextDomainPropertyId, typeof(ModelEnumValue.DisplayTextPropertyHandler)),
	         new DomainMemberInfo(typeof(ModelDiagramData), "Name", ModelDiagramData.NameDomainPropertyId, typeof(ModelDiagramData.NamePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "SourceMultiplicity", Association.SourceMultiplicityDomainPropertyId, typeof(Association.SourceMultiplicityPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetMultiplicity", Association.TargetMultiplicityDomainPropertyId, typeof(Association.TargetMultiplicityPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetPropertyName", Association.TargetPropertyNameDomainPropertyId, typeof(Association.TargetPropertyNamePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "Persistent", Association.PersistentDomainPropertyId, typeof(Association.PersistentPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "SourceMultiplicityDisplay", Association.SourceMultiplicityDisplayDomainPropertyId, typeof(Association.SourceMultiplicityDisplayPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetMultiplicityDisplay", Association.TargetMultiplicityDisplayDomainPropertyId, typeof(Association.TargetMultiplicityDisplayPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "SourceDeleteAction", Association.SourceDeleteActionDomainPropertyId, typeof(Association.SourceDeleteActionPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetDeleteAction", Association.TargetDeleteActionDomainPropertyId, typeof(Association.TargetDeleteActionPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "CollectionClass", Association.CollectionClassDomainPropertyId, typeof(Association.CollectionClassPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetDescription", Association.TargetDescriptionDomainPropertyId, typeof(Association.TargetDescriptionPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetSummary", Association.TargetSummaryDomainPropertyId, typeof(Association.TargetSummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "Summary", Association.SummaryDomainPropertyId, typeof(Association.SummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "IsCollectionClassTracking", Association.IsCollectionClassTrackingDomainPropertyId, typeof(Association.IsCollectionClassTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "SourceRole", Association.SourceRoleDomainPropertyId, typeof(Association.SourceRolePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetRole", Association.TargetRoleDomainPropertyId, typeof(Association.TargetRolePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "ForeignKeyLocation", Association.ForeignKeyLocationDomainPropertyId, typeof(Association.ForeignKeyLocationPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetCustomAttributes", Association.TargetCustomAttributesDomainPropertyId, typeof(Association.TargetCustomAttributesPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetDisplayText", Association.TargetDisplayTextDomainPropertyId, typeof(Association.TargetDisplayTextPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetImplementNotify", Association.TargetImplementNotifyDomainPropertyId, typeof(Association.TargetImplementNotifyPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "IsTargetImplementNotifyTracking", Association.IsTargetImplementNotifyTrackingDomainPropertyId, typeof(Association.IsTargetImplementNotifyTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "FKPropertyName", Association.FKPropertyNameDomainPropertyId, typeof(Association.FKPropertyNamePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetPropertyNameDisplay", Association.TargetPropertyNameDisplayDomainPropertyId, typeof(Association.TargetPropertyNameDisplayPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "Name", Association.NameDomainPropertyId, typeof(Association.NamePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "JoinTableName", Association.JoinTableNameDomainPropertyId, typeof(Association.JoinTableNamePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetBackingFieldName", Association.TargetBackingFieldNameDomainPropertyId, typeof(Association.TargetBackingFieldNamePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetPropertyAccessMode", Association.TargetPropertyAccessModeDomainPropertyId, typeof(Association.TargetPropertyAccessModePropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetAutoProperty", Association.TargetAutoPropertyDomainPropertyId, typeof(Association.TargetAutoPropertyPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "IsTargetAutoPropertyTracking", Association.IsTargetAutoPropertyTrackingDomainPropertyId, typeof(Association.IsTargetAutoPropertyTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "IsTargetAbstract", Association.IsTargetAbstractDomainPropertyId, typeof(Association.IsTargetAbstractPropertyHandler)),
	         new DomainMemberInfo(typeof(Association), "TargetAutoInclude", Association.TargetAutoIncludeDomainPropertyId, typeof(Association.TargetAutoIncludePropertyHandler)),
	         new DomainMemberInfo(typeof(Generalization), "Name", Generalization.NameDomainPropertyId, typeof(Generalization.NamePropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourcePropertyName", BidirectionalAssociation.SourcePropertyNameDomainPropertyId, typeof(BidirectionalAssociation.SourcePropertyNamePropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceDescription", BidirectionalAssociation.SourceDescriptionDomainPropertyId, typeof(BidirectionalAssociation.SourceDescriptionPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceSummary", BidirectionalAssociation.SourceSummaryDomainPropertyId, typeof(BidirectionalAssociation.SourceSummaryPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceCustomAttributes", BidirectionalAssociation.SourceCustomAttributesDomainPropertyId, typeof(BidirectionalAssociation.SourceCustomAttributesPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceDisplayText", BidirectionalAssociation.SourceDisplayTextDomainPropertyId, typeof(BidirectionalAssociation.SourceDisplayTextPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceImplementNotify", BidirectionalAssociation.SourceImplementNotifyDomainPropertyId, typeof(BidirectionalAssociation.SourceImplementNotifyPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "IsSourceImplementNotifyTracking", BidirectionalAssociation.IsSourceImplementNotifyTrackingDomainPropertyId, typeof(BidirectionalAssociation.IsSourceImplementNotifyTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourcePropertyNameDisplay", BidirectionalAssociation.SourcePropertyNameDisplayDomainPropertyId, typeof(BidirectionalAssociation.SourcePropertyNameDisplayPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourcePropertyAccessMode", BidirectionalAssociation.SourcePropertyAccessModeDomainPropertyId, typeof(BidirectionalAssociation.SourcePropertyAccessModePropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceBackingFieldName", BidirectionalAssociation.SourceBackingFieldNameDomainPropertyId, typeof(BidirectionalAssociation.SourceBackingFieldNamePropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceAutoProperty", BidirectionalAssociation.SourceAutoPropertyDomainPropertyId, typeof(BidirectionalAssociation.SourceAutoPropertyPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "IsSourceAutoPropertyTracking", BidirectionalAssociation.IsSourceAutoPropertyTrackingDomainPropertyId, typeof(BidirectionalAssociation.IsSourceAutoPropertyTrackingPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "IsSourceAbstract", BidirectionalAssociation.IsSourceAbstractDomainPropertyId, typeof(BidirectionalAssociation.IsSourceAbstractPropertyHandler)),
	         new DomainMemberInfo(typeof(BidirectionalAssociation), "SourceAutoInclude", BidirectionalAssociation.SourceAutoIncludeDomainPropertyId, typeof(BidirectionalAssociation.SourceAutoIncludePropertyHandler)),
	         new DomainMemberInfo(typeof(EFModelDiagram), "FillColor", EFModelDiagram.FillColorDomainPropertyId, typeof(EFModelDiagram.FillColorPropertyHandler)),
	         new DomainMemberInfo(typeof(EFModelDiagram), "TextColor", EFModelDiagram.TextColorDomainPropertyId, typeof(EFModelDiagram.TextColorPropertyHandler)),
	         new DomainMemberInfo(typeof(AssociationConnector), "Color", AssociationConnector.ColorDomainPropertyId, typeof(AssociationConnector.ColorPropertyHandler)),
	         new DomainMemberInfo(typeof(AssociationConnector), "DashStyle", AssociationConnector.DashStyleDomainPropertyId, typeof(AssociationConnector.DashStylePropertyHandler)),
	         new DomainMemberInfo(typeof(AssociationConnector), "TextColor", AssociationConnector.TextColorDomainPropertyId, typeof(AssociationConnector.TextColorPropertyHandler)),
	         new DomainMemberInfo(typeof(GeneralizationConnector), "Color", GeneralizationConnector.ColorDomainPropertyId, typeof(GeneralizationConnector.ColorPropertyHandler)),
	         new DomainMemberInfo(typeof(GeneralizationConnector), "TextColor", GeneralizationConnector.TextColorDomainPropertyId, typeof(GeneralizationConnector.TextColorPropertyHandler)),
	         new DomainMemberInfo(typeof(CommentConnector), "Color", CommentConnector.ColorDomainPropertyId, typeof(CommentConnector.ColorPropertyHandler)),
	         new DomainMemberInfo(typeof(CommentConnector), "TextColor", CommentConnector.TextColorDomainPropertyId, typeof(CommentConnector.TextColorPropertyHandler)),
	         new DomainMemberInfo(typeof(CommentBoxShape), "FillColor", CommentBoxShape.FillColorDomainPropertyId, typeof(CommentBoxShape.FillColorPropertyHandler)),
	         new DomainMemberInfo(typeof(CommentBoxShape), "OutlineColor", CommentBoxShape.OutlineColorDomainPropertyId, typeof(CommentBoxShape.OutlineColorPropertyHandler)),
	         new DomainMemberInfo(typeof(CommentBoxShape), "TextColor", CommentBoxShape.TextColorDomainPropertyId, typeof(CommentBoxShape.TextColorPropertyHandler)),
	         new DomainMemberInfo(typeof(CommentBoxShape), "OutlineDashStyle", CommentBoxShape.OutlineDashStyleDomainPropertyId, typeof(CommentBoxShape.OutlineDashStylePropertyHandler)),
	         new DomainMemberInfo(typeof(CommentBoxShape), "OutlineThickness", CommentBoxShape.OutlineThicknessDomainPropertyId, typeof(CommentBoxShape.OutlineThicknessPropertyHandler)),
	         new DomainMemberInfo(typeof(CommentBoxShape), "Visible", CommentBoxShape.VisibleDomainPropertyId, typeof(CommentBoxShape.VisiblePropertyHandler)),
	         new DomainMemberInfo(typeof(ClassShape), "FillColor", ClassShape.FillColorDomainPropertyId, typeof(ClassShape.FillColorPropertyHandler)),
	         new DomainMemberInfo(typeof(ClassShape), "TextColor", ClassShape.TextColorDomainPropertyId, typeof(ClassShape.TextColorPropertyHandler)),
	         new DomainMemberInfo(typeof(ClassShape), "OutlineColor", ClassShape.OutlineColorDomainPropertyId, typeof(ClassShape.OutlineColorPropertyHandler)),
	         new DomainMemberInfo(typeof(ClassShape), "OutlineDashStyle", ClassShape.OutlineDashStyleDomainPropertyId, typeof(ClassShape.OutlineDashStylePropertyHandler)),
	         new DomainMemberInfo(typeof(ClassShape), "Visible", ClassShape.VisibleDomainPropertyId, typeof(ClassShape.VisiblePropertyHandler)),
	         new DomainMemberInfo(typeof(ClassShape), "OutlineThickness", ClassShape.OutlineThicknessDomainPropertyId, typeof(ClassShape.OutlineThicknessPropertyHandler)),
	         new DomainMemberInfo(typeof(EnumShape), "FillColor", EnumShape.FillColorDomainPropertyId, typeof(EnumShape.FillColorPropertyHandler)),
	         new DomainMemberInfo(typeof(EnumShape), "TextColor", EnumShape.TextColorDomainPropertyId, typeof(EnumShape.TextColorPropertyHandler)),
	         new DomainMemberInfo(typeof(EnumShape), "OutlineColor", EnumShape.OutlineColorDomainPropertyId, typeof(EnumShape.OutlineColorPropertyHandler)),
	         new DomainMemberInfo(typeof(EnumShape), "Visible", EnumShape.VisibleDomainPropertyId, typeof(EnumShape.VisiblePropertyHandler)),
	         new DomainMemberInfo(typeof(EnumShape), "OutlineThickness", EnumShape.OutlineThicknessDomainPropertyId, typeof(EnumShape.OutlineThicknessPropertyHandler)),
	         new DomainMemberInfo(typeof(EnumShape), "OutlineDashStyle", EnumShape.OutlineDashStyleDomainPropertyId, typeof(EnumShape.OutlineDashStylePropertyHandler)),
	      };
	   }
	   /// <summary>
	   /// Gets the list of generated domain roles.
	   /// </summary>
	   /// <returns>List of role data.</returns>
	   protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
	   {
	      return new DomainRolePlayerInfo[]
	      {
	         new DomainRolePlayerInfo(typeof(Association), "Source", Association.SourceDomainRoleId),
	         new DomainRolePlayerInfo(typeof(Association), "Target", Association.TargetDomainRoleId),
	         new DomainRolePlayerInfo(typeof(UnidirectionalAssociation), "UnidirectionalSource", UnidirectionalAssociation.UnidirectionalSourceDomainRoleId),
	         new DomainRolePlayerInfo(typeof(UnidirectionalAssociation), "UnidirectionalTarget", UnidirectionalAssociation.UnidirectionalTargetDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ClassHasAttributes), "ModelClass", ClassHasAttributes.ModelClassDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ClassHasAttributes), "Attribute", ClassHasAttributes.AttributeDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasComments), "ModelRoot", ModelRootHasComments.ModelRootDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasComments), "Comment", ModelRootHasComments.CommentDomainRoleId),
	         new DomainRolePlayerInfo(typeof(Generalization), "Superclass", Generalization.SuperclassDomainRoleId),
	         new DomainRolePlayerInfo(typeof(Generalization), "Subclass", Generalization.SubclassDomainRoleId),
	         new DomainRolePlayerInfo(typeof(BidirectionalAssociation), "BidirectionalSource", BidirectionalAssociation.BidirectionalSourceDomainRoleId),
	         new DomainRolePlayerInfo(typeof(BidirectionalAssociation), "BidirectionalTarget", BidirectionalAssociation.BidirectionalTargetDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasEnums), "ModelRoot", ModelRootHasEnums.ModelRootDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasEnums), "ModelEnum", ModelRootHasEnums.ModelEnumDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelEnumHasValues), "Enum", ModelEnumHasValues.EnumDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelEnumHasValues), "Value", ModelEnumHasValues.ValueDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasClasses), "ModelRoot", ModelRootHasClasses.ModelRootDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasClasses), "ModelClass", ModelRootHasClasses.ModelClassDomainRoleId),
	         new DomainRolePlayerInfo(typeof(CommentReferencesSubjects), "Comment", CommentReferencesSubjects.CommentDomainRoleId),
	         new DomainRolePlayerInfo(typeof(CommentReferencesSubjects), "DesignElement", CommentReferencesSubjects.DesignElementDomainRoleId),
	         new DomainRolePlayerInfo(typeof(CommentReferencesClasses), "Comment", CommentReferencesClasses.CommentDomainRoleId),
	         new DomainRolePlayerInfo(typeof(CommentReferencesClasses), "ModelClass", CommentReferencesClasses.ModelClassDomainRoleId),
	         new DomainRolePlayerInfo(typeof(CommentReferencesEnums), "Comment", CommentReferencesEnums.CommentDomainRoleId),
	         new DomainRolePlayerInfo(typeof(CommentReferencesEnums), "ModelEnum", CommentReferencesEnums.ModelEnumDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasModelDiagrams), "ModelRoot", ModelRootHasModelDiagrams.ModelRootDomainRoleId),
	         new DomainRolePlayerInfo(typeof(ModelRootHasModelDiagrams), "ModelDiagramData", ModelRootHasModelDiagrams.ModelDiagramDataDomainRoleId),
	      };
	   }
	   #endregion
	   #region Factory methods
	   private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
	   /// <summary>
	   /// Creates an element of specified type.
	   /// </summary>
	   /// <param name="partition">Partition where element is to be created.</param>
	   /// <param name="elementType">Element type which belongs to this domain model.</param>
	   /// <param name="propertyAssignments">New element property assignments.</param>
	   /// <returns>Created element.</returns>
	   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
	   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	   public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
	   {
	      if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
	      if (createElementMap == null)
	      {
	         createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(17);
	         createElementMap.Add(typeof(ModelRoot), 0);
	         createElementMap.Add(typeof(ModelClass), 1);
	         createElementMap.Add(typeof(ModelAttribute), 2);
	         createElementMap.Add(typeof(Comment), 3);
	         createElementMap.Add(typeof(ModelEnum), 4);
	         createElementMap.Add(typeof(ModelEnumValue), 5);
	         createElementMap.Add(typeof(ModelDiagramData), 6);
	         createElementMap.Add(typeof(EFModelDiagram), 7);
	         createElementMap.Add(typeof(UnidirectionalConnector), 8);
	         createElementMap.Add(typeof(BidirectionalConnector), 9);
	         createElementMap.Add(typeof(GeneralizationConnector), 10);
	         createElementMap.Add(typeof(CommentConnector), 11);
	         createElementMap.Add(typeof(CommentBoxShape), 12);
	         createElementMap.Add(typeof(ClassShape), 13);
	         createElementMap.Add(typeof(EnumShape), 14);
	      }
	      int index;
	      if (!createElementMap.TryGetValue(elementType, out index))
	      {
	         // construct exception error message
	         string exceptionError = string.Format(
	                     global::System.Globalization.CultureInfo.CurrentCulture,
	                     global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
	                     elementType.Name);
	         throw new global::System.ArgumentException(exceptionError, "elementType");
	      }
	      switch (index)
	      {
	         case 0: return new ModelRoot(partition, propertyAssignments);
	         case 1: return new ModelClass(partition, propertyAssignments);
	         case 2: return new ModelAttribute(partition, propertyAssignments);
	         case 3: return new Comment(partition, propertyAssignments);
	         case 4: return new ModelEnum(partition, propertyAssignments);
	         case 5: return new ModelEnumValue(partition, propertyAssignments);
	         case 6: return new ModelDiagramData(partition, propertyAssignments);
	         case 7: return new EFModelDiagram(partition, propertyAssignments);
	         case 8: return new UnidirectionalConnector(partition, propertyAssignments);
	         case 9: return new BidirectionalConnector(partition, propertyAssignments);
	         case 10: return new GeneralizationConnector(partition, propertyAssignments);
	         case 11: return new CommentConnector(partition, propertyAssignments);
	         case 12: return new CommentBoxShape(partition, propertyAssignments);
	         case 13: return new ClassShape(partition, propertyAssignments);
	         case 14: return new EnumShape(partition, propertyAssignments);
	         default: return null;
	      }
	   }
	
	   private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
	   /// <summary>
	   /// Creates an element link of specified type.
	   /// </summary>
	   /// <param name="partition">Partition where element is to be created.</param>
	   /// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
	   /// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
	   /// <param name="propertyAssignments">New element property assignments.</param>
	   /// <returns>Created element link.</returns>
	   [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
	   public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
	   {
	      if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
	      if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
	      if (createElementLinkMap == null)
	      {
	         createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(13);
	         createElementLinkMap.Add(typeof(UnidirectionalAssociation), 0);
	         createElementLinkMap.Add(typeof(ClassHasAttributes), 1);
	         createElementLinkMap.Add(typeof(ModelRootHasComments), 2);
	         createElementLinkMap.Add(typeof(Generalization), 3);
	         createElementLinkMap.Add(typeof(BidirectionalAssociation), 4);
	         createElementLinkMap.Add(typeof(ModelRootHasEnums), 5);
	         createElementLinkMap.Add(typeof(ModelEnumHasValues), 6);
	         createElementLinkMap.Add(typeof(ModelRootHasClasses), 7);
	         createElementLinkMap.Add(typeof(CommentReferencesClasses), 8);
	         createElementLinkMap.Add(typeof(CommentReferencesEnums), 9);
	         createElementLinkMap.Add(typeof(ModelRootHasModelDiagrams), 10);
	      }
	      int index;
	      if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
	      {
	         // construct exception error message
	         string exceptionError = string.Format(
	                     global::System.Globalization.CultureInfo.CurrentCulture,
	                     global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
	                     elementLinkType.Name);
	         throw new global::System.ArgumentException(exceptionError, "elementLinkType");
	
	      }
	      switch (index)
	      {
	         case 0: return new UnidirectionalAssociation(partition, roleAssignments, propertyAssignments);
	         case 1: return new ClassHasAttributes(partition, roleAssignments, propertyAssignments);
	         case 2: return new ModelRootHasComments(partition, roleAssignments, propertyAssignments);
	         case 3: return new Generalization(partition, roleAssignments, propertyAssignments);
	         case 4: return new BidirectionalAssociation(partition, roleAssignments, propertyAssignments);
	         case 5: return new ModelRootHasEnums(partition, roleAssignments, propertyAssignments);
	         case 6: return new ModelEnumHasValues(partition, roleAssignments, propertyAssignments);
	         case 7: return new ModelRootHasClasses(partition, roleAssignments, propertyAssignments);
	         case 8: return new CommentReferencesClasses(partition, roleAssignments, propertyAssignments);
	         case 9: return new CommentReferencesEnums(partition, roleAssignments, propertyAssignments);
	         case 10: return new ModelRootHasModelDiagrams(partition, roleAssignments, propertyAssignments);
	         default: return null;
	      }
	   }
	   #endregion
	   #region Resource manager
	
	   private static global::System.Resources.ResourceManager resourceManager;
	
	   /// <summary>
	   /// The base name of this model's resources.
	   /// </summary>
	   public const string ResourceBaseName = "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx";
	
	   /// <summary>
	   /// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
	   /// </summary>
	   public override global::System.Resources.ResourceManager ResourceManager
	   {
	      [global::System.Diagnostics.DebuggerStepThrough]
	      get
	      {
	         return EFModelDomainModel.SingletonResourceManager;
	      }
	   }
	
	   /// <summary>
	   /// Gets the Singleton ResourceManager for this domain model.
	   /// </summary>
	   public static global::System.Resources.ResourceManager SingletonResourceManager
	   {
	      [global::System.Diagnostics.DebuggerStepThrough]
	      get
	      {
	         if (EFModelDomainModel.resourceManager == null)
	         {
	            EFModelDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(EFModelDomainModel).Assembly);
	         }
	         return EFModelDomainModel.resourceManager;
	      }
	   }
	   #endregion
	   #region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return EFModelDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return EFModelDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (EFModelDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new EFModelCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					EFModelDomainModel.copyClosure = copyFilter;
				}
				return EFModelDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (EFModelDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new EFModelDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					EFModelDomainModel.removeClosure = removeFilter;
				}
				return EFModelDomainModel.removeClosure;
			}
		}
	   #endregion
	   #region Diagram rule helpers
	   /// <summary>
	   /// Enables rules in this domain model related to diagram fixup for the given store.
	   /// If diagram data will be loaded into the store, this method should be called first to ensure
	   /// that the diagram behaves properly.
	   /// </summary>
	   public static void EnableDiagramRules(DslModeling::Store store)
	   {
	      if(store == null) throw new global::System.ArgumentNullException("store");
	
	      DslModeling::RuleManager ruleManager = store.RuleManager;
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.FixUpAllDiagrams));
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.DecoratorPropertyChanged));
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.ConnectorRolePlayerChanged));
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemAddRule));
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemDeleteRule));
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemRolePlayerChangeRule));
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemRolePlayerPositionChangeRule));
	      ruleManager.EnableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemChangeRule));
	   }
	
	   /// <summary>
	   /// Disables rules in this domain model related to diagram fixup for the given store.
	   /// </summary>
	   public static void DisableDiagramRules(DslModeling::Store store)
	   {
	      if(store == null) throw new global::System.ArgumentNullException("store");
	
	      DslModeling::RuleManager ruleManager = store.RuleManager;
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.FixUpAllDiagrams));
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.DecoratorPropertyChanged));
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.ConnectorRolePlayerChanged));
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemAddRule));
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemDeleteRule));
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemRolePlayerChangeRule));
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemRolePlayerPositionChangeRule));
	      ruleManager.DisableRule(typeof(global::Sawczyn.EFDesigner.EFModel.CompartmentItemChangeRule));
	   }
	   #endregion
	}
	
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EFModelDeleteClosure : EFModelDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EFModelDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EFModelDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public EFModelDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Sawczyn.EFDesigner.EFModel.ClassHasAttributes.AttributeDomainRoleId, true);
			DomainRoles.Add(global::Sawczyn.EFDesigner.EFModel.ModelRootHasComments.CommentDomainRoleId, true);
			DomainRoles.Add(global::Sawczyn.EFDesigner.EFModel.ModelRootHasEnums.ModelEnumDomainRoleId, true);
			DomainRoles.Add(global::Sawczyn.EFDesigner.EFModel.ModelEnumHasValues.ValueDomainRoleId, true);
			DomainRoles.Add(global::Sawczyn.EFDesigner.EFModel.ModelRootHasClasses.ModelClassDomainRoleId, true);
			DomainRoles.Add(global::Sawczyn.EFDesigner.EFModel.ModelRootHasModelDiagrams.ModelDiagramDataDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EFModelCopyClosure : EFModelCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EFModelCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class EFModelCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public EFModelCopyClosureBase():base()
		{
		}
	}
	#endregion
	
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: TypeAccessModifier
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum TypeAccessModifier
	{
		/// <summary>
		/// Public
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Public.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Public = 0,
		/// <summary>
		/// Private
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Private.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Private = 1,
		/// <summary>
		/// Protected
		/// No description available
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Protected.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Protected = 2,
		/// <summary>
		/// Internal
		/// No description available
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifier/Internal.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Internal = 3,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: InheritanceModifier
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum InheritanceModifier
	{
		/// <summary>
		/// None
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.InheritanceModifier/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 0,
		/// <summary>
		/// Abstract
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.InheritanceModifier/Abstract.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Abstract = 1,
		/// <summary>
		/// Sealed
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.InheritanceModifier/Sealed.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Sealed = 2,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: Multiplicity
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum Multiplicity
	{
		/// <summary>
		/// ZeroMany
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Multiplicity/ZeroMany.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		ZeroMany = 0,
		/// <summary>
		/// One
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Multiplicity/One.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		One = 1,
		/// <summary>
		/// ZeroOne
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Multiplicity/ZeroOne.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		ZeroOne = 2,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: ContainerAccess
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ContainerAccess
	{
		/// <summary>
		/// Public
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ContainerAccess/Public.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Public = 1,
		/// <summary>
		/// Internal
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ContainerAccess/Internal.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Internal = 0,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: DeleteAction
	/// No description available
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum DeleteAction
	{
		/// <summary>
		/// Cascade
		/// Force a cascade delete across this association
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DeleteAction/Cascade.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Cascade = 0,
		/// <summary>
		/// None
		/// Ensure other end is not automatically deleted when one end is deleted.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DeleteAction/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 1,
		/// <summary>
		/// Default
		/// Use the default Entity Framework behavior for the type of association
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DeleteAction/Default.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Default = 2,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: CollectionType
	/// No description available
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum CollectionType
	{
		/// <summary>
		/// List
		/// No description available
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CollectionType/List.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		List = 1,
		/// <summary>
		/// HashSet
		/// No description available
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CollectionType/HashSet.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		HashSet = 0,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: EnumValueType
	/// No description available
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum EnumValueType
	{
		/// <summary>
		/// Int16
		/// short
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/Int16.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Int16 = 0,
		/// <summary>
		/// Int32
		/// int
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/Int32.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Int32 = 1,
		/// <summary>
		/// Int64
		/// long
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/Int64.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Int64 = 2,
		/// <summary>
		/// Byte
		/// byte
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/Byte.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Byte = 3,
		/// <summary>
		/// SByte
		/// sbyte
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/SByte.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		SByte = 4,
		/// <summary>
		/// UInt16
		/// ushort
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/UInt16.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		UInt16 = 5,
		/// <summary>
		/// UInt32
		/// uint
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/UInt32.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		UInt32 = 6,
		/// <summary>
		/// UInt64
		/// ulong
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EnumValueType/UInt64.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		UInt64 = 7,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: DatabaseInitializerKind
	/// Description for Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum DatabaseInitializerKind
	{
		/// <summary>
		/// CreateDatabaseIfNotExists
		/// Will recreate and optionally re-seed the database only if the database does not
		/// exist.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/CreateDatabaseIfNotExists.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		CreateDatabaseIfNotExists = 0,
		/// <summary>
		/// DropCreateDatabaseAlways
		/// Will always recreate and optionally re-seed the database the first time that a
		/// context is used in the app domain.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/DropCreateDatabaseAlways.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DropCreateDatabaseAlways = 1,
		/// <summary>
		/// DropCreateDatabaseIfModelChanges
		/// Will delete, recreate, and optionally re-seed the database only if the model has
		/// changed since the database was created.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/DropCreateDatabaseIfModelChanges.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DropCreateDatabaseIfModelChanges = 2,
		/// <summary>
		/// MigrateDatabaseToLatestVersion
		/// Will use Code First Migrations to update the database to the latest version.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/MigrateDatabaseToLatestVersion.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		MigrateDatabaseToLatestVersion = 3,
		/// <summary>
		/// None
		/// Null configuration. Will not check database for correctness, speeding up
		/// initialization and queries.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseInitializerKind/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 4,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: HTML5Type
	/// Description for Sawczyn.EFDesigner.EFModel.HTML5Type
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum HTML5Type
	{
		/// <summary>
		/// None
		/// No special meaning
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 0,
		/// <summary>
		/// Color
		/// Value is a color
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Color.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Color = 1,
		/// <summary>
		/// Date
		/// Value is a date (consider changing type to DateTime)
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Date.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Date = 2,
		/// <summary>
		/// DateTime
		/// Value is a date/time (consider changing type to DateTime)
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/DateTime.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DateTime = 3,
		/// <summary>
		/// Email
		/// Value is an email address
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Email.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Email = 4,
		/// <summary>
		/// Month
		/// Value is a month
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Month.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Month = 5,
		/// <summary>
		/// Number
		/// Value is a number (consider changing type to a numeric type)
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Number.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Number = 6,
		/// <summary>
		/// Range
		/// Value is a numeric range
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Range.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Range = 8,
		/// <summary>
		/// Search
		/// Value will be used in a search predicate
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Search.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Search = 9,
		/// <summary>
		/// Telephone
		/// Value is a telephone number
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Telephone.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Telephone = 10,
		/// <summary>
		/// Time
		/// Value is a time
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Time.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Time = 11,
		/// <summary>
		/// URl
		/// Value is a URL
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/URl.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		URl = 12,
		/// <summary>
		/// Week
		/// Value is a calendar week
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Week.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Week = 13,
		/// <summary>
		/// Password
		/// Value is a password
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.HTML5Type/Password.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Password = 7,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: Concurrency
	/// Types of concurrency handling
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum Concurrency
	{
		/// <summary>
		/// None
		/// Don't generate code to handle concurrency
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Concurrency/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 0,
		/// <summary>
		/// Optimistic
		/// Generate timestamp columns to handle optimistic concurrency
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.Concurrency/Optimistic.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Optimistic = 1,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: ConcurrencyOverride
	/// Description for Sawczyn.EFDesigner.EFModel.ConcurrencyOverride
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ConcurrencyOverride
	{
		/// <summary>
		/// None
		/// Don't generate code to handle concurrency
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 1,
		/// <summary>
		/// Optimistic
		/// Generate timestamp columns to handle optimistic concurrency
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/Optimistic.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Optimistic = 2,
		/// <summary>
		/// Default
		/// Use default for model
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ConcurrencyOverride/Default.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Default = 0,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: EFVersion
	/// Description for Sawczyn.EFDesigner.EFModel.EFVersion
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum EFVersion
	{
		/// <summary>
		/// EF6
		/// Entity Framework 6
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EFVersion/EF6.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		EF6 = 0,
		/// <summary>
		/// EFCore
		/// Entity Framework Core
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EFVersion/EFCore.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		EFCore = 1,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: IdentityType
	/// Describes identity generation
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum IdentityType
	{
		/// <summary>
		/// None
		/// The associated property is not an identity
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.IdentityType/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 2,
		/// <summary>
		/// AutoGenerated
		/// The value will be automatically generated in the database
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.IdentityType/AutoGenerated.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		AutoGenerated = 0,
		/// <summary>
		/// Manual
		/// The value will be entered by the program
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.IdentityType/Manual.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Manual = 1,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: SetterAccessModifier
	/// Determines attribute setter visibility
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum SetterAccessModifier
	{
		/// <summary>
		/// Public
		/// Property is public
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Public.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Public = 2,
		/// <summary>
		/// Protected
		/// Property is protected
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Protected.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Protected = 1,
		/// <summary>
		/// Internal
		/// Property is internal
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.SetterAccessModifier/Internal.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Internal = 0,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: CodeStrategy
	/// Which database strategy to use in code generation
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum CodeStrategy
	{
		/// <summary>
		/// TablePerType
		/// A table will be used for every class
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		TablePerType = 2,
		/// <summary>
		/// TablePerConcreteType
		/// Only concrete (not abstract) classes will have tables
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerConcreteType.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		TablePerConcreteType = 0,
		/// <summary>
		/// TablePerHierarchy
		/// A table will be used for every inheritance chain
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.CodeStrategy/TablePerHierarchy.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		TablePerHierarchy = 1,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: EndpointRole
	/// Role a class plays on an association
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum EndpointRole
	{
		/// <summary>
		/// Dependent
		/// Class is the dependent part of the association
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EndpointRole/Dependent.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Dependent = 1,
		/// <summary>
		/// Principal
		/// Class is the controlling (i.e, principal) part of the association
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EndpointRole/Principal.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Principal = 2,
		/// <summary>
		/// NotApplicable
		/// Description for Sawczyn.EFDesigner.EFModel.EndpointRole.NotApplicable
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EndpointRole/NotApplicable.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		NotApplicable = 3,
		/// <summary>
		/// NotSet
		/// Dependent/Principal roles are design decisions and have not been set
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.EndpointRole/NotSet.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		NotSet = 0,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: ForeignKeyOwner
	/// The class that contains the foreign key in a relationship
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ForeignKeyOwner
	{
		/// <summary>
		/// None
		/// No foreign key should be generated
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 0,
		/// <summary>
		/// Source
		/// Foreign key is contained in the Source class
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/Source.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Source = 1,
		/// <summary>
		/// Target
		/// Foreign key is contained in the Target class
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ForeignKeyOwner/Target.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Target = 2,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: DatabaseKind
	/// Database manifest token. Optimization if runtime database type is known and
	/// unchanging.
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum DatabaseKind
	{
		/// <summary>
		/// SqlServer
		/// Description for Sawczyn.EFDesigner.EFModel.DatabaseKind.SqlServer
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseKind/SqlServer.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		SqlServer = 1,
		/// <summary>
		/// SqlServer2012
		/// Description for Sawczyn.EFDesigner.EFModel.DatabaseKind.SqlServer2012
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseKind/SqlServer2012.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		SqlServer2012 = 2,
		/// <summary>
		/// None
		/// Description for Sawczyn.EFDesigner.EFModel.DatabaseKind.None
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.DatabaseKind/None.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		None = 0,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: ValueConverter
	/// Available value converters for EFCore (>= 2.1)
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ValueConverter
	{
		/// <summary>
		/// BoolToZeroOneConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.BoolToZeroOneConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/BoolToZeroOneConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		BoolToZeroOneConverter,
		/// <summary>
		/// BoolToStringConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.BoolToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/BoolToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		BoolToStringConverter,
		/// <summary>
		/// BoolToTwoValuesConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.BoolToTwoValuesConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/BoolToTwoValuesConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		BoolToTwoValuesConverter,
		/// <summary>
		/// BytesToStringConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.BytesToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/BytesToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		BytesToStringConverter,
		/// <summary>
		/// CastingConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.CastingConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/CastingConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		CastingConverter,
		/// <summary>
		/// CharToStringConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.CharToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/CharToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		CharToStringConverter,
		/// <summary>
		/// DateTimeOffsetToBinaryConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.DateTimeOffsetToBinaryConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/DateTimeOffsetToBinaryConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DateTimeOffsetToBinaryConverter,
		/// <summary>
		/// DateTimeOffsetToBytesConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.DateTimeOffsetToBytesConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/DateTimeOffsetToBytesConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DateTimeOffsetToBytesConverter,
		/// <summary>
		/// DateTimeOffsetToStringConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.DateTimeOffsetToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/DateTimeOffsetToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DateTimeOffsetToStringConverter,
		/// <summary>
		/// DateTimeToBinaryConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.DateTimeToBinaryConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/DateTimeToBinaryConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DateTimeToBinaryConverter,
		/// <summary>
		/// DateTimeToStringConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.DateTimeToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/DateTimeToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DateTimeToStringConverter,
		/// <summary>
		/// DateTimeToTicksConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.DateTimeToTicksConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/DateTimeToTicksConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		DateTimeToTicksConverter,
		/// <summary>
		/// EnumToNumberConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.EnumToNumberConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/EnumToNumberConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		EnumToNumberConverter,
		/// <summary>
		/// EnumToStringConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.EnumToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/EnumToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		EnumToStringConverter,
		/// <summary>
		/// GuidToBytesConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.GuidToBytesConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/GuidToBytesConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		GuidToBytesConverter,
		/// <summary>
		/// GuidToStringConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.GuidToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/GuidToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		GuidToStringConverter,
		/// <summary>
		/// NumberToBytesConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.NumberToBytesConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/NumberToBytesConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		NumberToBytesConverter,
		/// <summary>
		/// NumberToStringConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.NumberToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/NumberToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		NumberToStringConverter,
		/// <summary>
		/// StringToBytesConverter
		/// Description for Sawczyn.EFDesigner.EFModel.ValueConverter.StringToBytesConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/StringToBytesConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		StringToBytesConverter,
		/// <summary>
		/// TimeSpanToStringConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.TimeSpanToStringConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/TimeSpanToStringConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		TimeSpanToStringConverter,
		/// <summary>
		/// TimeSpanToTicksConverter
		/// Description for
		/// Sawczyn.EFDesigner.EFModel.ValueConverter.TimeSpanToTicksConverter
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ValueConverter/TimeSpanToTicksConverter.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		TimeSpanToTicksConverter,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: AutomaticAction
	/// Description for Sawczyn.EFDesigner.EFModel.AutomaticAction
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum AutomaticAction
	{
		/// <summary>
		/// False
		/// Never perform the action automatically
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.AutomaticAction/False.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		False = 0,
		/// <summary>
		/// True
		/// Always perform the action automatically
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.AutomaticAction/True.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		True = 1,
		/// <summary>
		/// Ask
		/// Ask each time if should perform the action automatically
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.AutomaticAction/Ask.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Ask = 2,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: PropertyAccessMode
	/// Description for Sawczyn.EFDesigner.EFModel.PropertyAccessMode
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PropertyAccessMode
	{
		/// <summary>
		/// Field
		/// Enforces that all accesses to the property must go through the field. An
		/// exception will be thrown if this mode is set and it is not possible to read from
		/// or write to the field.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyAccessMode/Field.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Field = 0,
		/// <summary>
		/// FieldDuringConstruction
		/// Enforces that all accesses to the property must go through the field when new
		/// instances are being constructed. New instances are typically constructed when
		/// entities are queried from the database. An exception will be thrown if this mode
		/// is set and it is not possible to write to the field. All other uses of the
		/// property will go through the property getters and setters, unless this is not
		/// possible because, for example, the property is read-only, in which case these
		/// accesses will also use the field.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyAccessMode/FieldDuringConstruction.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		FieldDuringConstruction = 1,
		/// <summary>
		/// PreferField
		/// All accesses to the property goes directly to the field, unless the field is not
		/// known, in which as access goes through the property.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyAccessMode/PreferField.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		PreferField = 3,
		/// <summary>
		/// PreferFieldDuringConstruction
		/// All accesses to the property when constructing new entity instances goes
		/// directly to the field, unless the field is not known, in which as access goes
		/// through the property. All other uses of the property will go through the
		/// property getters and setters, unless this is not possible because, for example,
		/// the property is read-only, in which case these accesses will also use the field.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyAccessMode/PreferFieldDuringConstruction.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		PreferFieldDuringConstruction = 4,
		/// <summary>
		/// PreferProperty
		/// All accesses to the property go through the property, unless there is no
		/// property or it is missing a setter/getter, in which as access goes directly to
		/// the field.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyAccessMode/PreferProperty.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		PreferProperty = 5,
		/// <summary>
		/// Property
		/// Enforces that all accesses to the property must go through the property getters
		/// and setters, even when new objects are being constructed. An exception will be
		/// thrown if this mode is set and it is not possible to read from or write to the
		/// property, for example because it is read-only.
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyAccessMode/Property.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Property = 2,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: PropertyExposure
	/// How the code generator will present this property to Entity Framework (EFCore5+
	/// only)
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PropertyExposure
	{
		/// <summary>
		/// Property
		/// Generated code will create and use this attribute as a .NET property,
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyExposure/Property.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Property,
		/// <summary>
		/// Field
		/// Generated code will create and use this attribute as a .NET field
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.PropertyExposure/Field.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Field,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: TypeAccessModifierExt
	/// Description for Sawczyn.EFDesigner.EFModel.TypeAccessModifierExt
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum TypeAccessModifierExt
	{
		/// <summary>
		/// Internal
		/// No description available
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifierExt/Internal.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Internal = 3,
		/// <summary>
		/// Private
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifierExt/Private.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Private = 1,
		/// <summary>
		/// Protected
		/// No description available
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifierExt/Protected.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Protected = 2,
		/// <summary>
		/// Public
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifierExt/Public.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Public = 0,
		/// <summary>
		/// Default
		/// Description for Sawczyn.EFDesigner.EFModel.TypeAccessModifierExt.Default
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.TypeAccessModifierExt/Default.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		Default = 4,
	}
}
namespace Sawczyn.EFDesigner.EFModel
{
	/// <summary>
	/// DomainEnumeration: ShadowKeyPattern
	/// How to generate foreign key shadow property names
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum ShadowKeyPattern
	{
		/// <summary>
		/// TableColumn
		/// Generate as [Foreign Table][Key Column]
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ShadowKeyPattern/TableColumn.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		TableColumn = 1,
		/// <summary>
		/// TableUnderscoreColumn
		/// Generate as [Foreign Table]_[Key Column]
		/// </summary>
		[DslDesign::DescriptionResource("Sawczyn.EFDesigner.EFModel.ShadowKeyPattern/TableUnderscoreColumn.Description", typeof(global::Sawczyn.EFDesigner.EFModel.EFModelDomainModel), "Sawczyn.EFDesigner.EFModel.GeneratedCode.DomainModelResx")]
		TableUnderscoreColumn,
	}
}
